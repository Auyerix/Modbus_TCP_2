
LWIP_TCP_SERVER_CLIENT_NETCONN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172a8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a00  08017458  08017458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae58  0801ae58  0001c18c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae58  0801ae58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae60  0801ae60  0001c18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae60  0801ae60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ae64  0801ae64  0001be64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0801ae68  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c18c  2**0
                  CONTENTS
 10 .bss          0000ec5c  2000018c  2000018c  0001c18c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ede8  2000ede8  0001c18c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c18c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000318db  00000000  00000000  0001c1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d8d  00000000  00000000  0004da97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002388  00000000  00000000  00055828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c27  00000000  00000000  00057bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000362c8  00000000  00000000  000597d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000395dc  00000000  00000000  0008fa9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100d19  00000000  00000000  000c907b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c9d94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009bf8  00000000  00000000  001c9dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001d39d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017440 	.word	0x08017440

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000190 	.word	0x20000190
 80001ec:	08017440 	.word	0x08017440

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200001a8 	.word	0x200001a8
 80005c0:	20000248 	.word	0x20000248

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08a      	sub	sp, #40	@ 0x28
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	// Configuramos algunos estados de coils para el ejemplo
    coil_status[0] = 1;
 80005ca:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <main+0xac>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
    coil_status[1] = 0;
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <main+0xac>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	705a      	strb	r2, [r3, #1]
    coil_status[2] = 0;
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <main+0xac>)
 80005d8:	2200      	movs	r2, #0
 80005da:	709a      	strb	r2, [r3, #2]
    coil_status[3] = 1;
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <main+0xac>)
 80005de:	2201      	movs	r2, #1
 80005e0:	70da      	strb	r2, [r3, #3]
    coil_status[4] = 0;
 80005e2:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <main+0xac>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	711a      	strb	r2, [r3, #4]
    coil_status[5] = 0;
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <main+0xac>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	715a      	strb	r2, [r3, #5]
    coil_status[6] = 0;
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <main+0xac>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	719a      	strb	r2, [r3, #6]
    coil_status[7] = 1;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <main+0xac>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	71da      	strb	r2, [r3, #7]

    coil_status[8] = 1;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <main+0xac>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	721a      	strb	r2, [r3, #8]
    coil_status[15] = 1;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <main+0xac>)
 8000602:	2201      	movs	r2, #1
 8000604:	73da      	strb	r2, [r3, #15]

    coil_status[16] = 0;
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <main+0xac>)
 8000608:	2200      	movs	r2, #0
 800060a:	741a      	strb	r2, [r3, #16]
    coil_status[23] = 1;
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <main+0xac>)
 800060e:	2201      	movs	r2, #1
 8000610:	75da      	strb	r2, [r3, #23]

    coil_status[24] = 1;
 8000612:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <main+0xac>)
 8000614:	2201      	movs	r2, #1
 8000616:	761a      	strb	r2, [r3, #24]
    coil_status[31] = 1;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <main+0xac>)
 800061a:	2201      	movs	r2, #1
 800061c:	77da      	strb	r2, [r3, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 fa5d 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f82d 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f8bf 	bl	80007a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062a:	f000 f893 	bl	8000754 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f005 f9f0 	bl	8005a20 <osMutexCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a0c      	ldr	r2, [pc, #48]	@ (8000674 <main+0xb0>)
 8000644:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <main+0xb4>)
 8000648:	1d3c      	adds	r4, r7, #4
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 f97f 	bl	8005960 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a05      	ldr	r2, [pc, #20]	@ (800067c <main+0xb8>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f005 f963 	bl	8005932 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0xa8>
 8000670:	20000000 	.word	0x20000000
 8000674:	20000494 	.word	0x20000494
 8000678:	08017464 	.word	0x08017464
 800067c:	20000490 	.word	0x20000490

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f015 fe4d 	bl	801632e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f4:	23a8      	movs	r3, #168	@ 0xa8
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 ff53 	bl	80035b0 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f980 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f9b4 	bl	8003aa0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073e:	f000 f969 	bl	8000a14 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART3_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800078c:	f003 fe7c 	bl	8004488 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f93d 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000448 	.word	0x20000448
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	@ 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	4b5b      	ldr	r3, [pc, #364]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a5a      	ldr	r2, [pc, #360]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b58      	ldr	r3, [pc, #352]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	4b54      	ldr	r3, [pc, #336]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a53      	ldr	r2, [pc, #332]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b51      	ldr	r3, [pc, #324]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000930 <MX_GPIO_Init+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b4a      	ldr	r3, [pc, #296]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b46      	ldr	r3, [pc, #280]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a45      	ldr	r2, [pc, #276]	@ (8000930 <MX_GPIO_Init+0x188>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b43      	ldr	r3, [pc, #268]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b3f      	ldr	r3, [pc, #252]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a3e      	ldr	r2, [pc, #248]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b3c      	ldr	r3, [pc, #240]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b38      	ldr	r3, [pc, #224]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a37      	ldr	r2, [pc, #220]	@ (8000930 <MX_GPIO_Init+0x188>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <MX_GPIO_Init+0x188>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800086c:	4831      	ldr	r0, [pc, #196]	@ (8000934 <MX_GPIO_Init+0x18c>)
 800086e:	f002 fe85 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	4830      	ldr	r0, [pc, #192]	@ (8000938 <MX_GPIO_Init+0x190>)
 8000878:	f002 fe80 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	482a      	ldr	r0, [pc, #168]	@ (800093c <MX_GPIO_Init+0x194>)
 8000894:	f002 fcc6 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000898:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4820      	ldr	r0, [pc, #128]	@ (8000934 <MX_GPIO_Init+0x18c>)
 80008b2:	f002 fcb7 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481a      	ldr	r0, [pc, #104]	@ (8000938 <MX_GPIO_Init+0x190>)
 80008ce:	f002 fca9 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d2:	2380      	movs	r3, #128	@ 0x80
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4814      	ldr	r0, [pc, #80]	@ (8000938 <MX_GPIO_Init+0x190>)
 80008e6:	f002 fc9d 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4810      	ldr	r0, [pc, #64]	@ (8000940 <MX_GPIO_Init+0x198>)
 8000900:	f002 fc90 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000904:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000916:	230a      	movs	r3, #10
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	@ (8000940 <MX_GPIO_Init+0x198>)
 8000922:	f002 fc7f 	bl	8003224 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	@ 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400
 8000938:	40021800 	.word	0x40021800
 800093c:	40020800 	.word	0x40020800
 8000940:	40020000 	.word	0x40020000

08000944 <SendString>:

/* USER CODE BEGIN 4 */


void SendString(const char *str) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    // Toma el mutex antes de transmitir
    if (osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <SendString+0x44>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	4618      	mov	r0, r3
 8000956:	f005 f87b 	bl	8005a50 <osMutexWait>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10f      	bne.n	8000980 <SendString+0x3c>
        HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fc45 	bl	80001f0 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <SendString+0x48>)
 8000972:	f003 fdd9 	bl	8004528 <HAL_UART_Transmit>
        // Libera el mutex después de transmitir
        osMutexRelease(uartMutexHandle);
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <SendString+0x44>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f005 f8b6 	bl	8005aec <osMutexRelease>
    } else {
        // Manejo de error si no se puede tomar el mutex
        // Esto debería ser raro si usas osWaitForever
    }
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000494 	.word	0x20000494
 800098c:	20000448 	.word	0x20000448

08000990 <SendNumber>:

void SendNumber(int16_t number) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
    char buffer[20];  // Buffer para almacenar el número como cadena
    sprintf(buffer, "%d", number);  // Convierte el número a cadena
 800099a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4906      	ldr	r1, [pc, #24]	@ (80009bc <SendNumber+0x2c>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f015 fc35 	bl	8016214 <siprintf>
    SendString(buffer);  // Envia la cadena por UART
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffc8 	bl	8000944 <SendString>
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	08017480 	.word	0x08017480

080009c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009c8:	f004 f96a 	bl	8004ca0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 80009cc:	f000 fdec 	bl	80015a8 <tcpserver_init>


  //const char *mensaje = "I'm alive!!!\n";
  const char *mensaje_bienvenida = "inicio Modbus TCP Remoto en modo Servidor\r";
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <StartDefaultTask+0x2c>)
 80009d2:	60fb      	str	r3, [r7, #12]

  SendString(mensaje_bienvenida);
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff ffb5 	bl	8000944 <SendString>

  /* Infinite loop */
  for(;;)
  {
	  //SendString(mensaje);
	  osDelay(500);
 80009da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009de:	f005 f80b 	bl	80059f8 <osDelay>

	  osDelay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f005 f808 	bl	80059f8 <osDelay>
	  osDelay(500);
 80009e8:	bf00      	nop
 80009ea:	e7f6      	b.n	80009da <StartDefaultTask+0x1a>
 80009ec:	08017484 	.word	0x08017484

080009f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a02:	f001 f88d 	bl	8001b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40001000 	.word	0x40001000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <Error_Handler+0x8>

08000a20 <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 8000a2e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a32:	2100      	movs	r1, #0
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f015 fc7a 	bl	801632e <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 f934 	bl	8000caa <mb_mbap_copy>
	uint16_t pduLen = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	79db      	ldrb	r3, [r3, #7]
 8000a4a:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 8000a4c:	7d7b      	ldrb	r3, [r7, #21]
 8000a4e:	2b10      	cmp	r3, #16
 8000a50:	dc1c      	bgt.n	8000a8c <mb_process+0x6c>
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	da23      	bge.n	8000a9e <mb_process+0x7e>
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	dc02      	bgt.n	8000a60 <mb_process+0x40>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dc04      	bgt.n	8000a68 <mb_process+0x48>
 8000a5e:	e015      	b.n	8000a8c <mb_process+0x6c>
 8000a60:	3b05      	subs	r3, #5
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d812      	bhi.n	8000a8c <mb_process+0x6c>
 8000a66:	e008      	b.n	8000a7a <mb_process+0x5a>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f82c 	bl	8000acc <mb_process_pdu_read_fn>
 8000a74:	4603      	mov	r3, r0
 8000a76:	82fb      	strh	r3, [r7, #22]
		break;
 8000a78:	e012      	b.n	8000aa0 <mb_process+0x80>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f89f 	bl	8000bc4 <mb_process_pdu_write_single_fn>
 8000a86:	4603      	mov	r3, r0
 8000a88:	82fb      	strh	r3, [r7, #22]
		break;
 8000a8a:	e009      	b.n	8000aa0 <mb_process+0x80>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 8000a8c:	7d7b      	ldrb	r3, [r7, #21]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f9aa 	bl	8000dec <mb_process_err>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	82fb      	strh	r3, [r7, #22]
		break;
 8000a9c:	e000      	b.n	8000aa0 <mb_process+0x80>
		break;
 8000a9e:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 8000aa0:	8afb      	ldrh	r3, [r7, #22]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	121a      	asrs	r2, r3, #8
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 8000aae:	8afb      	ldrh	r3, [r7, #22]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3305      	adds	r3, #5
 8000ab6:	3201      	adds	r2, #1
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 8000abc:	8afb      	ldrh	r3, [r7, #22]
 8000abe:	3307      	adds	r3, #7
 8000ac0:	b29b      	uxth	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	79db      	ldrb	r3, [r3, #7]
 8000ade:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3309      	adds	r3, #9
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3308      	adds	r3, #8
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	330b      	adds	r3, #11
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	330a      	adds	r3, #10
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	8a7a      	ldrh	r2, [r7, #18]
 8000b12:	8ab9      	ldrh	r1, [r7, #20]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f8eb 	bl	8000cf0 <mb_process_start_address>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d007      	beq.n	8000b30 <mb_process_pdu_read_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	2202      	movs	r2, #2
 8000b24:	4619      	mov	r1, r3
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f000 f960 	bl	8000dec <mb_process_err>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	e045      	b.n	8000bbc <mb_process_pdu_read_fn+0xf0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3307      	adds	r3, #7
 8000b34:	7dfa      	ldrb	r2, [r7, #23]
 8000b36:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	8a7a      	ldrh	r2, [r7, #18]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f96e 	bl	8000e22 <mb_pdu_calculate_N>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	701a      	strb	r2, [r3, #0]

		switch (fn) {
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d826      	bhi.n	8000ba8 <mb_process_pdu_read_fn+0xdc>
 8000b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b60 <mb_process_pdu_read_fn+0x94>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000b7f 	.word	0x08000b7f
 8000b68:	08000b8d 	.word	0x08000b8d
 8000b6c:	08000b9b 	.word	0x08000b9b
		case MB_FN_READ_COILS:
			read_coils(mb_repl_buf, start_address, quantity);
 8000b70:	8a7a      	ldrh	r2, [r7, #18]
 8000b72:	8abb      	ldrh	r3, [r7, #20]
 8000b74:	4619      	mov	r1, r3
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f000 f980 	bl	8000e7c <read_coils>
			break;
 8000b7c:	e014      	b.n	8000ba8 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_DISCRETE:
			read_discrete(mb_repl_buf, start_address, quantity);
 8000b7e:	8a7a      	ldrh	r2, [r7, #18]
 8000b80:	8abb      	ldrh	r3, [r7, #20]
 8000b82:	4619      	mov	r1, r3
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f9b9 	bl	8000efc <read_discrete>
			break;
 8000b8a:	e00d      	b.n	8000ba8 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_HOLDING:
			read_holding(mb_repl_buf, start_address, quantity);
 8000b8c:	8a7a      	ldrh	r2, [r7, #18]
 8000b8e:	8abb      	ldrh	r3, [r7, #20]
 8000b90:	4619      	mov	r1, r3
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 fa34 	bl	8001000 <read_holding>
			break;
 8000b98:	e006      	b.n	8000ba8 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_INPUT:
			read_inputs(mb_repl_buf, start_address, quantity);
 8000b9a:	8a7a      	ldrh	r2, [r7, #18]
 8000b9c:	8abb      	ldrh	r3, [r7, #20]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f000 f9eb 	bl	8000f7c <read_inputs>
			break;
 8000ba6:	bf00      	nop
		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	8a7a      	ldrh	r2, [r7, #18]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f936 	bl	8000e22 <mb_pdu_calculate_N>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	3302      	adds	r3, #2
 8000bba:	b29b      	uxth	r3, r3
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	79db      	ldrb	r3, [r3, #7]
 8000bd6:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3309      	adds	r3, #9
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3308      	adds	r3, #8
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4413      	add	r3, r2
 8000bec:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	330b      	adds	r3, #11
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	330a      	adds	r3, #10
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	8ab9      	ldrh	r1, [r7, #20]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f86f 	bl	8000cf0 <mb_process_start_address>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d007      	beq.n	8000c28 <mb_process_pdu_write_single_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f8e4 	bl	8000dec <mb_process_err>
 8000c24:	4603      	mov	r3, r0
 8000c26:	e03c      	b.n	8000ca2 <mb_process_pdu_write_single_fn+0xde>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	8a7a      	ldrh	r2, [r7, #18]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f8bd 	bl	8000db0 <mb_process_val>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <mb_process_pdu_write_single_fn+0x88>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4619      	mov	r1, r3
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f000 f8d2 	bl	8000dec <mb_process_err>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	e02a      	b.n	8000ca2 <mb_process_pdu_write_single_fn+0xde>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3307      	adds	r3, #7
 8000c50:	7dfa      	ldrb	r2, [r7, #23]
 8000c52:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	7a12      	ldrb	r2, [r2, #8]
 8000c5c:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3309      	adds	r3, #9
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	7a52      	ldrb	r2, [r2, #9]
 8000c66:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	330a      	adds	r3, #10
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	7a92      	ldrb	r2, [r2, #10]
 8000c70:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	330b      	adds	r3, #11
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	7ad2      	ldrb	r2, [r2, #11]
 8000c7a:	701a      	strb	r2, [r3, #0]

		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b05      	cmp	r3, #5
 8000c80:	d105      	bne.n	8000c8e <mb_process_pdu_write_single_fn+0xca>
 8000c82:	8a7a      	ldrh	r2, [r7, #18]
 8000c84:	8abb      	ldrh	r3, [r7, #20]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f9fb 	bl	8001084 <write_single_coil>
		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d105      	bne.n	8000ca0 <mb_process_pdu_write_single_fn+0xdc>
 8000c94:	8a7a      	ldrh	r2, [r7, #18]
 8000c96:	8abb      	ldrh	r3, [r7, #20]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fa16 	bl	80010cc <write_single_holding>
	}
	return 5; // PDU size for write single XXX command
 8000ca0:	2305      	movs	r3, #5
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <mb_mbap_copy>:

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf) {
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	7852      	ldrb	r2, [r2, #1]
 8000cc4:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	7892      	ldrb	r2, [r2, #2]
 8000cce:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	78d2      	ldrb	r2, [r2, #3]
 8000cd8:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3306      	adds	r3, #6
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	7992      	ldrb	r2, [r2, #6]
 8000ce2:	701a      	strb	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	d849      	bhi.n	8000da2 <mb_process_start_address+0xb2>
 8000d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d14 <mb_process_start_address+0x24>)
 8000d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d14:	08000d2d 	.word	0x08000d2d
 8000d18:	08000d3d 	.word	0x08000d3d
 8000d1c:	08000d4d 	.word	0x08000d4d
 8000d20:	08000d5d 	.word	0x08000d5d
 8000d24:	08000d6d 	.word	0x08000d6d
 8000d28:	08000d7d 	.word	0x08000d7d
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	4413      	add	r3, r2
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	dd2a      	ble.n	8000d8c <mb_process_start_address+0x9c>
			exception_code = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3a:	e027      	b.n	8000d8c <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	4413      	add	r3, r2
 8000d42:	2bff      	cmp	r3, #255	@ 0xff
 8000d44:	dd24      	ble.n	8000d90 <mb_process_start_address+0xa0>
			exception_code = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	73fb      	strb	r3, [r7, #15]
		break;
 8000d4a:	e021      	b.n	8000d90 <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000d4c:	88ba      	ldrh	r2, [r7, #4]
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	4413      	add	r3, r2
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	dd1e      	ble.n	8000d94 <mb_process_start_address+0xa4>
			exception_code = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	73fb      	strb	r3, [r7, #15]
		break;
 8000d5a:	e01b      	b.n	8000d94 <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8000d5c:	88ba      	ldrh	r2, [r7, #4]
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	4413      	add	r3, r2
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	dd18      	ble.n	8000d98 <mb_process_start_address+0xa8>
			exception_code = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	73fb      	strb	r3, [r7, #15]
		break;
 8000d6a:	e015      	b.n	8000d98 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8000d6c:	88ba      	ldrh	r2, [r7, #4]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	4413      	add	r3, r2
 8000d72:	2bff      	cmp	r3, #255	@ 0xff
 8000d74:	dd12      	ble.n	8000d9c <mb_process_start_address+0xac>
			exception_code = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	73fb      	strb	r3, [r7, #15]
		break;
 8000d7a:	e00f      	b.n	8000d9c <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000d7c:	88ba      	ldrh	r2, [r7, #4]
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	4413      	add	r3, r2
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	dd0c      	ble.n	8000da0 <mb_process_start_address+0xb0>
			exception_code = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	73fb      	strb	r3, [r7, #15]
		break;
 8000d8a:	e009      	b.n	8000da0 <mb_process_start_address+0xb0>
		break;
 8000d8c:	bf00      	nop
 8000d8e:	e008      	b.n	8000da2 <mb_process_start_address+0xb2>
		break;
 8000d90:	bf00      	nop
 8000d92:	e006      	b.n	8000da2 <mb_process_start_address+0xb2>
		break;
 8000d94:	bf00      	nop
 8000d96:	e004      	b.n	8000da2 <mb_process_start_address+0xb2>
		break;
 8000d98:	bf00      	nop
 8000d9a:	e002      	b.n	8000da2 <mb_process_start_address+0xb2>
		break;
 8000d9c:	bf00      	nop
 8000d9e:	e000      	b.n	8000da2 <mb_process_start_address+0xb2>
		break;
 8000da0:	bf00      	nop
	}
	return exception_code;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	80fb      	strh	r3, [r7, #6]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d109      	bne.n	8000dde <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000dd0:	d004      	beq.n	8000ddc <mb_process_val+0x2c>
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <mb_process_val+0x2c>
			exception_code = 3;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	73fb      	strb	r3, [r7, #15]
		break;
 8000ddc:	bf00      	nop
	}
	return exception_code;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <mb_process_err>:

static uint16_t mb_process_err(uint8_t *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3307      	adds	r3, #7
 8000e00:	78fa      	ldrb	r2, [r7, #3]
 8000e02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	883a      	ldrh	r2, [r7, #0]
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	701a      	strb	r2, [r3, #0]
	return 2;
 8000e14:	2302      	movs	r3, #2
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	dc02      	bgt.n	8000e3e <mb_pdu_calculate_N+0x1c>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	dc04      	bgt.n	8000e46 <mb_pdu_calculate_N+0x24>
 8000e3c:	e017      	b.n	8000e6e <mb_pdu_calculate_N+0x4c>
 8000e3e:	3b03      	subs	r3, #3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d814      	bhi.n	8000e6e <mb_pdu_calculate_N+0x4c>
 8000e44:	e00f      	b.n	8000e66 <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	e008      	b.n	8000e70 <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	08db      	lsrs	r3, r3, #3
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	e004      	b.n	8000e70 <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	e000      	b.n	8000e70 <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8000e6e:	2300      	movs	r3, #0
	}
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <read_coils>:

void read_coils(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	803b      	strh	r3, [r7, #0]
    //uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("leo coils coils \r");
 8000e8c:	4819      	ldr	r0, [pc, #100]	@ (8000ef4 <read_coils+0x78>)
 8000e8e:	f7ff fd59 	bl	8000944 <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	81fb      	strh	r3, [r7, #14]
 8000e96:	e023      	b.n	8000ee0 <read_coils+0x64>
        uint16_t coil_index = address + i;
 8000e98:	887a      	ldrh	r2, [r7, #2]
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	81bb      	strh	r3, [r7, #12]
        if (coil_status[coil_index]) {
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <read_coils+0x7c>)
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d017      	beq.n	8000eda <read_coils+0x5e>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	b298      	uxth	r0, r3
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	3309      	adds	r3, #9
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b25a      	sxtb	r2, r3
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b259      	sxtb	r1, r3
 8000ece:	4603      	mov	r3, r0
 8000ed0:	3309      	adds	r3, #9
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b2ca      	uxtb	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	3301      	adds	r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	883b      	ldrh	r3, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3d7      	bcc.n	8000e98 <read_coils+0x1c>
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
    }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	080174b0 	.word	0x080174b0
 8000ef8:	20000000 	.word	0x20000000

08000efc <read_discrete>:

void read_discrete(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	803b      	strh	r3, [r7, #0]
    // NO USADO uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("leo discrete \r");
 8000f0c:	4819      	ldr	r0, [pc, #100]	@ (8000f74 <read_discrete+0x78>)
 8000f0e:	f7ff fd19 	bl	8000944 <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	81fb      	strh	r3, [r7, #14]
 8000f16:	e023      	b.n	8000f60 <read_discrete+0x64>
        uint16_t discrete_index = address + i;
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	81bb      	strh	r3, [r7, #12]
        if (discrete_status[discrete_index]) {
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	4a15      	ldr	r2, [pc, #84]	@ (8000f78 <read_discrete+0x7c>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d017      	beq.n	8000f5a <read_discrete+0x5e>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	4603      	mov	r3, r0
 8000f32:	3309      	adds	r3, #9
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b259      	sxtb	r1, r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	3309      	adds	r3, #9
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	81fb      	strh	r3, [r7, #14]
 8000f60:	89fa      	ldrh	r2, [r7, #14]
 8000f62:	883b      	ldrh	r3, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3d7      	bcc.n	8000f18 <read_discrete+0x1c>
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
    }

}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	080174c4 	.word	0x080174c4
 8000f78:	20000498 	.word	0x20000498

08000f7c <read_inputs>:

//Lectura de input
void read_inputs(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	803b      	strh	r3, [r7, #0]
	SendString("leo inputs \r");
 8000f8c:	481a      	ldr	r0, [pc, #104]	@ (8000ff8 <read_inputs+0x7c>)
 8000f8e:	f7ff fcd9 	bl	8000944 <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	89ba      	ldrh	r2, [r7, #12]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81fb      	strh	r3, [r7, #14]
 8000fa6:	e01e      	b.n	8000fe6 <read_inputs+0x6a>
        uint16_t inputs_index = address + i;
 8000fa8:	887a      	ldrh	r2, [r7, #2]
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	4413      	add	r3, r2
 8000fae:	817b      	strh	r3, [r7, #10]
        uint16_t inputs_value = input_status[inputs_index];  // Valor del registro holding
 8000fb0:	897b      	ldrh	r3, [r7, #10]
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <read_inputs+0x80>)
 8000fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb8:	813b      	strh	r3, [r7, #8]

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (inputs_value >> 8) & 0xFF;  // Byte alto
 8000fba:	893b      	ldrh	r3, [r7, #8]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	3309      	adds	r3, #9
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	440b      	add	r3, r1
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = inputs_value & 0xFF;         // Byte bajo
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	330a      	adds	r3, #10
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	893a      	ldrh	r2, [r7, #8]
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	81fb      	strh	r3, [r7, #14]
 8000fe6:	89fa      	ldrh	r2, [r7, #14]
 8000fe8:	883b      	ldrh	r3, [r7, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3dc      	bcc.n	8000fa8 <read_inputs+0x2c>
    }
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	080174d4 	.word	0x080174d4
 8000ffc:	20000598 	.word	0x20000598

08001000 <read_holding>:

//Lectura de holdings
void read_holding(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	803b      	strh	r3, [r7, #0]
	SendString("leo holding \r");
 8001010:	481a      	ldr	r0, [pc, #104]	@ (800107c <read_holding+0x7c>)
 8001012:	f7ff fc97 	bl	8000944 <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 8001016:	883b      	ldrh	r3, [r7, #0]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3308      	adds	r3, #8
 8001020:	89ba      	ldrh	r2, [r7, #12]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	81fb      	strh	r3, [r7, #14]
 800102a:	e01e      	b.n	800106a <read_holding+0x6a>
        uint16_t reg_index = address + i;
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	4413      	add	r3, r2
 8001032:	817b      	strh	r3, [r7, #10]
        uint16_t holding_value = holding_registers[reg_index];  // Valor del registro holding
 8001034:	897b      	ldrh	r3, [r7, #10]
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <read_holding+0x80>)
 8001038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103c:	813b      	strh	r3, [r7, #8]

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (holding_value >> 8) & 0xFF;  // Byte alto
 800103e:	893b      	ldrh	r3, [r7, #8]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29a      	uxth	r2, r3
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	3309      	adds	r3, #9
 800104a:	4619      	mov	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	440b      	add	r3, r1
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = holding_value & 0xFF;         // Byte bajo
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	330a      	adds	r3, #10
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	893a      	ldrh	r2, [r7, #8]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8001064:	89fb      	ldrh	r3, [r7, #14]
 8001066:	3301      	adds	r3, #1
 8001068:	81fb      	strh	r3, [r7, #14]
 800106a:	89fa      	ldrh	r2, [r7, #14]
 800106c:	883b      	ldrh	r3, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3dc      	bcc.n	800102c <read_holding+0x2c>
    }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	080174e4 	.word	0x080174e4
 8001080:	200005ac 	.word	0x200005ac

08001084 <write_single_coil>:

void write_single_coil(uint16_t address, uint16_t val) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	4613      	mov	r3, r2
 8001092:	80bb      	strh	r3, [r7, #4]
	SendString("escribo coils \r");
 8001094:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <write_single_coil+0x40>)
 8001096:	f7ff fc55 	bl	8000944 <SendString>
    // Verificar si el valor es válido para una coil (0xFF00 para ON, 0x0000 para OFF)
    if (val == 0xFF00) {
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80010a0:	d104      	bne.n	80010ac <write_single_coil+0x28>
        // Establecer la coil en ON (1)
        coil_status[address] = 1;
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <write_single_coil+0x44>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	54d1      	strb	r1, [r2, r3]
 80010aa:	e008      	b.n	80010be <write_single_coil+0x3a>
    } else if (val == 0x0000) {
 80010ac:	88bb      	ldrh	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d104      	bne.n	80010bc <write_single_coil+0x38>
        // Establecer la coil en OFF (0)
        coil_status[address] = 0;
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <write_single_coil+0x44>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	54d1      	strb	r1, [r2, r3]
 80010ba:	e000      	b.n	80010be <write_single_coil+0x3a>
    } else {
        // Valor inválido, manejar error según el protocolo Modbus
        return;
 80010bc:	bf00      	nop
    }

    // Opcional: aquí podrías generar una respuesta Modbus o hacer algo con los cambios.
}
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	080174f4 	.word	0x080174f4
 80010c8:	20000000 	.word	0x20000000

080010cc <write_single_holding>:

void write_single_holding(uint16_t address, uint16_t val) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	4613      	mov	r3, r2
 80010da:	80bb      	strh	r3, [r7, #4]
	SendString("escribo holding \r");
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <write_single_holding+0x28>)
 80010de:	f7ff fc31 	bl	8000944 <SendString>
    // Escribir el valor directamente en el holding register correspondiente
    holding_registers[address] = val;
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	4904      	ldr	r1, [pc, #16]	@ (80010f8 <write_single_holding+0x2c>)
 80010e6:	88ba      	ldrh	r2, [r7, #4]
 80010e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08017504 	.word	0x08017504
 80010f8:	200005ac 	.word	0x200005ac

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_MspInit+0x54>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	4a11      	ldr	r2, [pc, #68]	@ (8001150 <HAL_MspInit+0x54>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001110:	6453      	str	r3, [r2, #68]	@ 0x44
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_MspInit+0x54>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_MspInit+0x54>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <HAL_MspInit+0x54>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	@ 0x40
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_MspInit+0x54>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	210f      	movs	r1, #15
 800113e:	f06f 0001 	mvn.w	r0, #1
 8001142:	f000 fde9 	bl	8001d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	@ (80011d8 <HAL_UART_MspInit+0x84>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12c      	bne.n	80011d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_UART_MspInit+0x88>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <HAL_UART_MspInit+0x88>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_UART_MspInit+0x88>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_UART_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a10      	ldr	r2, [pc, #64]	@ (80011dc <HAL_UART_MspInit+0x88>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_UART_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c0:	2307      	movs	r3, #7
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HAL_UART_MspInit+0x8c>)
 80011cc:	f002 f82a 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	@ 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40004800 	.word	0x40004800
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020c00 	.word	0x40020c00

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	@ 0x38
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <HAL_InitTick+0xe4>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	4a32      	ldr	r2, [pc, #200]	@ (80012c8 <HAL_InitTick+0xe4>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6413      	str	r3, [r2, #64]	@ 0x40
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_InitTick+0xe4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fe60 	bl	8003ee0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800122a:	f002 fe31 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 800122e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001232:	f002 fe2d 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123e:	4a23      	ldr	r2, [pc, #140]	@ (80012cc <HAL_InitTick+0xe8>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	3b01      	subs	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <HAL_InitTick+0xec>)
 800124c:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <HAL_InitTick+0xf0>)
 800124e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HAL_InitTick+0xec>)
 8001252:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001256:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001258:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_InitTick+0xec>)
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <HAL_InitTick+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <HAL_InitTick+0xec>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_InitTick+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001270:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <HAL_InitTick+0xec>)
 8001272:	f002 fe67 	bl	8003f44 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800127c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11b      	bne.n	80012bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001284:	4812      	ldr	r0, [pc, #72]	@ (80012d0 <HAL_InitTick+0xec>)
 8001286:	f002 feb7 	bl	8003ff8 <HAL_TIM_Base_Start_IT>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001298:	2036      	movs	r0, #54	@ 0x36
 800129a:	f000 fd59 	bl	8001d50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d808      	bhi.n	80012b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2036      	movs	r0, #54	@ 0x36
 80012aa:	f000 fd35 	bl	8001d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_InitTick+0xf4>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e002      	b.n	80012bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3738      	adds	r7, #56	@ 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	200005c0 	.word	0x200005c0
 80012d4:	40001000 	.word	0x40001000
 80012d8:	20000104 	.word	0x20000104

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <TIM6_DAC_IRQHandler+0x10>)
 800131a:	f002 fedd 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200005c0 	.word	0x200005c0

08001328 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <ETH_IRQHandler+0x10>)
 800132e:	f001 f8a3 	bl	8002478 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20005344 	.word	0x20005344

0800133c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_kill>:

int _kill(int pid, int sig)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <_kill+0x20>)
 8001358:	2216      	movs	r2, #22
 800135a:	601a      	str	r2, [r3, #0]
  return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	2000edd8 	.word	0x2000edd8

08001370 <_exit>:

void _exit (int status)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffe5 	bl	800134c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001382:	bf00      	nop
 8001384:	e7fd      	b.n	8001382 <_exit+0x12>

08001386 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e00a      	b.n	80013ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001398:	f3af 8000 	nop.w
 800139c:	4601      	mov	r1, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	60ba      	str	r2, [r7, #8]
 80013a4:	b2ca      	uxtb	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dbf0      	blt.n	8001398 <_read+0x12>
  }

  return len;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e009      	b.n	80013e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbf1      	blt.n	80013d2 <_write+0x12>
  }
  return len;
 80013ee:	687b      	ldr	r3, [r7, #4]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_close>:

int _close(int file)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001420:	605a      	str	r2, [r3, #4]
  return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_isatty>:

int _isatty(int file)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d205      	bcs.n	800149c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <_sbrk+0x6c>)
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20030000 	.word	0x20030000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000608 	.word	0x20000608
 80014c8:	2000ede8 	.word	0x2000ede8
 80014cc:	2000edd8 	.word	0x2000edd8

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <tcp_thread>:
static void process_client_connection(struct netconn *client_conn);
static err_t initialize_server();


// Función principal del hilo TCP
static void tcp_thread(void *arg) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    err_t server_err, accept_err;

    SendString("Estoy en thread principal***********************************\r");
 80014fc:	4822      	ldr	r0, [pc, #136]	@ (8001588 <tcp_thread+0x94>)
 80014fe:	f7ff fa21 	bl	8000944 <SendString>

    while (1) {
        // Inicializar el servidor
        server_err = initialize_server();
 8001502:	f000 f8d7 	bl	80016b4 <initialize_server>
 8001506:	4603      	mov	r3, r0
 8001508:	73fb      	strb	r3, [r7, #15]
        if (server_err != ERR_OK) {
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <tcp_thread+0x2e>
            //printf("Error: Reintentando iniciar el servidor en %d ms...\n", RETRY_DELAY_MS);
        	SendString("Error: Reintentando iniciar el servidor");
 8001512:	481e      	ldr	r0, [pc, #120]	@ (800158c <tcp_thread+0x98>)
 8001514:	f7ff fa16 	bl	8000944 <SendString>
            sys_msleep(RETRY_DELAY_MS); // Esperar antes de reintentar (un sleep de la propia librería lwip)
 8001518:	f241 3088 	movw	r0, #5000	@ 0x1388
 800151c:	f00b fb96 	bl	800cc4c <sys_msleep>
            continue;
 8001520:	e030      	b.n	8001584 <tcp_thread+0x90>
        }

        // Aceptar conexiones entrantes
        while (1) {
            accept_err = netconn_accept(conn, &newconn);
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <tcp_thread+0x9c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	491b      	ldr	r1, [pc, #108]	@ (8001594 <tcp_thread+0xa0>)
 8001528:	4618      	mov	r0, r3
 800152a:	f007 fb49 	bl	8008bc0 <netconn_accept>
 800152e:	4603      	mov	r3, r0
 8001530:	73bb      	strb	r3, [r7, #14]
            if (accept_err == ERR_OK) {
 8001532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d108      	bne.n	800154c <tcp_thread+0x58>
                //printf("Cliente conectado.\n");
            	SendString("Cliente conectado...\r");
 800153a:	4817      	ldr	r0, [pc, #92]	@ (8001598 <tcp_thread+0xa4>)
 800153c:	f7ff fa02 	bl	8000944 <SendString>
                process_client_connection(newconn); // Procesar conexión del cliente
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <tcp_thread+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f863 	bl	8001610 <process_client_connection>
 800154a:	e7ea      	b.n	8001522 <tcp_thread+0x2e>
            } else {
                //printf("Error al aceptar conexión (Error: %d). Reintentando...\n", accept_err);
            	SendString("Error al aceptar conexión Reintentando...\n");
 800154c:	4813      	ldr	r0, [pc, #76]	@ (800159c <tcp_thread+0xa8>)
 800154e:	f7ff f9f9 	bl	8000944 <SendString>
                break; // Salir al detectar un error en el servidor
 8001552:	bf00      	nop
            }
        }

        // Liberar recursos del servidor en caso de error
        //printf("Cerrando servidor...\n");
        SendString("Cerrando servidor...\n");
 8001554:	4812      	ldr	r0, [pc, #72]	@ (80015a0 <tcp_thread+0xac>)
 8001556:	f7ff f9f5 	bl	8000944 <SendString>
        netconn_close(conn);
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <tcp_thread+0x9c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f007 fece 	bl	8009300 <netconn_close>
        netconn_delete(conn);
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <tcp_thread+0x9c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f007 faa9 	bl	8008ac0 <netconn_delete>
        conn = NULL;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <tcp_thread+0x9c>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        // Reintentar después de un tiempo
        //printf("Reiniciando servidor en %d ms...\n", RETRY_DELAY_MS);
        SendString("Reiniciando servidor en ms...\n");
 8001574:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <tcp_thread+0xb0>)
 8001576:	f7ff f9e5 	bl	8000944 <SendString>
        sys_msleep(RETRY_DELAY_MS);  //un sleep de la propia librería lwip
 800157a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800157e:	f00b fb65 	bl	800cc4c <sys_msleep>
 8001582:	e7be      	b.n	8001502 <tcp_thread+0xe>
        server_err = initialize_server();
 8001584:	e7bd      	b.n	8001502 <tcp_thread+0xe>
 8001586:	bf00      	nop
 8001588:	08017518 	.word	0x08017518
 800158c:	08017558 	.word	0x08017558
 8001590:	2000060c 	.word	0x2000060c
 8001594:	20000610 	.word	0x20000610
 8001598:	08017580 	.word	0x08017580
 800159c:	08017598 	.word	0x08017598
 80015a0:	080175c4 	.word	0x080175c4
 80015a4:	080175dc 	.word	0x080175dc

080015a8 <tcpserver_init>:





void tcpserver_init(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af02      	add	r7, sp, #8
	sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b6:	2200      	movs	r2, #0
 80015b8:	4903      	ldr	r1, [pc, #12]	@ (80015c8 <tcpserver_init+0x20>)
 80015ba:	4804      	ldr	r0, [pc, #16]	@ (80015cc <tcpserver_init+0x24>)
 80015bc:	f014 fcd4 	bl	8015f68 <sys_thread_new>
			osPriorityNormal);
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	080014f5 	.word	0x080014f5
 80015cc:	080175fc 	.word	0x080175fc

080015d0 <copyString>:

static void copyString(uint8_t* dest, uint8_t* src, unsigned num){
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	for(unsigned i = 0; i != num; ++i){
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <copyString+0x28>
		dest[i] = src[i];
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	441a      	add	r2, r3
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	440b      	add	r3, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	701a      	strb	r2, [r3, #0]
	for(unsigned i = 0; i != num; ++i){
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1f0      	bne.n	80015e2 <copyString+0x12>
	}
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <process_client_connection>:


/************************************************************************/
// Función para procesar una conexión de cliente
static void process_client_connection(struct netconn *client_conn) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]
    err_t recv_err;

    // Configurar timeout para evitar bloqueos indefinidos
    //netconn_set_recvtimeout(client_conn, 5000); // Timeout de 5 segundos

    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001618:	e02d      	b.n	8001676 <process_client_connection+0x66>
        do {
            copyString(mb_req_buf, netbuf->p->payload, netbuf->p->len); // Obtener mensaje del cliente
 800161a:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <process_client_connection+0x94>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6859      	ldr	r1, [r3, #4]
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <process_client_connection+0x94>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	895b      	ldrh	r3, [r3, #10]
 800162a:	461a      	mov	r2, r3
 800162c:	481e      	ldr	r0, [pc, #120]	@ (80016a8 <process_client_connection+0x98>)
 800162e:	f7ff ffcf 	bl	80015d0 <copyString>
            uint16_t buf_len = netbuf->p->len;
 8001632:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <process_client_connection+0x94>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	895b      	ldrh	r3, [r3, #10]
 800163a:	81bb      	strh	r3, [r7, #12]
            buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len);    // Procesar datos
 800163c:	89bb      	ldrh	r3, [r7, #12]
 800163e:	461a      	mov	r2, r3
 8001640:	4919      	ldr	r1, [pc, #100]	@ (80016a8 <process_client_connection+0x98>)
 8001642:	481a      	ldr	r0, [pc, #104]	@ (80016ac <process_client_connection+0x9c>)
 8001644:	f7ff f9ec 	bl	8000a20 <mb_process>
 8001648:	4603      	mov	r3, r0
 800164a:	81bb      	strh	r3, [r7, #12]
            netconn_write(client_conn, mb_repl_buf, buf_len, NETCONN_COPY); // Responder al cliente
 800164c:	89ba      	ldrh	r2, [r7, #12]
 800164e:	2300      	movs	r3, #0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	4915      	ldr	r1, [pc, #84]	@ (80016ac <process_client_connection+0x9c>)
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f007 fd50 	bl	80090fc <netconn_write_partly>
        } while (netbuf_next(netbuf) > 0);
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <process_client_connection+0x94>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f009 fa7f 	bl	800ab64 <netbuf_next>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	dcd6      	bgt.n	800161a <process_client_connection+0xa>

        netbuf_delete(netbuf); // Liberar el buffer después de procesarlo
 800166c:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <process_client_connection+0x94>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f009 fa57 	bl	800ab24 <netbuf_delete>
    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001676:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <process_client_connection+0x94>)
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f007 fcc5 	bl	8009008 <netconn_recv>
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0c7      	beq.n	800161a <process_client_connection+0xa>
    }

    // Cerrar y liberar la conexión del cliente
    netconn_close(client_conn);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f007 fe38 	bl	8009300 <netconn_close>
    netconn_delete(client_conn);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f007 fa15 	bl	8008ac0 <netconn_delete>
    SendString("Desconecto...\r");
 8001696:	4806      	ldr	r0, [pc, #24]	@ (80016b0 <process_client_connection+0xa0>)
 8001698:	f7ff f954 	bl	8000944 <SendString>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000614 	.word	0x20000614
 80016a8:	20000618 	.word	0x20000618
 80016ac:	2000071c 	.word	0x2000071c
 80016b0:	08017608 	.word	0x08017608

080016b4 <initialize_server>:

// Función para inicializar la conexión TCP
static err_t initialize_server() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
    conn = netconn_new(NETCONN_TCP);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2010      	movs	r0, #16
 80016c0:	f007 f960 	bl	8008984 <netconn_new_with_proto_and_callback>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a24      	ldr	r2, [pc, #144]	@ (8001758 <initialize_server+0xa4>)
 80016c8:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <initialize_server+0xa4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <initialize_server+0x2a>
        //printf("Error: No se pudo crear la conexión.\n");
    	SendString("Error: No se pudo crear la conexión.\n");
 80016d2:	4822      	ldr	r0, [pc, #136]	@ (800175c <initialize_server+0xa8>)
 80016d4:	f7ff f936 	bl	8000944 <SendString>
        return ERR_MEM;
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	e038      	b.n	8001750 <initialize_server+0x9c>
    }


    err_t err = netconn_bind(conn, IP_ADDR_ANY, MB_TCP_PORT);
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <initialize_server+0xa4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80016e6:	491e      	ldr	r1, [pc, #120]	@ (8001760 <initialize_server+0xac>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 fa05 	bl	8008af8 <netconn_bind>
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00d      	beq.n	8001716 <initialize_server+0x62>
        //printf("Error: No se pudo enlazar al puerto %d (Error: %d).\n", MB_TCP_PORT, err);
    	SendString("Error: No se pudo enlazar al puerto\n");
 80016fa:	481a      	ldr	r0, [pc, #104]	@ (8001764 <initialize_server+0xb0>)
 80016fc:	f7ff f922 	bl	8000944 <SendString>
        netconn_delete(conn);
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <initialize_server+0xa4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f007 f9db 	bl	8008ac0 <netconn_delete>
        conn = NULL;
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <initialize_server+0xa4>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
        return err;
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	e01c      	b.n	8001750 <initialize_server+0x9c>
    }

    osDelay(1000);
 8001716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800171a:	f004 f96d 	bl	80059f8 <osDelay>
    SendString("Activando Keep-Alive...\r");
 800171e:	4812      	ldr	r0, [pc, #72]	@ (8001768 <initialize_server+0xb4>)
 8001720:	f7ff f910 	bl	8000944 <SendString>


    //netconn_set_keepalive(newconn, 1);
    enable_keepalive(conn);
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <initialize_server+0xa4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f823 	bl	8001774 <enable_keepalive>

    netconn_listen(conn); // Escuchar conexiones entrantes
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <initialize_server+0xa4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	21ff      	movs	r1, #255	@ 0xff
 8001734:	4618      	mov	r0, r3
 8001736:	f007 fa17 	bl	8008b68 <netconn_listen_with_backlog>
    //printf("Servidor TCP escuchando en el puerto %d.\n", MB_TCP_PORT);
    SendString("Servidor TCP escuchando en el puerto: ");
 800173a:	480c      	ldr	r0, [pc, #48]	@ (800176c <initialize_server+0xb8>)
 800173c:	f7ff f902 	bl	8000944 <SendString>
    SendNumber(MB_TCP_PORT);
 8001740:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 8001744:	f7ff f924 	bl	8000990 <SendNumber>
    SendString("\r");
 8001748:	4809      	ldr	r0, [pc, #36]	@ (8001770 <initialize_server+0xbc>)
 800174a:	f7ff f8fb 	bl	8000944 <SendString>
    return ERR_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000060c 	.word	0x2000060c
 800175c:	08017618 	.word	0x08017618
 8001760:	0801ad5c 	.word	0x0801ad5c
 8001764:	08017640 	.word	0x08017640
 8001768:	08017668 	.word	0x08017668
 800176c:	08017684 	.word	0x08017684
 8001770:	080176ac 	.word	0x080176ac

08001774 <enable_keepalive>:

void enable_keepalive(struct netconn *conn) {
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    if (conn != NULL && conn->pcb.tcp != NULL) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01b      	beq.n	80017ba <enable_keepalive+0x46>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d017      	beq.n	80017ba <enable_keepalive+0x46>
        struct tcp_pcb *pcb = conn->pcb.tcp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	60fb      	str	r3, [r7, #12]

        // Activar opción KEEPALIVE
        pcb->so_options |= SOF_KEEPALIVE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	7a5b      	ldrb	r3, [r3, #9]
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	725a      	strb	r2, [r3, #9]

        // Configurar parámetros de Keep-Alive
        pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;     // Tiempo en ms antes del primer paquete
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;   // Intervalo entre intentos en ms
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pcb->keep_cnt = TCP_KEEPCNT_DEFAULT;       // Número máximo de intentos
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2203      	movs	r2, #3
 80017b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001800 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017cc:	f7ff fe80 	bl	80014d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f014 fe3f 	bl	8016478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7fe fee3 	bl	80005c4 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001800:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800180c:	0801ae68 	.word	0x0801ae68
  ldr r2, =_sbss
 8001810:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001814:	2000ede8 	.word	0x2000ede8

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>

0800181a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <LAN8742_RegisterBusIO+0x28>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <LAN8742_RegisterBusIO+0x28>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <LAN8742_RegisterBusIO+0x28>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e014      	b.n	8001872 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d17c      	bne.n	8001998 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2220      	movs	r2, #32
 80018b0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e01c      	b.n	80018f2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f107 0208 	add.w	r2, r7, #8
 80018c0:	2112      	movs	r1, #18
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	4798      	blx	r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da03      	bge.n	80018d4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80018cc:	f06f 0304 	mvn.w	r3, #4
 80018d0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80018d2:	e00b      	b.n	80018ec <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d105      	bne.n	80018ec <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
         break;
 80018ea:	e005      	b.n	80018f8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b1f      	cmp	r3, #31
 80018f6:	d9df      	bls.n	80018b8 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b1f      	cmp	r3, #31
 80018fe:	d902      	bls.n	8001906 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001900:	f06f 0302 	mvn.w	r3, #2
 8001904:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d145      	bne.n	8001998 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6810      	ldr	r0, [r2, #0]
 8001914:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001918:	2100      	movs	r1, #0
 800191a:	4798      	blx	r3
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	db37      	blt.n	8001992 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6810      	ldr	r0, [r2, #0]
 800192a:	f107 0208 	add.w	r2, r7, #8
 800192e:	2100      	movs	r1, #0
 8001930:	4798      	blx	r3
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	db28      	blt.n	800198a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4798      	blx	r3
 800193e:	4603      	mov	r3, r0
 8001940:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001942:	e01c      	b.n	800197e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4798      	blx	r3
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001956:	d80e      	bhi.n	8001976 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6810      	ldr	r0, [r2, #0]
 8001960:	f107 0208 	add.w	r2, r7, #8
 8001964:	2100      	movs	r1, #0
 8001966:	4798      	blx	r3
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	da07      	bge.n	800197e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800196e:	f06f 0304 	mvn.w	r3, #4
 8001972:	613b      	str	r3, [r7, #16]
                 break;
 8001974:	e010      	b.n	8001998 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001976:	f06f 0301 	mvn.w	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
               break;
 800197c:	e00c      	b.n	8001998 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1dd      	bne.n	8001944 <LAN8742_Init+0xc6>
 8001988:	e006      	b.n	8001998 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800198a:	f06f 0304 	mvn.w	r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e002      	b.n	8001998 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001992:	f06f 0303 	mvn.w	r3, #3
 8001996:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d112      	bne.n	80019c4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4798      	blx	r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80019a8:	bf00      	nop
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4798      	blx	r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019bc:	d9f5      	bls.n	80019aa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	605a      	str	r2, [r3, #4]
   }

   return status;
 80019c4:	693b      	ldr	r3, [r7, #16]
 }
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6810      	ldr	r0, [r2, #0]
 80019e2:	f107 020c 	add.w	r2, r7, #12
 80019e6:	2101      	movs	r1, #1
 80019e8:	4798      	blx	r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da02      	bge.n	80019f6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019f0:	f06f 0304 	mvn.w	r3, #4
 80019f4:	e06e      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6810      	ldr	r0, [r2, #0]
 80019fe:	f107 020c 	add.w	r2, r7, #12
 8001a02:	2101      	movs	r1, #1
 8001a04:	4798      	blx	r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da02      	bge.n	8001a12 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a0c:	f06f 0304 	mvn.w	r3, #4
 8001a10:	e060      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e059      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6810      	ldr	r0, [r2, #0]
 8001a28:	f107 020c 	add.w	r2, r7, #12
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4798      	blx	r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da02      	bge.n	8001a3c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a36:	f06f 0304 	mvn.w	r3, #4
 8001a3a:	e04b      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11b      	bne.n	8001a7e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <LAN8742_GetLinkState+0x90>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e03a      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e033      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a76:	2304      	movs	r3, #4
 8001a78:	e02c      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e02a      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6810      	ldr	r0, [r2, #0]
 8001a86:	f107 020c 	add.w	r2, r7, #12
 8001a8a:	211f      	movs	r1, #31
 8001a8c:	4798      	blx	r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da02      	bge.n	8001a9a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a94:	f06f 0304 	mvn.w	r3, #4
 8001a98:	e01c      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001aa4:	2306      	movs	r3, #6
 8001aa6:	e015      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 031c 	and.w	r3, r3, #28
 8001aae:	2b18      	cmp	r3, #24
 8001ab0:	d101      	bne.n	8001ab6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e00e      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f003 031c 	and.w	r3, r3, #28
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d101      	bne.n	8001ac4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e007      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 031c 	and.w	r3, r3, #28
 8001aca:	2b14      	cmp	r3, #20
 8001acc:	d101      	bne.n	8001ad2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e000      	b.n	8001ad4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ad2:	2305      	movs	r3, #5
    }
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f8fc 	bl	8001d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f7ff fb6a 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff faf4 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000108 	.word	0x20000108
 8001b44:	20000820 	.word	0x20000820

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000820 	.word	0x20000820

08001b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ffee 	bl	8001b48 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000108 	.word	0x20000108

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	@ (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	@ (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	@ (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff4c 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2a:	f7ff ff61 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	6978      	ldr	r0, [r7, #20]
 8001d36:	f7ff ffb1 	bl	8001c9c <NVIC_EncodePriority>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff80 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff54 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06c      	b.n	8001e58 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2223      	movs	r2, #35	@ 0x23
 8001d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f003 fb7f 	bl	8005494 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_ETH_Init+0xf4>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	4a30      	ldr	r2, [pc, #192]	@ (8001e60 <HAL_ETH_Init+0xf4>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e60 <HAL_ETH_Init+0xf4>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_ETH_Init+0xf8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a2b      	ldr	r2, [pc, #172]	@ (8001e64 <HAL_ETH_Init+0xf8>)
 8001db8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dbc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_ETH_Init+0xf8>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4927      	ldr	r1, [pc, #156]	@ (8001e64 <HAL_ETH_Init+0xf8>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_ETH_Init+0xf8>)
 8001dce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001de6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff feae 	bl	8001b48 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dee:	e011      	b.n	8001e14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001df0:	f7ff feaa 	bl	8001b48 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dfe:	d909      	bls.n	8001e14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	22e0      	movs	r2, #224	@ 0xe0
 8001e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e021      	b.n	8001e58 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e4      	bne.n	8001df0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 ff56 	bl	8002cd8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fffd 	bl	8002e2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f001 f853 	bl	8002ede <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2100      	movs	r1, #0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 ffbb 	bl	8002dbc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2210      	movs	r2, #16
 8001e52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800

08001e68 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d17f      	bne.n	8001f7a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2223      	movs	r2, #35	@ 0x23
 8001e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001e96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001eac:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ec0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9f8 	bl	80022c0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0208 	orr.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff fe39 	bl	8001b60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0204 	orr.w	r2, r2, #4
 8001f04:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff fe26 	bl	8001b60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fd7c 	bl	8002a1a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f38:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f50:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001f64:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001f68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f6c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2223      	movs	r2, #35	@ 0x23
 8001f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f92:	2b23      	cmp	r3, #35	@ 0x23
 8001f94:	d170      	bne.n	8002078 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2223      	movs	r2, #35	@ 0x23
 8001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001fb0:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001fb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fb8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fd0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	f023 0302 	bic.w	r3, r3, #2
 8001fe4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fe8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0204 	bic.w	r2, r2, #4
 8001ff8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fdac 	bl	8001b60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fd02 	bl	8002a1a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0208 	bic.w	r2, r2, #8
 8002024:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff fd96 	bl	8001b60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e00e      	b.n	8002060 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	3212      	adds	r2, #18
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d9ed      	bls.n	8002042 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2210      	movs	r2, #16
 8002070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e045      	b.n	8002132 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020ac:	2b23      	cmp	r3, #35	@ 0x23
 80020ae:	d13f      	bne.n	8002130 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80020b8:	2201      	movs	r2, #1
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 ff7b 	bl	8002fb8 <ETH_Prepare_Tx_Descriptors>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	f043 0202 	orr.w	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e02a      	b.n	8002132 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80020dc:	f3bf 8f4f 	dsb	sy
}
 80020e0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d904      	bls.n	80020fe <HAL_ETH_Transmit_IT+0x7c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	1f1a      	subs	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002118:	461a      	mov	r2, r3
 800211a:	2304      	movs	r3, #4
 800211c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002126:	461a      	mov	r2, r3
 8002128:	2300      	movs	r3, #0
 800212a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b088      	sub	sp, #32
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0a8      	b.n	80022b8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800216c:	2b23      	cmp	r3, #35	@ 0x23
 800216e:	d001      	beq.n	8002174 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0a1      	b.n	80022b8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	3212      	adds	r2, #18
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218a:	f1c3 0304 	rsb	r3, r3, #4
 800218e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002190:	e06a      	b.n	8002268 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_ETH_ReadData+0x88>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d040      	beq.n	8002244 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00c      	beq.n	8002206 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80021f6:	3b04      	subs	r3, #4
 80021f8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800221e:	461a      	mov	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	b29b      	uxth	r3, r3
 8002224:	f003 fb10 	bl	8005848 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d902      	bls.n	8002256 <HAL_ETH_ReadData+0x11c>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3b04      	subs	r3, #4
 8002254:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	3212      	adds	r2, #18
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800226c:	2b00      	cmp	r3, #0
 800226e:	db06      	blt.n	800227e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	429a      	cmp	r2, r3
 8002276:	d202      	bcs.n	800227e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d089      	beq.n	8002192 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f814 	bl	80022c0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d108      	bne.n	80022b6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80022cc:	2301      	movs	r3, #1
 80022ce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022d4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	3212      	adds	r2, #18
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80022e8:	e03d      	b.n	8002366 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fa76 	bl	80057e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	74fb      	strb	r3, [r7, #19]
 8002306:	e007      	b.n	8002318 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	461a      	mov	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	461a      	mov	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d023      	beq.n	8002366 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	4a24      	ldr	r2, [pc, #144]	@ (80023bc <ETH_UpdateDescriptor+0xfc>)
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	e003      	b.n	8002336 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002334:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d902      	bls.n	8002354 <ETH_UpdateDescriptor+0x94>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b04      	subs	r3, #4
 8002352:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	3212      	adds	r2, #18
 800235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235e:	617b      	str	r3, [r7, #20]
      desccount--;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	3b01      	subs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <ETH_UpdateDescriptor+0xb2>
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1bb      	bne.n	80022ea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	429a      	cmp	r2, r3
 800237a:	d01a      	beq.n	80023b2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002386:	f3bf 8f5f 	dmb	sy
}
 800238a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6919      	ldr	r1, [r3, #16]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	18ca      	adds	r2, r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80023b2:	bf00      	nop
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	80004600 	.word	0x80004600

080023c0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3318      	adds	r3, #24
 80023cc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80023de:	e03f      	b.n	8002460 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3304      	adds	r3, #4
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d028      	beq.n	8002460 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68d9      	ldr	r1, [r3, #12]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db1b      	blt.n	800245c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	3304      	adds	r3, #4
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fa49 	bl	80058c8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	3304      	adds	r3, #4
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	3301      	adds	r3, #1
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	62da      	str	r2, [r3, #44]	@ 0x2c
 800245a:	e001      	b.n	8002460 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_ETH_ReleaseTxPacket+0xac>
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1b9      	bne.n	80023e0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	2b40      	cmp	r3, #64	@ 0x40
 8002490:	d112      	bne.n	80024b8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a0:	2b40      	cmp	r3, #64	@ 0x40
 80024a2:	d109      	bne.n	80024b8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b50      	ldr	r3, [pc, #320]	@ (80025f0 <HAL_ETH_IRQHandler+0x178>)
 80024b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f002 fd36 	bl	8004f24 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d113      	bne.n	80024f2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d10a      	bne.n	80024f2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e4:	461a      	mov	r2, r3
 80024e6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80024ea:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f002 fd29 	bl	8004f44 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002504:	d14c      	bne.n	80025a0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002518:	d142      	bne.n	80025a0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002520:	f043 0208 	orr.w	r2, r3, #8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253c:	d11a      	bne.n	8002574 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_ETH_IRQHandler+0x17c>)
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002564:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002568:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	22e0      	movs	r2, #224	@ 0xe0
 800256e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002572:	e012      	b.n	800259a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002592:	461a      	mov	r2, r3
 8002594:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002598:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f002 fce2 	bl	8004f64 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d10e      	bne.n	80025cc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f81c 	bl	80025fc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80025cc:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_ETH_IRQHandler+0x180>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025d8:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <HAL_ETH_IRQHandler+0x180>)
 80025da:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025de:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f815 	bl	8002610 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	00010040 	.word	0x00010040
 80025f4:	007e2000 	.word	0x007e2000
 80025f8:	40013c00 	.word	0x40013c00

080025fc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 031c 	and.w	r3, r3, #28
 8002640:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	02db      	lsls	r3, r3, #11
 8002646:	b29b      	uxth	r3, r3
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 0302 	bic.w	r3, r3, #2
 8002662:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002674:	f7ff fa68 	bl	8001b48 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800267a:	e00d      	b.n	8002698 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800267c:	f7ff fa64 	bl	8001b48 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268a:	d301      	bcc.n	8002690 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e010      	b.n	80026b2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ec      	bne.n	800267c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 031c 	and.w	r3, r3, #28
 80026d6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	02db      	lsls	r3, r3, #11
 80026dc:	b29b      	uxth	r3, r3
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	019b      	lsls	r3, r3, #6
 80026e8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002714:	f7ff fa18 	bl	8001b48 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800271a:	e00d      	b.n	8002738 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800271c:	f7ff fa14 	bl	8001b48 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272a:	d301      	bcc.n	8002730 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e009      	b.n	8002744 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ec      	bne.n	800271c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d9      	b.n	8002914 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e00b      	b.n	800294c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800293a:	2b10      	cmp	r3, #16
 800293c:	d105      	bne.n	800294a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f88f 	bl	8002a64 <ETH_SetMACConfig>

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 031c 	bic.w	r3, r3, #28
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800296c:	f001 fa84 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8002970:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4a1d      	ldr	r2, [pc, #116]	@ (80029ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d908      	bls.n	800298c <HAL_ETH_SetMDIOClockRange+0x38>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d804      	bhi.n	800298c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e027      	b.n	80029dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d908      	bls.n	80029a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4a17      	ldr	r2, [pc, #92]	@ (80029f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d204      	bcs.n	80029a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f043 030c 	orr.w	r3, r3, #12
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e01a      	b.n	80029dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d303      	bcc.n	80029b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d911      	bls.n	80029da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4a0f      	ldr	r2, [pc, #60]	@ (80029f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d908      	bls.n	80029d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4a0e      	ldr	r2, [pc, #56]	@ (80029fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d804      	bhi.n	80029d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e005      	b.n	80029dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f043 0310 	orr.w	r3, r3, #16
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e000      	b.n	80029dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80029da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	611a      	str	r2, [r3, #16]
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	01312cff 	.word	0x01312cff
 80029f0:	02160ebf 	.word	0x02160ebf
 80029f4:	03938700 	.word	0x03938700
 80029f8:	05f5e0ff 	.word	0x05f5e0ff
 80029fc:	08f0d17f 	.word	0x08f0d17f

08002a00 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7ff f888 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a5a:	6193      	str	r3, [r2, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4b51      	ldr	r3, [pc, #324]	@ (8002bc0 <ETH_SetMACConfig+0x15c>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7c1b      	ldrb	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <ETH_SetMACConfig+0x28>
 8002a86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a8a:	e000      	b.n	8002a8e <ETH_SetMACConfig+0x2a>
 8002a8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <ETH_SetMACConfig+0x38>
 8002a96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a9a:	e000      	b.n	8002a9e <ETH_SetMACConfig+0x3a>
 8002a9c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002aa4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7fdb      	ldrb	r3, [r3, #31]
 8002aaa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002aac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	7f92      	ldrb	r2, [r2, #30]
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d102      	bne.n	8002ac2 <ETH_SetMACConfig+0x5e>
 8002abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac0:	e000      	b.n	8002ac4 <ETH_SetMACConfig+0x60>
 8002ac2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ac4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	7f1b      	ldrb	r3, [r3, #28]
 8002aca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002acc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ad2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	791b      	ldrb	r3, [r3, #4]
 8002ad8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ada:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ae2:	2a00      	cmp	r2, #0
 8002ae4:	d102      	bne.n	8002aec <ETH_SetMACConfig+0x88>
 8002ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aea:	e000      	b.n	8002aee <ETH_SetMACConfig+0x8a>
 8002aec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002aee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	7bdb      	ldrb	r3, [r3, #15]
 8002af4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002af6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002afc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b06:	4313      	orrs	r3, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7ff f81e 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	d101      	bne.n	8002b52 <ETH_SetMACConfig+0xee>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	e000      	b.n	8002b54 <ETH_SetMACConfig+0xf0>
 8002b52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002b62:	2a01      	cmp	r2, #1
 8002b64:	d101      	bne.n	8002b6a <ETH_SetMACConfig+0x106>
 8002b66:	2208      	movs	r2, #8
 8002b68:	e000      	b.n	8002b6c <ETH_SetMACConfig+0x108>
 8002b6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b74:	2a01      	cmp	r2, #1
 8002b76:	d101      	bne.n	8002b7c <ETH_SetMACConfig+0x118>
 8002b78:	2204      	movs	r2, #4
 8002b7a:	e000      	b.n	8002b7e <ETH_SetMACConfig+0x11a>
 8002b7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002b86:	2a01      	cmp	r2, #1
 8002b88:	d101      	bne.n	8002b8e <ETH_SetMACConfig+0x12a>
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	e000      	b.n	8002b90 <ETH_SetMACConfig+0x12c>
 8002b8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b90:	4313      	orrs	r3, r2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7fe ffd9 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	619a      	str	r2, [r3, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	ff20810f 	.word	0xff20810f

08002bc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <ETH_SetDMAConfig+0x110>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7b1b      	ldrb	r3, [r3, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <ETH_SetDMAConfig+0x2c>
 8002bea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bee:	e000      	b.n	8002bf2 <ETH_SetDMAConfig+0x2e>
 8002bf0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7b5b      	ldrb	r3, [r3, #13]
 8002bf6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bf8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	7f52      	ldrb	r2, [r2, #29]
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d102      	bne.n	8002c08 <ETH_SetDMAConfig+0x44>
 8002c02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c06:	e000      	b.n	8002c0a <ETH_SetDMAConfig+0x46>
 8002c08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	7b9b      	ldrb	r3, [r3, #14]
 8002c10:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c12:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	7f1b      	ldrb	r3, [r3, #28]
 8002c1e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	7f9b      	ldrb	r3, [r3, #30]
 8002c26:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c28:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c36:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fe ff80 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c78:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c7e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c84:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c8c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c8e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c96:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c9c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ca6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002caa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7fe ff51 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	f8de3f23 	.word	0xf8de3f23

08002cd8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b0a6      	sub	sp, #152	@ 0x98
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d14:	2300      	movs	r3, #0
 8002d16:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe86 	bl	8002a64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d8c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d92:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ff08 	bl	8002bc4 <ETH_SetDMAConfig>
}
 8002db4:	bf00      	nop
 8002db6:	3798      	adds	r7, #152	@ 0x98
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3305      	adds	r3, #5
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	3204      	adds	r2, #4
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <ETH_MACAddressConfig+0x68>)
 8002dde:	4413      	add	r3, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3303      	adds	r3, #3
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	061a      	lsls	r2, r3, #24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3302      	adds	r3, #2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	4313      	orrs	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <ETH_MACAddressConfig+0x6c>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6013      	str	r3, [r2, #0]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40028040 	.word	0x40028040
 8002e28:	40028044 	.word	0x40028044

08002e2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e03e      	b.n	8002eb8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68d9      	ldr	r1, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	3206      	adds	r2, #6
 8002e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d80c      	bhi.n	8002e9c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68d9      	ldr	r1, [r3, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e004      	b.n	8002ea6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d9bd      	bls.n	8002e3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed0:	611a      	str	r2, [r3, #16]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e046      	b.n	8002f7a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6919      	ldr	r1, [r3, #16]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f28:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002f30:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	3212      	adds	r2, #18
 8002f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d80c      	bhi.n	8002f6a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6919      	ldr	r1, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	e004      	b.n	8002f74 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3301      	adds	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d9b5      	bls.n	8002eec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b08d      	sub	sp, #52	@ 0x34
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ffa:	d007      	beq.n	800300c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003000:	3304      	adds	r3, #4
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800300c:	2302      	movs	r3, #2
 800300e:	e103      	b.n	8003218 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	3301      	adds	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003028:	f023 031f 	bic.w	r3, r3, #31
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	6852      	ldr	r2, [r2, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003096:	f3bf 8f5f 	dmb	sy
}
 800309a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80030a8:	e084      	b.n	80031b4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e005      	b.n	80030d6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80030d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d8:	3301      	adds	r3, #1
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d902      	bls.n	80030e8 <ETH_Prepare_Tx_Descriptors+0x130>
 80030e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e4:	3b04      	subs	r3, #4
 80030e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800310a:	d007      	beq.n	800311c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	3304      	adds	r3, #4
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d029      	beq.n	8003170 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800312e:	e019      	b.n	8003164 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003130:	f3bf 8f5f 	dmb	sy
}
 8003134:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003144:	3301      	adds	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314a:	2b03      	cmp	r3, #3
 800314c:	d902      	bls.n	8003154 <ETH_Prepare_Tx_Descriptors+0x19c>
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	3b04      	subs	r3, #4
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	3301      	adds	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	429a      	cmp	r2, r3
 800316a:	d3e1      	bcc.n	8003130 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800316c:	2302      	movs	r3, #2
 800316e:	e053      	b.n	8003218 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	3301      	adds	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800318e:	f023 031f 	bic.w	r3, r3, #31
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	6852      	ldr	r2, [r2, #4]
 8003196:	431a      	orrs	r2, r3
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	3301      	adds	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80031a2:	f3bf 8f5f 	dmb	sy
}
 80031a6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af76 	bne.w	80030aa <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e005      	b.n	80031de <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f2:	3304      	adds	r3, #4
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031fe:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003212:	b662      	cpsie	i
}
 8003214:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3734      	adds	r7, #52	@ 0x34
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e177      	b.n	8003530 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003240:	2201      	movs	r2, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 8166 	bne.w	800352a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d005      	beq.n	8003276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003272:	2b02      	cmp	r3, #2
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d017      	beq.n	8003314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d123      	bne.n	8003368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	08da      	lsrs	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3208      	adds	r2, #8
 8003328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80c0 	beq.w	800352a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b66      	ldr	r3, [pc, #408]	@ (8003548 <HAL_GPIO_Init+0x324>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	4a65      	ldr	r2, [pc, #404]	@ (8003548 <HAL_GPIO_Init+0x324>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ba:	4b63      	ldr	r3, [pc, #396]	@ (8003548 <HAL_GPIO_Init+0x324>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c6:	4a61      	ldr	r2, [pc, #388]	@ (800354c <HAL_GPIO_Init+0x328>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a58      	ldr	r2, [pc, #352]	@ (8003550 <HAL_GPIO_Init+0x32c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d037      	beq.n	8003462 <HAL_GPIO_Init+0x23e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <HAL_GPIO_Init+0x330>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_GPIO_Init+0x23a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <HAL_GPIO_Init+0x334>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02b      	beq.n	800345a <HAL_GPIO_Init+0x236>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a55      	ldr	r2, [pc, #340]	@ (800355c <HAL_GPIO_Init+0x338>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d025      	beq.n	8003456 <HAL_GPIO_Init+0x232>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a54      	ldr	r2, [pc, #336]	@ (8003560 <HAL_GPIO_Init+0x33c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <HAL_GPIO_Init+0x22e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a53      	ldr	r2, [pc, #332]	@ (8003564 <HAL_GPIO_Init+0x340>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d019      	beq.n	800344e <HAL_GPIO_Init+0x22a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a52      	ldr	r2, [pc, #328]	@ (8003568 <HAL_GPIO_Init+0x344>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0x226>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a51      	ldr	r2, [pc, #324]	@ (800356c <HAL_GPIO_Init+0x348>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_Init+0x222>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a50      	ldr	r2, [pc, #320]	@ (8003570 <HAL_GPIO_Init+0x34c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_Init+0x21e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4f      	ldr	r2, [pc, #316]	@ (8003574 <HAL_GPIO_Init+0x350>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_Init+0x21a>
 800343a:	2309      	movs	r3, #9
 800343c:	e012      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800343e:	230a      	movs	r3, #10
 8003440:	e010      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003442:	2308      	movs	r3, #8
 8003444:	e00e      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003446:	2307      	movs	r3, #7
 8003448:	e00c      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800344a:	2306      	movs	r3, #6
 800344c:	e00a      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800344e:	2305      	movs	r3, #5
 8003450:	e008      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003452:	2304      	movs	r3, #4
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003456:	2303      	movs	r3, #3
 8003458:	e004      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800345a:	2302      	movs	r3, #2
 800345c:	e002      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003462:	2300      	movs	r3, #0
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f002 0203 	and.w	r2, r2, #3
 800346a:	0092      	lsls	r2, r2, #2
 800346c:	4093      	lsls	r3, r2
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003474:	4935      	ldr	r1, [pc, #212]	@ (800354c <HAL_GPIO_Init+0x328>)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003482:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <HAL_GPIO_Init+0x354>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034a6:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d0:	4a29      	ldr	r2, [pc, #164]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034d6:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_GPIO_Init+0x354>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003524:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <HAL_GPIO_Init+0x354>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	f67f ae84 	bls.w	8003240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800
 8003550:	40020000 	.word	0x40020000
 8003554:	40020400 	.word	0x40020400
 8003558:	40020800 	.word	0x40020800
 800355c:	40020c00 	.word	0x40020c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40021400 	.word	0x40021400
 8003568:	40021800 	.word	0x40021800
 800356c:	40021c00 	.word	0x40021c00
 8003570:	40022000 	.word	0x40022000
 8003574:	40022400 	.word	0x40022400
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003598:	e003      	b.n	80035a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e267      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d075      	beq.n	80036ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ce:	4b88      	ldr	r3, [pc, #544]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d00c      	beq.n	80035f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035da:	4b85      	ldr	r3, [pc, #532]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d112      	bne.n	800360c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e6:	4b82      	ldr	r3, [pc, #520]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f2:	d10b      	bne.n	800360c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	4b7e      	ldr	r3, [pc, #504]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05b      	beq.n	80036b8 <HAL_RCC_OscConfig+0x108>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d157      	bne.n	80036b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e242      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x74>
 8003616:	4b76      	ldr	r3, [pc, #472]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a75      	ldr	r2, [pc, #468]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xb0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x98>
 800362e:	4b70      	ldr	r3, [pc, #448]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6f      	ldr	r2, [pc, #444]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b6d      	ldr	r3, [pc, #436]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6c      	ldr	r2, [pc, #432]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xb0>
 8003648:	4b69      	ldr	r3, [pc, #420]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a68      	ldr	r2, [pc, #416]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b66      	ldr	r3, [pc, #408]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a65      	ldr	r2, [pc, #404]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fa6e 	bl	8001b48 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fa6a 	bl	8001b48 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e207      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b5b      	ldr	r3, [pc, #364]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xc0>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe fa5a 	bl	8001b48 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe fa56 	bl	8001b48 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1f3      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	4b51      	ldr	r3, [pc, #324]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0xe8>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d063      	beq.n	800378e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c6:	4b4a      	ldr	r3, [pc, #296]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d2:	4b47      	ldr	r3, [pc, #284]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d11c      	bne.n	8003718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036de:	4b44      	ldr	r3, [pc, #272]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	4b41      	ldr	r3, [pc, #260]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_RCC_OscConfig+0x152>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e1c7      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003702:	4b3b      	ldr	r3, [pc, #236]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4937      	ldr	r1, [pc, #220]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003716:	e03a      	b.n	800378e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003720:	4b34      	ldr	r3, [pc, #208]	@ (80037f4 <HAL_RCC_OscConfig+0x244>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7fe fa0f 	bl	8001b48 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372e:	f7fe fa0b 	bl	8001b48 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e1a8      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	4b28      	ldr	r3, [pc, #160]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4925      	ldr	r1, [pc, #148]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
 8003760:	e015      	b.n	800378e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <HAL_RCC_OscConfig+0x244>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe f9ee 	bl	8001b48 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe f9ea 	bl	8001b48 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e187      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d036      	beq.n	8003808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <HAL_RCC_OscConfig+0x248>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fe f9ce 	bl	8001b48 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe f9ca 	bl	8001b48 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e167      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <HAL_RCC_OscConfig+0x240>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x200>
 80037ce:	e01b      	b.n	8003808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_OscConfig+0x248>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fe f9b7 	bl	8001b48 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037dc:	e00e      	b.n	80037fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037de:	f7fe f9b3 	bl	8001b48 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d907      	bls.n	80037fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e150      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470000 	.word	0x42470000
 80037f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	4b88      	ldr	r3, [pc, #544]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ea      	bne.n	80037de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8097 	beq.w	8003944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381a:	4b81      	ldr	r3, [pc, #516]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003834:	6413      	str	r3, [r2, #64]	@ 0x40
 8003836:	4b7a      	ldr	r3, [pc, #488]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	4b77      	ldr	r3, [pc, #476]	@ (8003a24 <HAL_RCC_OscConfig+0x474>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d118      	bne.n	8003884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003852:	4b74      	ldr	r3, [pc, #464]	@ (8003a24 <HAL_RCC_OscConfig+0x474>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a73      	ldr	r2, [pc, #460]	@ (8003a24 <HAL_RCC_OscConfig+0x474>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fe f973 	bl	8001b48 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fe f96f 	bl	8001b48 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e10c      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b6a      	ldr	r3, [pc, #424]	@ (8003a24 <HAL_RCC_OscConfig+0x474>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x2ea>
 800388c:	4b64      	ldr	r3, [pc, #400]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003890:	4a63      	ldr	r2, [pc, #396]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	@ 0x70
 8003898:	e01c      	b.n	80038d4 <HAL_RCC_OscConfig+0x324>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x30c>
 80038a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0x324>
 80038bc:	4b58      	ldr	r3, [pc, #352]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c0:	4a57      	ldr	r2, [pc, #348]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c8:	4b55      	ldr	r3, [pc, #340]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	4a54      	ldr	r2, [pc, #336]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d015      	beq.n	8003908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe f934 	bl	8001b48 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fe f930 	bl	8001b48 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0cb      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fa:	4b49      	ldr	r3, [pc, #292]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0ee      	beq.n	80038e4 <HAL_RCC_OscConfig+0x334>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fe f91e 	bl	8001b48 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fe f91a 	bl	8001b48 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0b5      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003926:	4b3e      	ldr	r3, [pc, #248]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ee      	bne.n	8003910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003938:	4b39      	ldr	r3, [pc, #228]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	4a38      	ldr	r2, [pc, #224]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a1 	beq.w	8003a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800394e:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d05c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d141      	bne.n	80039e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe f8ee 	bl	8001b48 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe f8ea 	bl	8001b48 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e087      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b27      	ldr	r3, [pc, #156]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	019b      	lsls	r3, r3, #6
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	491b      	ldr	r1, [pc, #108]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a28 <HAL_RCC_OscConfig+0x478>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe f8c3 	bl	8001b48 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe f8bf 	bl	8001b48 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e05c      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d8:	4b11      	ldr	r3, [pc, #68]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x416>
 80039e4:	e054      	b.n	8003a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e6:	4b10      	ldr	r3, [pc, #64]	@ (8003a28 <HAL_RCC_OscConfig+0x478>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe f8ac 	bl	8001b48 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe f8a8 	bl	8001b48 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e045      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x444>
 8003a12:	e03d      	b.n	8003a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e038      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40007000 	.word	0x40007000
 8003a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a9c <HAL_RCC_OscConfig+0x4ec>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d028      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d121      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d11a      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	3b01      	subs	r3, #1
 8003a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0cc      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b68      	ldr	r3, [pc, #416]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d90c      	bls.n	8003adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b65      	ldr	r3, [pc, #404]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b63      	ldr	r3, [pc, #396]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b8      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af4:	4b59      	ldr	r3, [pc, #356]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a58      	ldr	r2, [pc, #352]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b0c:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a52      	ldr	r2, [pc, #328]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b50      	ldr	r3, [pc, #320]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	494d      	ldr	r1, [pc, #308]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d044      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d119      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e07f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e06f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e067      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b37      	ldr	r3, [pc, #220]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4934      	ldr	r1, [pc, #208]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b90:	f7fd ffda 	bl	8001b48 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fd ffd6 	bl	8001b48 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b2b      	ldr	r3, [pc, #172]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b25      	ldr	r3, [pc, #148]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d20c      	bcs.n	8003be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e032      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4916      	ldr	r1, [pc, #88]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	490e      	ldr	r1, [pc, #56]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c26:	f000 f821 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	490a      	ldr	r1, [pc, #40]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	5ccb      	ldrb	r3, [r1, r3]
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	4a09      	ldr	r2, [pc, #36]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c42:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd facc 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023c00 	.word	0x40023c00
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	0801ac24 	.word	0x0801ac24
 8003c64:	20000100 	.word	0x20000100
 8003c68:	20000104 	.word	0x20000104

08003c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c70:	b094      	sub	sp, #80	@ 0x50
 8003c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c78:	2300      	movs	r3, #0
 8003c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c84:	4b79      	ldr	r3, [pc, #484]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d00d      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x40>
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	f200 80e1 	bhi.w	8003e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c9e:	e0db      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b73      	ldr	r3, [pc, #460]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ca4:	e0db      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca6:	4b73      	ldr	r3, [pc, #460]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003caa:	e0d8      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cac:	4b6f      	ldr	r3, [pc, #444]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d063      	beq.n	8003d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	2200      	movs	r2, #0
 8003cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf0:	0150      	lsls	r0, r2, #5
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	1a51      	subs	r1, r2, r1
 8003cfa:	6139      	str	r1, [r7, #16]
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d10:	4659      	mov	r1, fp
 8003d12:	018b      	lsls	r3, r1, #6
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	018a      	lsls	r2, r1, #6
 8003d1e:	4651      	mov	r1, sl
 8003d20:	ebb2 0801 	subs.w	r8, r2, r1
 8003d24:	4659      	mov	r1, fp
 8003d26:	eb63 0901 	sbc.w	r9, r3, r1
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d3e:	4690      	mov	r8, r2
 8003d40:	4699      	mov	r9, r3
 8003d42:	4623      	mov	r3, r4
 8003d44:	eb18 0303 	adds.w	r3, r8, r3
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	462b      	mov	r3, r5
 8003d4c:	eb49 0303 	adc.w	r3, r9, r3
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d5e:	4629      	mov	r1, r5
 8003d60:	024b      	lsls	r3, r1, #9
 8003d62:	4621      	mov	r1, r4
 8003d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d68:	4621      	mov	r1, r4
 8003d6a:	024a      	lsls	r2, r1, #9
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d72:	2200      	movs	r2, #0
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d7c:	f7fc fa90 	bl	80002a0 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d88:	e058      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8a:	4b38      	ldr	r3, [pc, #224]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	099b      	lsrs	r3, r3, #6
 8003d90:	2200      	movs	r2, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	4611      	mov	r1, r2
 8003d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003da4:	4642      	mov	r2, r8
 8003da6:	464b      	mov	r3, r9
 8003da8:	f04f 0000 	mov.w	r0, #0
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	0159      	lsls	r1, r3, #5
 8003db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db6:	0150      	lsls	r0, r2, #5
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8003de0:	eb63 050b 	sbc.w	r5, r3, fp
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	00eb      	lsls	r3, r5, #3
 8003dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df2:	00e2      	lsls	r2, r4, #3
 8003df4:	4614      	mov	r4, r2
 8003df6:	461d      	mov	r5, r3
 8003df8:	4643      	mov	r3, r8
 8003dfa:	18e3      	adds	r3, r4, r3
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	464b      	mov	r3, r9
 8003e00:	eb45 0303 	adc.w	r3, r5, r3
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e12:	4629      	mov	r1, r5
 8003e14:	028b      	lsls	r3, r1, #10
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	028a      	lsls	r2, r1, #10
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e26:	2200      	movs	r2, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	61fa      	str	r2, [r7, #28]
 8003e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e30:	f7fc fa36 	bl	80002a0 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	3301      	adds	r3, #1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e56:	e002      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3750      	adds	r7, #80	@ 0x50
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	@ (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000100 	.word	0x20000100

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a9b      	lsrs	r3, r3, #10
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4903      	ldr	r1, [pc, #12]	@ (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	0801ac34 	.word	0x0801ac34

08003eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ebc:	f7ff ffdc 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0b5b      	lsrs	r3, r3, #13
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	@ (8003edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	0801ac34 	.word	0x0801ac34

08003ee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	220f      	movs	r2, #15
 8003eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0203 	and.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f22:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <HAL_RCC_GetClockConfig+0x60>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40023c00 	.word	0x40023c00

08003f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e041      	b.n	8003fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f839 	bl	8003fe2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f000 f9c0 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d001      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e04e      	b.n	80040ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a23      	ldr	r2, [pc, #140]	@ (80040bc <HAL_TIM_Base_Start_IT+0xc4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d01d      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	@ (80040d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d111      	bne.n	800409c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d010      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	e007      	b.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40010400 	.word	0x40010400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40001800 	.word	0x40001800

080040d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0202 	mvn.w	r2, #2
 800410c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8d2 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8c4 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8d5 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0204 	mvn.w	r2, #4
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8ac 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f89e 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8af 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0208 	mvn.w	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f886 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f878 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f889 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0210 	mvn.w	r2, #16
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2208      	movs	r2, #8
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f860 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f852 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f863 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0201 	mvn.w	r2, #1
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc fbd6 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f906 	bl	8004474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f834 	bl	80042f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0220 	mvn.w	r2, #32
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8d8 	bl	8004460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a46      	ldr	r2, [pc, #280]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004326:	d00f      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <TIM_Base_SetConfig+0x130>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a42      	ldr	r2, [pc, #264]	@ (800443c <TIM_Base_SetConfig+0x134>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a41      	ldr	r2, [pc, #260]	@ (8004440 <TIM_Base_SetConfig+0x138>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a40      	ldr	r2, [pc, #256]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a35      	ldr	r2, [pc, #212]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004368:	d027      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a32      	ldr	r2, [pc, #200]	@ (8004438 <TIM_Base_SetConfig+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d023      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <TIM_Base_SetConfig+0x134>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a30      	ldr	r2, [pc, #192]	@ (8004440 <TIM_Base_SetConfig+0x138>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d017      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2e      	ldr	r2, [pc, #184]	@ (8004448 <TIM_Base_SetConfig+0x140>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <TIM_Base_SetConfig+0x144>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <TIM_Base_SetConfig+0x148>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <TIM_Base_SetConfig+0x14c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004458 <TIM_Base_SetConfig+0x150>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a29      	ldr	r2, [pc, #164]	@ (800445c <TIM_Base_SetConfig+0x154>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a10      	ldr	r2, [pc, #64]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a12      	ldr	r2, [pc, #72]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f023 0201 	bic.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]
  }
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40001800 	.word	0x40001800
 8004458:	40001c00 	.word	0x40001c00
 800445c:	40002000 	.word	0x40002000

08004460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e042      	b.n	8004520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fe50 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	@ 0x24
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f973 	bl	80047b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	d175      	bne.n	8004634 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Transmit+0x2c>
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e06e      	b.n	8004636 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2221      	movs	r2, #33	@ 0x21
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004566:	f7fd faef 	bl	8001b48 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004580:	d108      	bne.n	8004594 <HAL_UART_Transmit+0x6c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e003      	b.n	800459c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800459c:	e02e      	b.n	80045fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	@ 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f848 	bl	800463e <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e03a      	b.n	8004636 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e007      	b.n	80045ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1cb      	bne.n	800459e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	@ 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f814 	bl	800463e <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	e03b      	b.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d037      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004658:	f7fd fa76 	bl	8001b48 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <UART_WaitOnFlagUntilTimeout+0x30>
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e03a      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d023      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b80      	cmp	r3, #128	@ 0x80
 8004684:	d020      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d01d      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b08      	cmp	r3, #8
 8004698:	d116      	bne.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f81d 	bl	80046f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2208      	movs	r2, #8
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e00f      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d0b4      	beq.n	8004650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b095      	sub	sp, #84	@ 0x54
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004718:	643a      	str	r2, [r7, #64]	@ 0x40
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800471e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	61fb      	str	r3, [r7, #28]
   return(result);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800474c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	2b01      	cmp	r3, #1
 8004766:	d119      	bne.n	800479c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	60bb      	str	r3, [r7, #8]
   return(result);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004788:	61ba      	str	r2, [r7, #24]
 800478a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	613b      	str	r3, [r7, #16]
   return(result);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047aa:	bf00      	nop
 80047ac:	3754      	adds	r7, #84	@ 0x54
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b0c0      	sub	sp, #256	@ 0x100
 80047be:	af00      	add	r7, sp, #0
 80047c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	ea40 0301 	orr.w	r3, r0, r1
 80047e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004810:	f021 010c 	bic.w	r1, r1, #12
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800481e:	430b      	orrs	r3, r1
 8004820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	ea40 0301 	orr.w	r3, r0, r1
 800483e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b8f      	ldr	r3, [pc, #572]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0xa0>
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8d      	ldr	r3, [pc, #564]	@ (8004a88 <UART_SetConfig+0x2d0>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d104      	bne.n	8004862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7ff fb2e 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 800485c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004860:	e003      	b.n	800486a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004862:	f7ff fb15 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8004866:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004874:	f040 810c 	bne.w	8004a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004882:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	1891      	adds	r1, r2, r2
 8004890:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004892:	415b      	adcs	r3, r3
 8004894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800489a:	4621      	mov	r1, r4
 800489c:	eb12 0801 	adds.w	r8, r2, r1
 80048a0:	4629      	mov	r1, r5
 80048a2:	eb43 0901 	adc.w	r9, r3, r1
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ba:	4690      	mov	r8, r2
 80048bc:	4699      	mov	r9, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	eb18 0303 	adds.w	r3, r8, r3
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048c8:	462b      	mov	r3, r5
 80048ca:	eb49 0303 	adc.w	r3, r9, r3
 80048ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048e6:	460b      	mov	r3, r1
 80048e8:	18db      	adds	r3, r3, r3
 80048ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80048ec:	4613      	mov	r3, r2
 80048ee:	eb42 0303 	adc.w	r3, r2, r3
 80048f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048fc:	f7fb fcd0 	bl	80002a0 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <UART_SetConfig+0x2d4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004918:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800491c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004928:	415b      	adcs	r3, r3
 800492a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800492c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004930:	4641      	mov	r1, r8
 8004932:	eb12 0a01 	adds.w	sl, r2, r1
 8004936:	4649      	mov	r1, r9
 8004938:	eb43 0b01 	adc.w	fp, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800494c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004950:	4692      	mov	sl, r2
 8004952:	469b      	mov	fp, r3
 8004954:	4643      	mov	r3, r8
 8004956:	eb1a 0303 	adds.w	r3, sl, r3
 800495a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800495e:	464b      	mov	r3, r9
 8004960:	eb4b 0303 	adc.w	r3, fp, r3
 8004964:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004974:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800497c:	460b      	mov	r3, r1
 800497e:	18db      	adds	r3, r3, r3
 8004980:	643b      	str	r3, [r7, #64]	@ 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	647b      	str	r3, [r7, #68]	@ 0x44
 800498a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800498e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004992:	f7fb fc85 	bl	80002a0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <UART_SetConfig+0x2d4>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	@ 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049b2:	4b36      	ldr	r3, [pc, #216]	@ (8004a8c <UART_SetConfig+0x2d4>)
 80049b4:	fba3 2302 	umull	r2, r3, r3, r2
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049c0:	441c      	add	r4, r3
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049dc:	415b      	adcs	r3, r3
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a18:	464b      	mov	r3, r9
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a4e:	f7fb fc27 	bl	80002a0 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <UART_SetConfig+0x2d4>)
 8004a58:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2164      	movs	r1, #100	@ 0x64
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	@ 0x32
 8004a6a:	4a08      	ldr	r2, [pc, #32]	@ (8004a8c <UART_SetConfig+0x2d4>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4422      	add	r2, r4
 8004a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a80:	e106      	b.n	8004c90 <UART_SetConfig+0x4d8>
 8004a82:	bf00      	nop
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	6239      	str	r1, [r7, #32]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1854      	adds	r4, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb43 0501 	adc.w	r5, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ad8:	464b      	mov	r3, r9
 8004ada:	eb45 0303 	adc.w	r3, r5, r3
 8004ade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004afe:	4629      	mov	r1, r5
 8004b00:	008b      	lsls	r3, r1, #2
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b08:	4621      	mov	r1, r4
 8004b0a:	008a      	lsls	r2, r1, #2
 8004b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b10:	f7fb fbc6 	bl	80002a0 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4b60      	ldr	r3, [pc, #384]	@ (8004c9c <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	011c      	lsls	r4, r3, #4
 8004b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	61b9      	str	r1, [r7, #24]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6139      	str	r1, [r7, #16]
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b78:	464b      	mov	r3, r9
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	008b      	lsls	r3, r1, #2
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	008a      	lsls	r2, r1, #2
 8004baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bae:	f7fb fb77 	bl	80002a0 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4b38      	ldr	r3, [pc, #224]	@ (8004c9c <UART_SetConfig+0x4e4>)
 8004bba:	fba3 2301 	umull	r2, r3, r3, r1
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2264      	movs	r2, #100	@ 0x64
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	1acb      	subs	r3, r1, r3
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	3332      	adds	r3, #50	@ 0x32
 8004bcc:	4a33      	ldr	r2, [pc, #204]	@ (8004c9c <UART_SetConfig+0x4e4>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd8:	441c      	add	r4, r3
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004be2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004be4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	1891      	adds	r1, r2, r2
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	1851      	adds	r1, r2, r1
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	4649      	mov	r1, r9
 8004c00:	414b      	adcs	r3, r1
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c10:	4659      	mov	r1, fp
 8004c12:	00cb      	lsls	r3, r1, #3
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	00ca      	lsls	r2, r1, #3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	4642      	mov	r2, r8
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	eb42 0303 	adc.w	r3, r2, r3
 8004c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c56:	4641      	mov	r1, r8
 8004c58:	008a      	lsls	r2, r1, #2
 8004c5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c5e:	f7fb fb1f 	bl	80002a0 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <UART_SetConfig+0x4e4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	@ 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	@ 0x32
 8004c7a:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <UART_SetConfig+0x4e4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4422      	add	r2, r4
 8004c8e:	609a      	str	r2, [r3, #8]
}
 8004c90:	bf00      	nop
 8004c92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9c:	51eb851f 	.word	0x51eb851f

08004ca0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004ca0:	b5b0      	push	{r4, r5, r7, lr}
 8004ca2:	b08c      	sub	sp, #48	@ 0x30
 8004ca4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004ca8:	22c0      	movs	r2, #192	@ 0xc0
 8004caa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004cac:	4b8d      	ldr	r3, [pc, #564]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004cae:	22a8      	movs	r2, #168	@ 0xa8
 8004cb0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004cb2:	4b8c      	ldr	r3, [pc, #560]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 8004cb8:	4b8a      	ldr	r3, [pc, #552]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004cba:	2282      	movs	r2, #130	@ 0x82
 8004cbc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004cc0:	22ff      	movs	r2, #255	@ 0xff
 8004cc2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004cc4:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004cc6:	22ff      	movs	r2, #255	@ 0xff
 8004cc8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004cca:	4b87      	ldr	r3, [pc, #540]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004ccc:	22ff      	movs	r2, #255	@ 0xff
 8004cce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004cd0:	4b85      	ldr	r3, [pc, #532]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004cd6:	4b85      	ldr	r3, [pc, #532]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004cd8:	22c0      	movs	r2, #192	@ 0xc0
 8004cda:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004cdc:	4b83      	ldr	r3, [pc, #524]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004cde:	22a8      	movs	r2, #168	@ 0xa8
 8004ce0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004ce2:	4b82      	ldr	r3, [pc, #520]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004ce8:	4b80      	ldr	r3, [pc, #512]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f006 f8d5 	bl	800aea0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	061a      	lsls	r2, r3, #24
 8004cfc:	4b79      	ldr	r3, [pc, #484]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	4b77      	ldr	r3, [pc, #476]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	4a75      	ldr	r2, [pc, #468]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d0e:	78d2      	ldrb	r2, [r2, #3]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	061a      	lsls	r2, r3, #24
 8004d14:	4b73      	ldr	r3, [pc, #460]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	0619      	lsls	r1, r3, #24
 8004d1a:	4b72      	ldr	r3, [pc, #456]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	4319      	orrs	r1, r3
 8004d22:	4b70      	ldr	r3, [pc, #448]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d24:	789b      	ldrb	r3, [r3, #2]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	496e      	ldr	r1, [pc, #440]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d2c:	78c9      	ldrb	r1, [r1, #3]
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d36:	431a      	orrs	r2, r3
 8004d38:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	0619      	lsls	r1, r3, #24
 8004d3e:	4b69      	ldr	r3, [pc, #420]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	4319      	orrs	r1, r3
 8004d46:	4b67      	ldr	r3, [pc, #412]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d48:	789b      	ldrb	r3, [r3, #2]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	4965      	ldr	r1, [pc, #404]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d50:	78c9      	ldrb	r1, [r1, #3]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	4b61      	ldr	r3, [pc, #388]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	0619      	lsls	r1, r3, #24
 8004d62:	4b60      	ldr	r3, [pc, #384]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	4319      	orrs	r1, r3
 8004d6a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d6c:	789b      	ldrb	r3, [r3, #2]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	430b      	orrs	r3, r1
 8004d72:	495c      	ldr	r1, [pc, #368]	@ (8004ee4 <MX_LWIP_Init+0x244>)
 8004d74:	78c9      	ldrb	r1, [r1, #3]
 8004d76:	430b      	orrs	r3, r1
 8004d78:	0e1b      	lsrs	r3, r3, #24
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ef0 <MX_LWIP_Init+0x250>)
 8004d7e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d80:	4b59      	ldr	r3, [pc, #356]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	061a      	lsls	r2, r3, #24
 8004d86:	4b58      	ldr	r3, [pc, #352]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	4b56      	ldr	r3, [pc, #344]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004d90:	789b      	ldrb	r3, [r3, #2]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	4a54      	ldr	r2, [pc, #336]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004d98:	78d2      	ldrb	r2, [r2, #3]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	061a      	lsls	r2, r3, #24
 8004d9e:	4b52      	ldr	r3, [pc, #328]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	0619      	lsls	r1, r3, #24
 8004da4:	4b50      	ldr	r3, [pc, #320]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	4319      	orrs	r1, r3
 8004dac:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	430b      	orrs	r3, r1
 8004db4:	494c      	ldr	r1, [pc, #304]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004db6:	78c9      	ldrb	r1, [r1, #3]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	4b49      	ldr	r3, [pc, #292]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	0619      	lsls	r1, r3, #24
 8004dc8:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	4319      	orrs	r1, r3
 8004dd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dd2:	789b      	ldrb	r3, [r3, #2]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	4943      	ldr	r1, [pc, #268]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dda:	78c9      	ldrb	r1, [r1, #3]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004de4:	431a      	orrs	r2, r3
 8004de6:	4b40      	ldr	r3, [pc, #256]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	0619      	lsls	r1, r3, #24
 8004dec:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dee:	785b      	ldrb	r3, [r3, #1]
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	4319      	orrs	r1, r3
 8004df4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004df6:	789b      	ldrb	r3, [r3, #2]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	493a      	ldr	r1, [pc, #232]	@ (8004ee8 <MX_LWIP_Init+0x248>)
 8004dfe:	78c9      	ldrb	r1, [r1, #3]
 8004e00:	430b      	orrs	r3, r1
 8004e02:	0e1b      	lsrs	r3, r3, #24
 8004e04:	4313      	orrs	r3, r2
 8004e06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <MX_LWIP_Init+0x254>)
 8004e08:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e0a:	4b38      	ldr	r3, [pc, #224]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	061a      	lsls	r2, r3, #24
 8004e10:	4b36      	ldr	r3, [pc, #216]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	431a      	orrs	r2, r3
 8004e18:	4b34      	ldr	r3, [pc, #208]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e1a:	789b      	ldrb	r3, [r3, #2]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	4a32      	ldr	r2, [pc, #200]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e22:	78d2      	ldrb	r2, [r2, #3]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	061a      	lsls	r2, r3, #24
 8004e28:	4b30      	ldr	r3, [pc, #192]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	0619      	lsls	r1, r3, #24
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	4319      	orrs	r1, r3
 8004e36:	4b2d      	ldr	r3, [pc, #180]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e38:	789b      	ldrb	r3, [r3, #2]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	492b      	ldr	r1, [pc, #172]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e40:	78c9      	ldrb	r1, [r1, #3]
 8004e42:	430b      	orrs	r3, r1
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	4b27      	ldr	r3, [pc, #156]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	0619      	lsls	r1, r3, #24
 8004e52:	4b26      	ldr	r3, [pc, #152]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	4319      	orrs	r1, r3
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e5c:	789b      	ldrb	r3, [r3, #2]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	430b      	orrs	r3, r1
 8004e62:	4922      	ldr	r1, [pc, #136]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e64:	78c9      	ldrb	r1, [r1, #3]
 8004e66:	430b      	orrs	r3, r1
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	0619      	lsls	r1, r3, #24
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	4319      	orrs	r1, r3
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e80:	789b      	ldrb	r3, [r3, #2]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	430b      	orrs	r3, r1
 8004e86:	4919      	ldr	r1, [pc, #100]	@ (8004eec <MX_LWIP_Init+0x24c>)
 8004e88:	78c9      	ldrb	r1, [r1, #3]
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	0e1b      	lsrs	r3, r3, #24
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	4a19      	ldr	r2, [pc, #100]	@ (8004ef8 <MX_LWIP_Init+0x258>)
 8004e92:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004e94:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <MX_LWIP_Init+0x25c>)
 8004e96:	9302      	str	r3, [sp, #8]
 8004e98:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <MX_LWIP_Init+0x260>)
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <MX_LWIP_Init+0x258>)
 8004ea2:	4a14      	ldr	r2, [pc, #80]	@ (8004ef4 <MX_LWIP_Init+0x254>)
 8004ea4:	4912      	ldr	r1, [pc, #72]	@ (8004ef0 <MX_LWIP_Init+0x250>)
 8004ea6:	4817      	ldr	r0, [pc, #92]	@ (8004f04 <MX_LWIP_Init+0x264>)
 8004ea8:	f006 fdc4 	bl	800ba34 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004eac:	4815      	ldr	r0, [pc, #84]	@ (8004f04 <MX_LWIP_Init+0x264>)
 8004eae:	f006 ff73 	bl	800bd98 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004eb2:	4814      	ldr	r0, [pc, #80]	@ (8004f04 <MX_LWIP_Init+0x264>)
 8004eb4:	f006 ff80 	bl	800bdb8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004eb8:	4913      	ldr	r1, [pc, #76]	@ (8004f08 <MX_LWIP_Init+0x268>)
 8004eba:	4812      	ldr	r0, [pc, #72]	@ (8004f04 <MX_LWIP_Init+0x264>)
 8004ebc:	f007 f87e 	bl	800bfbc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004ec0:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <MX_LWIP_Init+0x26c>)
 8004ec2:	1d3c      	adds	r4, r7, #4
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	490b      	ldr	r1, [pc, #44]	@ (8004f04 <MX_LWIP_Init+0x264>)
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fd42 	bl	8005960 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004edc:	bf00      	nop
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee4:	20000864 	.word	0x20000864
 8004ee8:	20000868 	.word	0x20000868
 8004eec:	2000086c 	.word	0x2000086c
 8004ef0:	20000858 	.word	0x20000858
 8004ef4:	2000085c 	.word	0x2000085c
 8004ef8:	20000860 	.word	0x20000860
 8004efc:	0800adb1 	.word	0x0800adb1
 8004f00:	080053e9 	.word	0x080053e9
 8004f04:	20000824 	.word	0x20000824
 8004f08:	08004f11 	.word	0x08004f11
 8004f0c:	080176b8 	.word	0x080176b8

08004f10 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <HAL_ETH_RxCpltCallback+0x1c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fe91 	bl	8005c58 <osSemaphoreRelease>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000533c 	.word	0x2000533c

08004f44 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <HAL_ETH_TxCpltCallback+0x1c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fe81 	bl	8005c58 <osSemaphoreRelease>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20005340 	.word	0x20005340

08004f64 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fd fd47 	bl	8002a00 <HAL_ETH_GetDMAError>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d104      	bne.n	8004f86 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <HAL_ETH_ErrorCallback+0x2c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fe69 	bl	8005c58 <osSemaphoreRelease>
  }
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000533c 	.word	0x2000533c

08004f94 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004f94:	b5b0      	push	{r4, r5, r7, lr}
 8004f96:	b0ac      	sub	sp, #176	@ 0xb0
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8004fae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004fb2:	2264      	movs	r2, #100	@ 0x64
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f011 f9b9 	bl	801632e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004fbc:	4b90      	ldr	r3, [pc, #576]	@ (8005200 <low_level_init+0x26c>)
 8004fbe:	4a91      	ldr	r2, [pc, #580]	@ (8005204 <low_level_init+0x270>)
 8004fc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8004fce:	23e1      	movs	r3, #225	@ 0xe1
 8004fd0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8004fe6:	4a86      	ldr	r2, [pc, #536]	@ (8005200 <low_level_init+0x26c>)
 8004fe8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004fec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004fee:	4b84      	ldr	r3, [pc, #528]	@ (8005200 <low_level_init+0x26c>)
 8004ff0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ff4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004ff6:	4b82      	ldr	r3, [pc, #520]	@ (8005200 <low_level_init+0x26c>)
 8004ff8:	4a83      	ldr	r2, [pc, #524]	@ (8005208 <low_level_init+0x274>)
 8004ffa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ffc:	4b80      	ldr	r3, [pc, #512]	@ (8005200 <low_level_init+0x26c>)
 8004ffe:	4a83      	ldr	r2, [pc, #524]	@ (800520c <low_level_init+0x278>)
 8005000:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005002:	4b7f      	ldr	r3, [pc, #508]	@ (8005200 <low_level_init+0x26c>)
 8005004:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005008:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800500a:	487d      	ldr	r0, [pc, #500]	@ (8005200 <low_level_init+0x26c>)
 800500c:	f7fc feae 	bl	8001d6c <HAL_ETH_Init>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005016:	2238      	movs	r2, #56	@ 0x38
 8005018:	2100      	movs	r1, #0
 800501a:	487d      	ldr	r0, [pc, #500]	@ (8005210 <low_level_init+0x27c>)
 800501c:	f011 f987 	bl	801632e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005020:	4b7b      	ldr	r3, [pc, #492]	@ (8005210 <low_level_init+0x27c>)
 8005022:	2221      	movs	r2, #33	@ 0x21
 8005024:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005026:	4b7a      	ldr	r3, [pc, #488]	@ (8005210 <low_level_init+0x27c>)
 8005028:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800502c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800502e:	4b78      	ldr	r3, [pc, #480]	@ (8005210 <low_level_init+0x27c>)
 8005030:	2200      	movs	r2, #0
 8005032:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005034:	4877      	ldr	r0, [pc, #476]	@ (8005214 <low_level_init+0x280>)
 8005036:	f006 fbb7 	bl	800b7a8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2206      	movs	r2, #6
 800503e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005042:	4b6f      	ldr	r3, [pc, #444]	@ (8005200 <low_level_init+0x26c>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800504e:	4b6c      	ldr	r3, [pc, #432]	@ (8005200 <low_level_init+0x26c>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	785a      	ldrb	r2, [r3, #1]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800505a:	4b69      	ldr	r3, [pc, #420]	@ (8005200 <low_level_init+0x26c>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	789a      	ldrb	r2, [r3, #2]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005066:	4b66      	ldr	r3, [pc, #408]	@ (8005200 <low_level_init+0x26c>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	78da      	ldrb	r2, [r3, #3]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005072:	4b63      	ldr	r3, [pc, #396]	@ (8005200 <low_level_init+0x26c>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	791a      	ldrb	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800507e:	4b60      	ldr	r3, [pc, #384]	@ (8005200 <low_level_init+0x26c>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	795a      	ldrb	r2, [r3, #5]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005090:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005098:	f043 030a 	orr.w	r3, r3, #10
 800509c:	b2da      	uxtb	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80050a4:	2300      	movs	r3, #0
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a8:	2300      	movs	r3, #0
 80050aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80050ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fd50 	bl	8005b58 <osSemaphoreCreate>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4a57      	ldr	r2, [pc, #348]	@ (8005218 <low_level_init+0x284>)
 80050bc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c2:	2300      	movs	r3, #0
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80050c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ca:	2101      	movs	r1, #1
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fd43 	bl	8005b58 <osSemaphoreCreate>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a51      	ldr	r2, [pc, #324]	@ (800521c <low_level_init+0x288>)
 80050d6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80050d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005218 <low_level_init+0x284>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fd6c 	bl	8005bbc <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80050e4:	4b4d      	ldr	r3, [pc, #308]	@ (800521c <low_level_init+0x288>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd66 	bl	8005bbc <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80050f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005220 <low_level_init+0x28c>)
 80050f2:	f107 0408 	add.w	r4, r7, #8
 80050f6:	461d      	mov	r5, r3
 80050f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fc28 	bl	8005960 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005110:	4944      	ldr	r1, [pc, #272]	@ (8005224 <low_level_init+0x290>)
 8005112:	4845      	ldr	r0, [pc, #276]	@ (8005228 <low_level_init+0x294>)
 8005114:	f7fc fb81 	bl	800181a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005118:	4843      	ldr	r0, [pc, #268]	@ (8005228 <low_level_init+0x294>)
 800511a:	f7fc fbb0 	bl	800187e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800511e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005122:	2b00      	cmp	r3, #0
 8005124:	d165      	bne.n	80051f2 <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005126:	4840      	ldr	r0, [pc, #256]	@ (8005228 <low_level_init+0x294>)
 8005128:	f7fc fc51 	bl	80019ce <LAN8742_GetLinkState>
 800512c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005134:	2b01      	cmp	r3, #1
 8005136:	dc06      	bgt.n	8005146 <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f006 ff0f 	bl	800bf5c <netif_set_link_down>
      netif_set_down(netif);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f006 fea6 	bl	800be90 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005144:	e057      	b.n	80051f6 <low_level_init+0x262>
      switch (PHYLinkState)
 8005146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800514a:	3b02      	subs	r3, #2
 800514c:	2b03      	cmp	r3, #3
 800514e:	d82b      	bhi.n	80051a8 <low_level_init+0x214>
 8005150:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <low_level_init+0x1c4>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005169 	.word	0x08005169
 800515c:	0800517b 	.word	0x0800517b
 8005160:	0800518b 	.word	0x0800518b
 8005164:	0800519b 	.word	0x0800519b
        duplex = ETH_FULLDUPLEX_MODE;
 8005168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800516c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8005170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005174:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005178:	e01f      	b.n	80051ba <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8005180:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005188:	e017      	b.n	80051ba <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800518a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800518e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005198:	e00f      	b.n	80051ba <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800519a:	2300      	movs	r3, #0
 800519c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 80051a6:	e008      	b.n	80051ba <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80051a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 80051b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 80051b8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80051be:	4619      	mov	r1, r3
 80051c0:	480f      	ldr	r0, [pc, #60]	@ (8005200 <low_level_init+0x26c>)
 80051c2:	f7fd fac3 	bl	800274c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80051c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051ca:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 80051cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051d0:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80051d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80051d6:	4619      	mov	r1, r3
 80051d8:	4809      	ldr	r0, [pc, #36]	@ (8005200 <low_level_init+0x26c>)
 80051da:	f7fd fba1 	bl	8002920 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80051de:	4808      	ldr	r0, [pc, #32]	@ (8005200 <low_level_init+0x26c>)
 80051e0:	f7fc fe42 	bl	8001e68 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f006 fde7 	bl	800bdb8 <netif_set_up>
    netif_set_link_up(netif);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f006 fe82 	bl	800bef4 <netif_set_link_up>
}
 80051f0:	e001      	b.n	80051f6 <low_level_init+0x262>
    Error_Handler();
 80051f2:	f7fb fc0f 	bl	8000a14 <Error_Handler>
}
 80051f6:	bf00      	nop
 80051f8:	37b0      	adds	r7, #176	@ 0xb0
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bdb0      	pop	{r4, r5, r7, pc}
 80051fe:	bf00      	nop
 8005200:	20005344 	.word	0x20005344
 8005204:	40028000 	.word	0x40028000
 8005208:	2000529c 	.word	0x2000529c
 800520c:	200051fc 	.word	0x200051fc
 8005210:	200053f4 	.word	0x200053f4
 8005214:	0801ac3c 	.word	0x0801ac3c
 8005218:	2000533c 	.word	0x2000533c
 800521c:	20005340 	.word	0x20005340
 8005220:	080176dc 	.word	0x080176dc
 8005224:	2000010c 	.word	0x2000010c
 8005228:	2000542c 	.word	0x2000542c

0800522c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b092      	sub	sp, #72	@ 0x48
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005244:	f107 030c 	add.w	r3, r7, #12
 8005248:	2230      	movs	r2, #48	@ 0x30
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f011 f86e 	bl	801632e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005252:	f107 030c 	add.w	r3, r7, #12
 8005256:	2230      	movs	r2, #48	@ 0x30
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f011 f867 	bl	801632e <memset>

  for(q = p; q != NULL; q = q->next)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	643b      	str	r3, [r7, #64]	@ 0x40
 8005264:	e045      	b.n	80052f2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005268:	2b03      	cmp	r3, #3
 800526a:	d902      	bls.n	8005272 <low_level_output+0x46>
      return ERR_IF;
 800526c:	f06f 030b 	mvn.w	r3, #11
 8005270:	e06c      	b.n	800534c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8005272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3348      	adds	r3, #72	@ 0x48
 8005282:	443b      	add	r3, r7
 8005284:	3b3c      	subs	r3, #60	@ 0x3c
 8005286:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528a:	895b      	ldrh	r3, [r3, #10]
 800528c:	4619      	mov	r1, r3
 800528e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	3348      	adds	r3, #72	@ 0x48
 800529a:	443b      	add	r3, r7
 800529c:	3b38      	subs	r3, #56	@ 0x38
 800529e:	6019      	str	r1, [r3, #0]

    if(i>0)
 80052a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d011      	beq.n	80052ca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80052a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	f107 000c 	add.w	r0, r7, #12
 80052ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052b0:	460b      	mov	r3, r1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	440b      	add	r3, r1
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	18c1      	adds	r1, r0, r3
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	3348      	adds	r3, #72	@ 0x48
 80052c4:	443b      	add	r3, r7
 80052c6:	3b34      	subs	r3, #52	@ 0x34
 80052c8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d4:	4613      	mov	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	3348      	adds	r3, #72	@ 0x48
 80052de:	443b      	add	r3, r7
 80052e0:	3b34      	subs	r3, #52	@ 0x34
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e8:	3301      	adds	r3, #1
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80052ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1b6      	bne.n	8005266 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	891b      	ldrh	r3, [r3, #8]
 80052fc:	461a      	mov	r2, r3
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <low_level_output+0x128>)
 8005300:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005302:	4a14      	ldr	r2, [pc, #80]	@ (8005354 <low_level_output+0x128>)
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800530a:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <low_level_output+0x128>)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005310:	6838      	ldr	r0, [r7, #0]
 8005312:	f007 faa7 	bl	800c864 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8005316:	490f      	ldr	r1, [pc, #60]	@ (8005354 <low_level_output+0x128>)
 8005318:	480f      	ldr	r0, [pc, #60]	@ (8005358 <low_level_output+0x12c>)
 800531a:	f7fc feb2 	bl	8002082 <HAL_ETH_Transmit_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10e      	bne.n	8005342 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005324:	bf00      	nop
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <low_level_output+0x130>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f04f 31ff 	mov.w	r1, #4294967295
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc44 	bl	8005bbc <osSemaphoreWait>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f5      	bne.n	8005326 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800533a:	4807      	ldr	r0, [pc, #28]	@ (8005358 <low_level_output+0x12c>)
 800533c:	f7fd f840 	bl	80023c0 <HAL_ETH_ReleaseTxPacket>
 8005340:	e002      	b.n	8005348 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8005342:	6838      	ldr	r0, [r7, #0]
 8005344:	f007 f9e8 	bl	800c718 <pbuf_free>
  }

  return errval;
 8005348:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800534c:	4618      	mov	r0, r3
 800534e:	3748      	adds	r7, #72	@ 0x48
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200053f4 	.word	0x200053f4
 8005358:	20005344 	.word	0x20005344
 800535c:	20005340 	.word	0x20005340

08005360 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <low_level_input+0x2c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4619      	mov	r1, r3
 800537a:	4805      	ldr	r0, [pc, #20]	@ (8005390 <low_level_input+0x30>)
 800537c:	f7fc fedd 	bl	800213a <HAL_ETH_ReadData>
  }

  return p;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200051f8 	.word	0x200051f8
 8005390:	20005344 	.word	0x20005344

08005394 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053a4:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <ethernetif_input+0x50>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc05 	bl	8005bbc <osSemaphoreWait>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f5      	bne.n	80053a4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f7ff ffd1 	bl	8005360 <low_level_input>
 80053be:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	4798      	blx	r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f007 f99e 	bl	800c718 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ea      	bne.n	80053b8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053e2:	e7df      	b.n	80053a4 <ethernetif_input+0x10>
 80053e4:	2000533c 	.word	0x2000533c

080053e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <ethernetif_init+0x1c>
 80053f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <ethernetif_init+0x48>)
 80053f8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80053fc:	490d      	ldr	r1, [pc, #52]	@ (8005434 <ethernetif_init+0x4c>)
 80053fe:	480e      	ldr	r0, [pc, #56]	@ (8005438 <ethernetif_init+0x50>)
 8005400:	f010 fef6 	bl	80161f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2273      	movs	r2, #115	@ 0x73
 8005408:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2274      	movs	r2, #116	@ 0x74
 8005410:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <ethernetif_init+0x54>)
 8005418:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <ethernetif_init+0x58>)
 800541e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fdb7 	bl	8004f94 <low_level_init>

  return ERR_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	080176f8 	.word	0x080176f8
 8005434:	08017714 	.word	0x08017714
 8005438:	08017724 	.word	0x08017724
 800543c:	08013f39 	.word	0x08013f39
 8005440:	0800522d 	.word	0x0800522d

08005444 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	4809      	ldr	r0, [pc, #36]	@ (8005478 <pbuf_free_custom+0x34>)
 8005454:	f006 fa98 	bl	800b988 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005458:	4b08      	ldr	r3, [pc, #32]	@ (800547c <pbuf_free_custom+0x38>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <pbuf_free_custom+0x38>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <pbuf_free_custom+0x3c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fbf4 	bl	8005c58 <osSemaphoreRelease>
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	0801ac3c 	.word	0x0801ac3c
 800547c:	200051f8 	.word	0x200051f8
 8005480:	2000533c 	.word	0x2000533c

08005484 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005488:	f7fc fb5e 	bl	8001b48 <HAL_GetTick>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	@ 0x38
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a59      	ldr	r2, [pc, #356]	@ (8005618 <HAL_ETH_MspInit+0x184>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f040 80ac 	bne.w	8005610 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	4b57      	ldr	r3, [pc, #348]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	4a56      	ldr	r2, [pc, #344]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80054c8:	4b54      	ldr	r3, [pc, #336]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	4b50      	ldr	r3, [pc, #320]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	4a4f      	ldr	r2, [pc, #316]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80054e4:	4b4d      	ldr	r3, [pc, #308]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	4a48      	ldr	r2, [pc, #288]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005500:	4b46      	ldr	r3, [pc, #280]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	4b42      	ldr	r3, [pc, #264]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	4a41      	ldr	r2, [pc, #260]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	6313      	str	r3, [r2, #48]	@ 0x30
 800551c:	4b3f      	ldr	r3, [pc, #252]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	4b3b      	ldr	r3, [pc, #236]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005530:	4a3a      	ldr	r2, [pc, #232]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6313      	str	r3, [r2, #48]	@ 0x30
 8005538:	4b38      	ldr	r3, [pc, #224]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	4b34      	ldr	r3, [pc, #208]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800554e:	f043 0302 	orr.w	r3, r3, #2
 8005552:	6313      	str	r3, [r2, #48]	@ 0x30
 8005554:	4b31      	ldr	r3, [pc, #196]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	4b2d      	ldr	r3, [pc, #180]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	4a2c      	ldr	r2, [pc, #176]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800556a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800556e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005570:	4b2a      	ldr	r3, [pc, #168]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800557c:	2332      	movs	r3, #50	@ 0x32
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005588:	2303      	movs	r3, #3
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800558c:	230b      	movs	r3, #11
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005594:	4619      	mov	r1, r3
 8005596:	4822      	ldr	r0, [pc, #136]	@ (8005620 <HAL_ETH_MspInit+0x18c>)
 8005598:	f7fd fe44 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800559c:	2386      	movs	r3, #134	@ 0x86
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2302      	movs	r3, #2
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a8:	2303      	movs	r3, #3
 80055aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055ac:	230b      	movs	r3, #11
 80055ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055b4:	4619      	mov	r1, r3
 80055b6:	481b      	ldr	r0, [pc, #108]	@ (8005624 <HAL_ETH_MspInit+0x190>)
 80055b8:	f7fd fe34 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80055bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ca:	2303      	movs	r3, #3
 80055cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055ce:	230b      	movs	r3, #11
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055d6:	4619      	mov	r1, r3
 80055d8:	4813      	ldr	r0, [pc, #76]	@ (8005628 <HAL_ETH_MspInit+0x194>)
 80055da:	f7fd fe23 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80055de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e4:	2302      	movs	r3, #2
 80055e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ec:	2303      	movs	r3, #3
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055f0:	230b      	movs	r3, #11
 80055f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055f8:	4619      	mov	r1, r3
 80055fa:	480c      	ldr	r0, [pc, #48]	@ (800562c <HAL_ETH_MspInit+0x198>)
 80055fc:	f7fd fe12 	bl	8003224 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005600:	2200      	movs	r2, #0
 8005602:	2105      	movs	r1, #5
 8005604:	203d      	movs	r0, #61	@ 0x3d
 8005606:	f7fc fb87 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800560a:	203d      	movs	r0, #61	@ 0x3d
 800560c:	f7fc fba0 	bl	8001d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005610:	bf00      	nop
 8005612:	3738      	adds	r7, #56	@ 0x38
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40028000 	.word	0x40028000
 800561c:	40023800 	.word	0x40023800
 8005620:	40020800 	.word	0x40020800
 8005624:	40020000 	.word	0x40020000
 8005628:	40020400 	.word	0x40020400
 800562c:	40021800 	.word	0x40021800

08005630 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005634:	4802      	ldr	r0, [pc, #8]	@ (8005640 <ETH_PHY_IO_Init+0x10>)
 8005636:	f7fd f98d 	bl	8002954 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20005344 	.word	0x20005344

08005644 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return 0;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	4807      	ldr	r0, [pc, #28]	@ (8005684 <ETH_PHY_IO_ReadReg+0x30>)
 8005668:	f7fc ffdc 	bl	8002624 <HAL_ETH_ReadPHYRegister>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	e000      	b.n	800567a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20005344 	.word	0x20005344

08005688 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	68f9      	ldr	r1, [r7, #12]
 800569a:	4807      	ldr	r0, [pc, #28]	@ (80056b8 <ETH_PHY_IO_WriteReg+0x30>)
 800569c:	f7fd f80d 	bl	80026ba <HAL_ETH_WritePHYRegister>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	e000      	b.n	80056ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20005344 	.word	0x20005344

080056bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056c0:	f7fc fa42 	bl	8001b48 <HAL_GetTick>
 80056c4:	4603      	mov	r3, r0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b0a0      	sub	sp, #128	@ 0x80
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80056d4:	f107 0308 	add.w	r3, r7, #8
 80056d8:	2264      	movs	r2, #100	@ 0x64
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f010 fe26 	bl	801632e <memset>
  int32_t PHYLinkState = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056ea:	2300      	movs	r3, #0
 80056ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ee:	2300      	movs	r3, #0
 80056f0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80056f6:	483a      	ldr	r0, [pc, #232]	@ (80057e0 <ethernet_link_thread+0x114>)
 80056f8:	f7fc f969 	bl	80019ce <LAN8742_GetLinkState>
 80056fc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80056fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005700:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <ethernet_link_thread+0x5e>
 8005710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005712:	2b01      	cmp	r3, #1
 8005714:	dc09      	bgt.n	800572a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005716:	4833      	ldr	r0, [pc, #204]	@ (80057e4 <ethernet_link_thread+0x118>)
 8005718:	f7fc fc34 	bl	8001f84 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800571c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800571e:	f006 fbb7 	bl	800be90 <netif_set_down>
    netif_set_link_down(netif);
 8005722:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005724:	f006 fc1a 	bl	800bf5c <netif_set_link_down>
 8005728:	e055      	b.n	80057d6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800572a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800572c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d14e      	bne.n	80057d6 <ethernet_link_thread+0x10a>
 8005738:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573a:	2b01      	cmp	r3, #1
 800573c:	dd4b      	ble.n	80057d6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800573e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005740:	3b02      	subs	r3, #2
 8005742:	2b03      	cmp	r3, #3
 8005744:	d82a      	bhi.n	800579c <ethernet_link_thread+0xd0>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <ethernet_link_thread+0x80>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576f 	.word	0x0800576f
 8005754:	0800577f 	.word	0x0800577f
 8005758:	0800578f 	.word	0x0800578f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800575c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005760:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005762:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005766:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005768:	2301      	movs	r3, #1
 800576a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800576c:	e017      	b.n	800579e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800576e:	2300      	movs	r3, #0
 8005770:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005776:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800577c:	e00f      	b.n	800579e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800577e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005782:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005784:	2300      	movs	r3, #0
 8005786:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005788:	2301      	movs	r3, #1
 800578a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800578c:	e007      	b.n	800579e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800578e:	2300      	movs	r3, #0
 8005790:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005792:	2300      	movs	r3, #0
 8005794:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800579a:	e000      	b.n	800579e <ethernet_link_thread+0xd2>
    default:
      break;
 800579c:	bf00      	nop
    }

    if(linkchanged)
 800579e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d018      	beq.n	80057d6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	480e      	ldr	r0, [pc, #56]	@ (80057e4 <ethernet_link_thread+0x118>)
 80057ac:	f7fc ffce 	bl	800274c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80057b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057b2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80057b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	4619      	mov	r1, r3
 80057be:	4809      	ldr	r0, [pc, #36]	@ (80057e4 <ethernet_link_thread+0x118>)
 80057c0:	f7fd f8ae 	bl	8002920 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80057c4:	4807      	ldr	r0, [pc, #28]	@ (80057e4 <ethernet_link_thread+0x118>)
 80057c6:	f7fc fb4f 	bl	8001e68 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80057ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057cc:	f006 faf4 	bl	800bdb8 <netif_set_up>
      netif_set_link_up(netif);
 80057d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057d2:	f006 fb8f 	bl	800bef4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80057d6:	2064      	movs	r0, #100	@ 0x64
 80057d8:	f000 f90e 	bl	80059f8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80057dc:	e78b      	b.n	80056f6 <ethernet_link_thread+0x2a>
 80057de:	bf00      	nop
 80057e0:	2000542c 	.word	0x2000542c
 80057e4:	20005344 	.word	0x20005344

080057e8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80057f0:	4812      	ldr	r0, [pc, #72]	@ (800583c <HAL_ETH_RxAllocateCallback+0x54>)
 80057f2:	f006 f855 	bl	800b8a0 <memp_malloc_pool>
 80057f6:	60f8      	str	r0, [r7, #12]
  if (p)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d014      	beq.n	8005828 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f103 0220 	add.w	r2, r3, #32
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a0d      	ldr	r2, [pc, #52]	@ (8005840 <HAL_ETH_RxAllocateCallback+0x58>)
 800580c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2241      	movs	r2, #65	@ 0x41
 800581e:	2100      	movs	r1, #0
 8005820:	2000      	movs	r0, #0
 8005822:	f006 fdbf 	bl	800c3a4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005826:	e005      	b.n	8005834 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005828:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_ETH_RxAllocateCallback+0x5c>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	0801ac3c 	.word	0x0801ac3c
 8005840:	08005445 	.word	0x08005445
 8005844:	200051f8 	.word	0x200051f8

08005848 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	@ 0x24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3b20      	subs	r3, #32
 8005866:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2200      	movs	r2, #0
 8005872:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e003      	b.n	8005892 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e009      	b.n	80058b4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	891a      	ldrh	r2, [r3, #8]
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	4413      	add	r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f2      	bne.n	80058a0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	3724      	adds	r7, #36	@ 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f006 ff21 	bl	800c718 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	4603      	mov	r3, r0
 80058e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058f0:	2b84      	cmp	r3, #132	@ 0x84
 80058f2:	d005      	beq.n	8005900 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	3303      	adds	r3, #3
 80058fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005914:	f3ef 8305 	mrs	r3, IPSR
 8005918:	607b      	str	r3, [r7, #4]
  return(result);
 800591a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005936:	f001 fd5f 	bl	80073f8 <vTaskStartScheduler>
  
  return osOK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}

08005940 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005944:	f7ff ffe3 	bl	800590e <inHandlerMode>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800594e:	f001 fe79 	bl	8007644 <xTaskGetTickCountFromISR>
 8005952:	4603      	mov	r3, r0
 8005954:	e002      	b.n	800595c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005956:	f001 fe65 	bl	8007624 <xTaskGetTickCount>
 800595a:	4603      	mov	r3, r0
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}

08005960 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b089      	sub	sp, #36	@ 0x24
 8005964:	af04      	add	r7, sp, #16
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <osThreadCreate+0x54>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01c      	beq.n	80059b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685c      	ldr	r4, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691e      	ldr	r6, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ffa6 	bl	80058de <makeFreeRtosPriority>
 8005992:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800599c:	9202      	str	r2, [sp, #8]
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	9100      	str	r1, [sp, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	4632      	mov	r2, r6
 80059a6:	4629      	mov	r1, r5
 80059a8:	4620      	mov	r0, r4
 80059aa:	f001 fb3f 	bl	800702c <xTaskCreateStatic>
 80059ae:	4603      	mov	r3, r0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e01c      	b.n	80059ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685c      	ldr	r4, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff88 	bl	80058de <makeFreeRtosPriority>
 80059ce:	4602      	mov	r2, r0
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	9200      	str	r2, [sp, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	4632      	mov	r2, r6
 80059dc:	4629      	mov	r1, r5
 80059de:	4620      	mov	r0, r4
 80059e0:	f001 fb84 	bl	80070ec <xTaskCreate>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d001      	beq.n	80059ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <osDelay+0x16>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e000      	b.n	8005a10 <osDelay+0x18>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fcbb 	bl	800738c <vTaskDelay>
  
  return osOK;
 8005a16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4619      	mov	r1, r3
 8005a36:	2001      	movs	r0, #1
 8005a38:	f000 fc85 	bl	8006346 <xQueueCreateMutexStatic>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	e003      	b.n	8005a48 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005a40:	2001      	movs	r0, #1
 8005a42:	f000 fc68 	bl	8006316 <xQueueCreateMutex>
 8005a46:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <osMutexWait+0x18>
    return osErrorParameter;
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	e03a      	b.n	8005ade <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e009      	b.n	8005a90 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <osMutexWait+0x40>
      ticks = 1;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a90:	f7ff ff3d 	bl	800590e <inHandlerMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 f88c 	bl	8006bc0 <xQueueReceiveFromISR>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <osMutexWait+0x62>
      return osErrorOS;
 8005aae:	23ff      	movs	r3, #255	@ 0xff
 8005ab0:	e015      	b.n	8005ade <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d011      	beq.n	8005adc <osMutexWait+0x8c>
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <osMutexWait+0x98>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	e008      	b.n	8005adc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 ff67 	bl	80069a0 <xQueueSemaphoreTake>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d001      	beq.n	8005adc <osMutexWait+0x8c>
    return osErrorOS;
 8005ad8:	23ff      	movs	r3, #255	@ 0xff
 8005ada:	e000      	b.n	8005ade <osMutexWait+0x8e>
  }
  
  return osOK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005afc:	f7ff ff07 	bl	800590e <inHandlerMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fdd5 	bl	80066bc <xQueueGiveFromISR>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d001      	beq.n	8005b1c <osMutexRelease+0x30>
      return osErrorOS;
 8005b18:	23ff      	movs	r3, #255	@ 0xff
 8005b1a:	e017      	b.n	8005b4c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <osMutexRelease+0x5e>
 8005b22:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <osMutexRelease+0x68>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	e00a      	b.n	8005b4a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b34:	2300      	movs	r3, #0
 8005b36:	2200      	movs	r2, #0
 8005b38:	2100      	movs	r1, #0
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fc1e 	bl	800637c <xQueueGenericSend>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005b46:	23ff      	movs	r3, #255	@ 0xff
 8005b48:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d10a      	bne.n	8005b86 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2203      	movs	r2, #3
 8005b76:	9200      	str	r2, [sp, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f000 fad9 	bl	8006134 <xQueueGenericCreateStatic>
 8005b82:	4603      	mov	r3, r0
 8005b84:	e016      	b.n	8005bb4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e014      	b.n	8005bb4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d110      	bne.n	8005bb2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005b90:	2203      	movs	r2, #3
 8005b92:	2100      	movs	r1, #0
 8005b94:	2001      	movs	r0, #1
 8005b96:	f000 fb4a 	bl	800622e <xQueueGenericCreate>
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <osSemaphoreCreate+0x56>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fbe7 	bl	800637c <xQueueGenericSend>
      return sema;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e000      	b.n	8005bb4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005bb2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005bd0:	2380      	movs	r3, #128	@ 0x80
 8005bd2:	e03a      	b.n	8005c4a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d103      	bne.n	8005be8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e009      	b.n	8005bfc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <osSemaphoreWait+0x40>
      ticks = 1;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005bfc:	f7ff fe87 	bl	800590e <inHandlerMode>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 ffd6 	bl	8006bc0 <xQueueReceiveFromISR>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <osSemaphoreWait+0x62>
      return osErrorOS;
 8005c1a:	23ff      	movs	r3, #255	@ 0xff
 8005c1c:	e015      	b.n	8005c4a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <osSemaphoreWait+0x8c>
 8005c24:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <osSemaphoreWait+0x98>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	e008      	b.n	8005c48 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 feb1 	bl	80069a0 <xQueueSemaphoreTake>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005c44:	23ff      	movs	r3, #255	@ 0xff
 8005c46:	e000      	b.n	8005c4a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005c68:	f7ff fe51 	bl	800590e <inHandlerMode>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c72:	f107 0308 	add.w	r3, r7, #8
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fd1f 	bl	80066bc <xQueueGiveFromISR>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c84:	23ff      	movs	r3, #255	@ 0xff
 8005c86:	e017      	b.n	8005cb8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <osSemaphoreRelease+0x5e>
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <osSemaphoreRelease+0x68>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	e00a      	b.n	8005cb6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fb68 	bl	800637c <xQueueGenericSend>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005cb2:	23ff      	movs	r3, #255	@ 0xff
 8005cb4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ccc:	f7ff fe1f 	bl	800590e <inHandlerMode>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005cd6:	2382      	movs	r3, #130	@ 0x82
 8005cd8:	e003      	b.n	8005ce2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f830 	bl	8006d40 <vQueueDelete>

  return osOK; 
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005cea:	b590      	push	{r4, r7, lr}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <osMessageCreate+0x36>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00d      	beq.n	8005d20 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2400      	movs	r4, #0
 8005d16:	9400      	str	r4, [sp, #0]
 8005d18:	f000 fa0c 	bl	8006134 <xQueueGenericCreateStatic>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e008      	b.n	8005d32 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f000 fa7f 	bl	800622e <xQueueGenericCreate>
 8005d30:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd90      	pop	{r4, r7, pc}
	...

08005d3c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <osMessagePut+0x1e>
    ticks = 1;
 8005d56:	2301      	movs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005d5a:	f7ff fdd8 	bl	800590e <inHandlerMode>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d018      	beq.n	8005d96 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005d64:	f107 0210 	add.w	r2, r7, #16
 8005d68:	f107 0108 	add.w	r1, r7, #8
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fc06 	bl	8006580 <xQueueGenericSendFromISR>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <osMessagePut+0x42>
      return osErrorOS;
 8005d7a:	23ff      	movs	r3, #255	@ 0xff
 8005d7c:	e018      	b.n	8005db0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d014      	beq.n	8005dae <osMessagePut+0x72>
 8005d84:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <osMessagePut+0x7c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	e00b      	b.n	8005dae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005d96:	f107 0108 	add.w	r1, r7, #8
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 faec 	bl	800637c <xQueueGenericSend>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d001      	beq.n	8005dae <osMessagePut+0x72>
      return osErrorOS;
 8005daa:	23ff      	movs	r3, #255	@ 0xff
 8005dac:	e000      	b.n	8005db0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b08b      	sub	sp, #44	@ 0x2c
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005dd6:	2380      	movs	r3, #128	@ 0x80
 8005dd8:	617b      	str	r3, [r7, #20]
    return event;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	461c      	mov	r4, r3
 8005dde:	f107 0314 	add.w	r3, r7, #20
 8005de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dea:	e054      	b.n	8005e96 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d103      	bne.n	8005e04 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e02:	e009      	b.n	8005e18 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <osMessageGet+0x5c>
      ticks = 1;
 8005e14:	2301      	movs	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e18:	f7ff fd79 	bl	800590e <inHandlerMode>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01c      	beq.n	8005e5c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e22:	f107 0220 	add.w	r2, r7, #32
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f000 fec6 	bl	8006bc0 <xQueueReceiveFromISR>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d102      	bne.n	8005e40 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e001      	b.n	8005e44 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01d      	beq.n	8005e86 <osMessageGet+0xca>
 8005e4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ea0 <osMessageGet+0xe4>)
 8005e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	e014      	b.n	8005e86 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	3304      	adds	r3, #4
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	4619      	mov	r1, r3
 8005e66:	68b8      	ldr	r0, [r7, #8]
 8005e68:	f000 fcb8 	bl	80067dc <xQueueReceive>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005e72:	2310      	movs	r3, #16
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e006      	b.n	8005e86 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <osMessageGet+0xc6>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <osMessageGet+0xc8>
 8005e82:	2340      	movs	r3, #64	@ 0x40
 8005e84:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	461c      	mov	r4, r3
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	372c      	adds	r7, #44	@ 0x2c
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005eac:	f7ff fd2f 	bl	800590e <inHandlerMode>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 ff23 	bl	8006d02 <uxQueueMessagesWaitingFromISR>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e003      	b.n	8005ec8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 feff 	bl	8006cc4 <uxQueueMessagesWaiting>
 8005ec6:	4603      	mov	r3, r0
  }
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ed8:	f7ff fd19 	bl	800590e <inHandlerMode>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <osMessageDelete+0x16>
    return osErrorISR;
 8005ee2:	2382      	movs	r3, #130	@ 0x82
 8005ee4:	e003      	b.n	8005eee <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 ff2a 	bl	8006d40 <vQueueDelete>

  return osOK; 
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f103 0208 	add.w	r2, r3, #8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 0208 	add.w	r2, r3, #8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 0208 	add.w	r2, r3, #8
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d103      	bne.n	8005fb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e00c      	b.n	8005fd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e002      	b.n	8005fc6 <vListInsert+0x2e>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d2f6      	bcs.n	8005fc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6892      	ldr	r2, [r2, #8]
 8006020:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	429a      	cmp	r2, r3
 8006034:	d103      	bne.n	800603e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10b      	bne.n	800608c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800608c:	f002 f94c 	bl	8008328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	3b01      	subs	r3, #1
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	22ff      	movs	r2, #255	@ 0xff
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22ff      	movs	r2, #255	@ 0xff
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d114      	bne.n	800610c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3310      	adds	r3, #16
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fbfe 	bl	80078f0 <xTaskRemoveFromEventList>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d012      	beq.n	8006120 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <xQueueGenericReset+0xd0>)
 80060fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	e009      	b.n	8006120 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3310      	adds	r3, #16
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fef0 	bl	8005ef6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3324      	adds	r3, #36	@ 0x24
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff feeb 	bl	8005ef6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f002 f934 	bl	800838c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006124:	2301      	movs	r3, #1
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	@ 0x38
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <xQueueGenericCreateStatic+0x56>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <xQueueGenericCreateStatic+0x5a>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueGenericCreateStatic+0x5c>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	623b      	str	r3, [r7, #32]
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <xQueueGenericCreateStatic+0x84>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <xQueueGenericCreateStatic+0x88>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <xQueueGenericCreateStatic+0x8a>
 80061bc:	2300      	movs	r3, #0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	61fb      	str	r3, [r7, #28]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061da:	2348      	movs	r3, #72	@ 0x48
 80061dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b48      	cmp	r3, #72	@ 0x48
 80061e2:	d00b      	beq.n	80061fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	61bb      	str	r3, [r7, #24]
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006210:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f840 	bl	80062a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006226:	4618      	mov	r0, r3
 8006228:	3730      	adds	r7, #48	@ 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800622e:	b580      	push	{r7, lr}
 8006230:	b08a      	sub	sp, #40	@ 0x28
 8006232:	af02      	add	r7, sp, #8
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	4613      	mov	r3, r2
 800623a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	613b      	str	r3, [r7, #16]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3348      	adds	r3, #72	@ 0x48
 8006268:	4618      	mov	r0, r3
 800626a:	f002 f97f 	bl	800856c <pvPortMalloc>
 800626e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3348      	adds	r3, #72	@ 0x48
 800627e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006288:	79fa      	ldrb	r2, [r7, #7]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f805 	bl	80062a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800629a:	69bb      	ldr	r3, [r7, #24]
	}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e002      	b.n	80062c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062d2:	2101      	movs	r1, #1
 80062d4:	69b8      	ldr	r0, [r7, #24]
 80062d6:	f7ff fec3 	bl	8006060 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006302:	2300      	movs	r3, #0
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f837 	bl	800637c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	4603      	mov	r3, r0
 800631e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	461a      	mov	r2, r3
 800632c:	6939      	ldr	r1, [r7, #16]
 800632e:	6978      	ldr	r0, [r7, #20]
 8006330:	f7ff ff7d 	bl	800622e <xQueueGenericCreate>
 8006334:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff ffd3 	bl	80062e2 <prvInitialiseMutex>

		return xNewQueue;
 800633c:	68fb      	ldr	r3, [r7, #12]
	}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006346:	b580      	push	{r7, lr}
 8006348:	b088      	sub	sp, #32
 800634a:	af02      	add	r7, sp, #8
 800634c:	4603      	mov	r3, r0
 800634e:	6039      	str	r1, [r7, #0]
 8006350:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	2300      	movs	r3, #0
 8006358:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2200      	movs	r2, #0
 8006362:	6939      	ldr	r1, [r7, #16]
 8006364:	6978      	ldr	r0, [r7, #20]
 8006366:	f7ff fee5 	bl	8006134 <xQueueGenericCreateStatic>
 800636a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ffb8 	bl	80062e2 <prvInitialiseMutex>

		return xNewQueue;
 8006372:	68fb      	ldr	r3, [r7, #12]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08e      	sub	sp, #56	@ 0x38
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <xQueueGenericSend+0x34>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <xQueueGenericSend+0x42>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <xQueueGenericSend+0x46>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <xQueueGenericSend+0x48>
 80063c2:	2300      	movs	r3, #0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <xQueueGenericSend+0x64>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x72>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <xQueueGenericSend+0x76>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericSend+0x78>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <xQueueGenericSend+0x94>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	623b      	str	r3, [r7, #32]
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006410:	f001 fc34 	bl	8007c7c <xTaskGetSchedulerState>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <xQueueGenericSend+0xa4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <xQueueGenericSend+0xa8>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <xQueueGenericSend+0xaa>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <xQueueGenericSend+0xc6>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006442:	f001 ff71 	bl	8008328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <xQueueGenericSend+0xdc>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d129      	bne.n	80064ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800645e:	f000 fcab 	bl	8006db8 <prvCopyDataToQueue>
 8006462:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	3324      	adds	r3, #36	@ 0x24
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fa3d 	bl	80078f0 <xTaskRemoveFromEventList>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800647c:	4b3f      	ldr	r3, [pc, #252]	@ (800657c <xQueueGenericSend+0x200>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	e00a      	b.n	80064a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800648e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006494:	4b39      	ldr	r3, [pc, #228]	@ (800657c <xQueueGenericSend+0x200>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064a4:	f001 ff72 	bl	800838c <vPortExitCritical>
				return pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e063      	b.n	8006574 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064b2:	f001 ff6b 	bl	800838c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e05c      	b.n	8006574 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fa77 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ce:	f001 ff5d 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064d2:	f000 fffb 	bl	80074cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064d6:	f001 ff27 	bl	8008328 <vPortEnterCritical>
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d103      	bne.n	80064f0 <xQueueGenericSend+0x174>
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d103      	bne.n	8006506 <xQueueGenericSend+0x18a>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006506:	f001 ff41 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800650a:	1d3a      	adds	r2, r7, #4
 800650c:	f107 0314 	add.w	r3, r7, #20
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fa66 	bl	80079e4 <xTaskCheckForTimeOut>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d124      	bne.n	8006568 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800651e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006520:	f000 fd42 	bl	8006fa8 <prvIsQueueFull>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	3310      	adds	r3, #16
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f9b6 	bl	80078a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800653a:	f000 fccd 	bl	8006ed8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800653e:	f000 ffd3 	bl	80074e8 <xTaskResumeAll>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f af7c 	bne.w	8006442 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800654a:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <xQueueGenericSend+0x200>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	e772      	b.n	8006442 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800655c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800655e:	f000 fcbb 	bl	8006ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006562:	f000 ffc1 	bl	80074e8 <xTaskResumeAll>
 8006566:	e76c      	b.n	8006442 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800656a:	f000 fcb5 	bl	8006ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800656e:	f000 ffbb 	bl	80074e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006574:	4618      	mov	r0, r3
 8006576:	3738      	adds	r7, #56	@ 0x38
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b090      	sub	sp, #64	@ 0x40
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	e7fd      	b.n	80065ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <xQueueGenericSendFromISR+0x3e>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSendFromISR+0x42>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSendFromISR+0x44>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSendFromISR+0x6e>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <xQueueGenericSendFromISR+0x72>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueGenericSendFromISR+0x74>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	623b      	str	r3, [r7, #32]
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006610:	f001 ff6a 	bl	80084e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006614:	f3ef 8211 	mrs	r2, BASEPRI
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	61fa      	str	r2, [r7, #28]
 800662a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800662c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <xQueueGenericSendFromISR+0xc2>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d12f      	bne.n	80066a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006648:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006658:	f000 fbae 	bl	8006db8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800665c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d112      	bne.n	800668c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	3324      	adds	r3, #36	@ 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f93c 	bl	80078f0 <xTaskRemoveFromEventList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e007      	b.n	800669c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800668c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006690:	3301      	adds	r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	b25a      	sxtb	r2, r3
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800669c:	2301      	movs	r3, #1
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066a0:	e001      	b.n	80066a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3740      	adds	r7, #64	@ 0x40
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	@ 0x38
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61fb      	str	r3, [r7, #28]
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	e7fd      	b.n	8006704 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d103      	bne.n	8006718 <xQueueGiveFromISR+0x5c>
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <xQueueGiveFromISR+0x60>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <xQueueGiveFromISR+0x62>
 800671c:	2300      	movs	r3, #0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	61bb      	str	r3, [r7, #24]
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800673a:	f001 fed5 	bl	80084e8 <vPortValidateInterruptPriority>
	__asm volatile
 800673e:	f3ef 8211 	mrs	r2, BASEPRI
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	617a      	str	r2, [r7, #20]
 8006754:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006756:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006766:	429a      	cmp	r2, r3
 8006768:	d22b      	bcs.n	80067c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800677c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d112      	bne.n	80067ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	3324      	adds	r3, #36	@ 0x24
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f8ac 	bl	80078f0 <xTaskRemoveFromEventList>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e007      	b.n	80067bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067b0:	3301      	adds	r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	b25a      	sxtb	r2, r3
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067bc:	2301      	movs	r3, #1
 80067be:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c0:	e001      	b.n	80067c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f383 8811 	msr	BASEPRI, r3
}
 80067d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3738      	adds	r7, #56	@ 0x38
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	@ 0x30
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <xQueueReceive+0x32>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	623b      	str	r3, [r7, #32]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <xQueueReceive+0x40>
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <xQueueReceive+0x44>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <xQueueReceive+0x46>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <xQueueReceive+0x62>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	61fb      	str	r3, [r7, #28]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800683e:	f001 fa1d 	bl	8007c7c <xTaskGetSchedulerState>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <xQueueReceive+0x72>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <xQueueReceive+0x76>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueReceive+0x78>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <xQueueReceive+0x94>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61bb      	str	r3, [r7, #24]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006870:	f001 fd5a 	bl	8008328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01f      	beq.n	80068c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006884:	f000 fb02 	bl	8006e8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1e5a      	subs	r2, r3, #1
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	3310      	adds	r3, #16
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f827 	bl	80078f0 <xTaskRemoveFromEventList>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068a8:	4b3c      	ldr	r3, [pc, #240]	@ (800699c <xQueueReceive+0x1c0>)
 80068aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068b8:	f001 fd68 	bl	800838c <vPortExitCritical>
				return pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	e069      	b.n	8006994 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068c6:	f001 fd61 	bl	800838c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e062      	b.n	8006994 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f86d 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068e2:	f001 fd53 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e6:	f000 fdf1 	bl	80074cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ea:	f001 fd1d 	bl	8008328 <vPortEnterCritical>
 80068ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d103      	bne.n	8006904 <xQueueReceive+0x128>
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d103      	bne.n	800691a <xQueueReceive+0x13e>
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800691a:	f001 fd37 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800691e:	1d3a      	adds	r2, r7, #4
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f85c 	bl	80079e4 <xTaskCheckForTimeOut>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d123      	bne.n	800697a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006934:	f000 fb22 	bl	8006f7c <prvIsQueueEmpty>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d017      	beq.n	800696e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	3324      	adds	r3, #36	@ 0x24
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f000 ffac 	bl	80078a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800694c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800694e:	f000 fac3 	bl	8006ed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006952:	f000 fdc9 	bl	80074e8 <xTaskResumeAll>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d189      	bne.n	8006870 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800695c:	4b0f      	ldr	r3, [pc, #60]	@ (800699c <xQueueReceive+0x1c0>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	e780      	b.n	8006870 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800696e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006970:	f000 fab2 	bl	8006ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006974:	f000 fdb8 	bl	80074e8 <xTaskResumeAll>
 8006978:	e77a      	b.n	8006870 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800697a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697c:	f000 faac 	bl	8006ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006980:	f000 fdb2 	bl	80074e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006986:	f000 faf9 	bl	8006f7c <prvIsQueueEmpty>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	f43f af6f 	beq.w	8006870 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006992:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006994:	4618      	mov	r0, r3
 8006996:	3730      	adds	r7, #48	@ 0x30
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	@ 0x38
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	623b      	str	r3, [r7, #32]
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	61fb      	str	r3, [r7, #28]
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f4:	f001 f942 	bl	8007c7c <xTaskGetSchedulerState>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <xQueueSemaphoreTake+0x64>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <xQueueSemaphoreTake+0x68>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <xQueueSemaphoreTake+0x6a>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	61bb      	str	r3, [r7, #24]
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a26:	f001 fc7f 	bl	8008328 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d024      	beq.n	8006a80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a46:	f001 fac5 	bl	8007fd4 <pvTaskIncrementMutexHeldCount>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00f      	beq.n	8006a78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	3310      	adds	r3, #16
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 ff47 	bl	80078f0 <xTaskRemoveFromEventList>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a68:	4b54      	ldr	r3, [pc, #336]	@ (8006bbc <xQueueSemaphoreTake+0x21c>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a78:	f001 fc88 	bl	800838c <vPortExitCritical>
				return pdPASS;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e098      	b.n	8006bb2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d112      	bne.n	8006aac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	617b      	str	r3, [r7, #20]
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006aa4:	f001 fc72 	bl	800838c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e082      	b.n	8006bb2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 ff7e 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ac0:	f001 fc64 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ac4:	f000 fd02 	bl	80074cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ac8:	f001 fc2e 	bl	8008328 <vPortEnterCritical>
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d103      	bne.n	8006ae2 <xQueueSemaphoreTake+0x142>
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d103      	bne.n	8006af8 <xQueueSemaphoreTake+0x158>
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006af8:	f001 fc48 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006afc:	463a      	mov	r2, r7
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	4611      	mov	r1, r2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 ff6d 	bl	80079e4 <xTaskCheckForTimeOut>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d132      	bne.n	8006b76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b12:	f000 fa33 	bl	8006f7c <prvIsQueueEmpty>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d026      	beq.n	8006b6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d109      	bne.n	8006b38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b24:	f001 fc00 	bl	8008328 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f8c3 	bl	8007cb8 <xTaskPriorityInherit>
 8006b32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b34:	f001 fc2a 	bl	800838c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	3324      	adds	r3, #36	@ 0x24
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 feaf 	bl	80078a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b48:	f000 f9c6 	bl	8006ed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b4c:	f000 fccc 	bl	80074e8 <xTaskResumeAll>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f af67 	bne.w	8006a26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b58:	4b18      	ldr	r3, [pc, #96]	@ (8006bbc <xQueueSemaphoreTake+0x21c>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	e75d      	b.n	8006a26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b6c:	f000 f9b4 	bl	8006ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b70:	f000 fcba 	bl	80074e8 <xTaskResumeAll>
 8006b74:	e757      	b.n	8006a26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b78:	f000 f9ae 	bl	8006ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b7c:	f000 fcb4 	bl	80074e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b82:	f000 f9fb 	bl	8006f7c <prvIsQueueEmpty>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f43f af4c 	beq.w	8006a26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00d      	beq.n	8006bb0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b94:	f001 fbc8 	bl	8008328 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b9a:	f000 f8f5 	bl	8006d88 <prvGetDisinheritPriorityAfterTimeout>
 8006b9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 f984 	bl	8007eb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bac:	f001 fbee 	bl	800838c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3738      	adds	r7, #56	@ 0x38
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	@ 0x38
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	623b      	str	r3, [r7, #32]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueReceiveFromISR+0x3c>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <xQueueReceiveFromISR+0x40>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <xQueueReceiveFromISR+0x42>
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	61fb      	str	r3, [r7, #28]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c1e:	f001 fc63 	bl	80084e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c22:	f3ef 8211 	mrs	r2, BASEPRI
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61ba      	str	r2, [r7, #24]
 8006c38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02f      	beq.n	8006caa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c58:	f000 f918 	bl	8006e8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d112      	bne.n	8006c94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	3310      	adds	r3, #16
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fe38 	bl	80078f0 <xTaskRemoveFromEventList>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e007      	b.n	8006ca4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c98:	3301      	adds	r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	b25a      	sxtb	r2, r3
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca8:	e001      	b.n	8006cae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
}
 8006cb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3738      	adds	r7, #56	@ 0x38
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10b      	bne.n	8006cea <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	60bb      	str	r3, [r7, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	e7fd      	b.n	8006ce6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006cea:	f001 fb1d 	bl	8008328 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006cf4:	f001 fb4a 	bl	800838c <vPortExitCritical>

	return uxReturn;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10b      	bne.n	8006d2c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006d32:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <vQueueDelete+0x2a>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60bb      	str	r3, [r7, #8]
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f934 	bl	8006fd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 fcc4 	bl	8008708 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1c3 0307 	rsb	r3, r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e001      	b.n	8006daa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006daa:	68fb      	ldr	r3, [r7, #12]
	}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d14d      	bne.n	8006e7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 ffde 	bl	8007da4 <xTaskPriorityDisinherit>
 8006de8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	e043      	b.n	8006e7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d119      	bne.n	8006e2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6858      	ldr	r0, [r3, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	461a      	mov	r2, r3
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	f00f fb5f 	bl	80164c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d32b      	bcc.n	8006e7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	e026      	b.n	8006e7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68d8      	ldr	r0, [r3, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	461a      	mov	r2, r3
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	f00f fb45 	bl	80164c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	425b      	negs	r3, r3
 8006e46:	441a      	add	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d207      	bcs.n	8006e68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	425b      	negs	r3, r3
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d105      	bne.n	8006e7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e82:	697b      	ldr	r3, [r7, #20]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d018      	beq.n	8006ed0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	441a      	add	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d303      	bcc.n	8006ec0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68d9      	ldr	r1, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6838      	ldr	r0, [r7, #0]
 8006ecc:	f00f fafb 	bl	80164c6 <memcpy>
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ee0:	f001 fa22 	bl	8008328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eec:	e011      	b.n	8006f12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d012      	beq.n	8006f1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3324      	adds	r3, #36	@ 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fcf8 	bl	80078f0 <xTaskRemoveFromEventList>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f06:	f000 fdd1 	bl	8007aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dce9      	bgt.n	8006eee <prvUnlockQueue+0x16>
 8006f1a:	e000      	b.n	8006f1e <prvUnlockQueue+0x46>
					break;
 8006f1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	22ff      	movs	r2, #255	@ 0xff
 8006f22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f26:	f001 fa31 	bl	800838c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f2a:	f001 f9fd 	bl	8008328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f36:	e011      	b.n	8006f5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3310      	adds	r3, #16
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fcd3 	bl	80078f0 <xTaskRemoveFromEventList>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f50:	f000 fdac 	bl	8007aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dce9      	bgt.n	8006f38 <prvUnlockQueue+0x60>
 8006f64:	e000      	b.n	8006f68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	22ff      	movs	r2, #255	@ 0xff
 8006f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f70:	f001 fa0c 	bl	800838c <vPortExitCritical>
}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f84:	f001 f9d0 	bl	8008328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d102      	bne.n	8006f96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e001      	b.n	8006f9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f9a:	f001 f9f7 	bl	800838c <vPortExitCritical>

	return xReturn;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fb0:	f001 f9ba 	bl	8008328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d102      	bne.n	8006fc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e001      	b.n	8006fca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fca:	f001 f9df 	bl	800838c <vPortExitCritical>

	return xReturn;
 8006fce:	68fb      	ldr	r3, [r7, #12]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e016      	b.n	8007014 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fe6:	4a10      	ldr	r2, [pc, #64]	@ (8007028 <vQueueUnregisterQueue+0x50>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d10b      	bne.n	800700e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8007028 <vQueueUnregisterQueue+0x50>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007000:	4a09      	ldr	r2, [pc, #36]	@ (8007028 <vQueueUnregisterQueue+0x50>)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	2200      	movs	r2, #0
 800700a:	605a      	str	r2, [r3, #4]
				break;
 800700c:	e006      	b.n	800701c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b07      	cmp	r3, #7
 8007018:	d9e5      	bls.n	8006fe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	2000544c 	.word	0x2000544c

0800702c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08e      	sub	sp, #56	@ 0x38
 8007030:	af04      	add	r7, sp, #16
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800703a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	623b      	str	r3, [r7, #32]
}
 8007052:	bf00      	nop
 8007054:	bf00      	nop
 8007056:	e7fd      	b.n	8007054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10b      	bne.n	8007076 <xTaskCreateStatic+0x4a>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	61fb      	str	r3, [r7, #28]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007076:	23a0      	movs	r3, #160	@ 0xa0
 8007078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2ba0      	cmp	r3, #160	@ 0xa0
 800707e:	d00b      	beq.n	8007098 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	61bb      	str	r3, [r7, #24]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007098:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01e      	beq.n	80070de <xTaskCreateStatic+0xb2>
 80070a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01b      	beq.n	80070de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070b8:	2300      	movs	r3, #0
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f851 	bl	8007178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070d8:	f000 f8ee 	bl	80072b8 <prvAddNewTaskToReadyList>
 80070dc:	e001      	b.n	80070e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070e2:	697b      	ldr	r3, [r7, #20]
	}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	@ 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08c      	sub	sp, #48	@ 0x30
 80070f0:	af04      	add	r7, sp, #16
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fa33 	bl	800856c <pvPortMalloc>
 8007106:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800710e:	20a0      	movs	r0, #160	@ 0xa0
 8007110:	f001 fa2c 	bl	800856c <pvPortMalloc>
 8007114:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
 8007122:	e005      	b.n	8007130 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007124:	6978      	ldr	r0, [r7, #20]
 8007126:	f001 faef 	bl	8008708 <vPortFree>
 800712a:	e001      	b.n	8007130 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d017      	beq.n	8007166 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	2300      	movs	r3, #0
 8007142:	9303      	str	r3, [sp, #12]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	9302      	str	r3, [sp, #8]
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f80f 	bl	8007178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800715a:	69f8      	ldr	r0, [r7, #28]
 800715c:	f000 f8ac 	bl	80072b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007160:	2301      	movs	r3, #1
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	e002      	b.n	800716c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800716c:	69bb      	ldr	r3, [r7, #24]
	}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007190:	3b01      	subs	r3, #1
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	617b      	str	r3, [r7, #20]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01f      	beq.n	8007208 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e012      	b.n	80071f4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4413      	add	r3, r2
 80071d4:	7819      	ldrb	r1, [r3, #0]
 80071d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	3334      	adds	r3, #52	@ 0x34
 80071de:	460a      	mov	r2, r1
 80071e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3301      	adds	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d9e9      	bls.n	80071ce <prvInitialiseNewTask+0x56>
 80071fa:	e000      	b.n	80071fe <prvInitialiseNewTask+0x86>
			{
				break;
 80071fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007206:	e003      	b.n	8007210 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	2b06      	cmp	r3, #6
 8007214:	d901      	bls.n	800721a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007216:	2306      	movs	r3, #6
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800721e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2200      	movs	r2, #0
 800722a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	3304      	adds	r3, #4
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fe80 	bl	8005f36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	3318      	adds	r3, #24
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fe7b 	bl	8005f36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007244:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007248:	f1c3 0207 	rsb	r2, r3, #7
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007254:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	2200      	movs	r2, #0
 8007262:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	334c      	adds	r3, #76	@ 0x4c
 800726a:	224c      	movs	r2, #76	@ 0x4c
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f00f f85d 	bl	801632e <memset>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	4a0d      	ldr	r2, [pc, #52]	@ (80072ac <prvInitialiseNewTask+0x134>)
 8007278:	651a      	str	r2, [r3, #80]	@ 0x50
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	4a0c      	ldr	r2, [pc, #48]	@ (80072b0 <prvInitialiseNewTask+0x138>)
 800727e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	4a0c      	ldr	r2, [pc, #48]	@ (80072b4 <prvInitialiseNewTask+0x13c>)
 8007284:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f000 ff1c 	bl	80080c8 <pxPortInitialiseStack>
 8007290:	4602      	mov	r2, r0
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000ec9c 	.word	0x2000ec9c
 80072b0:	2000ed04 	.word	0x2000ed04
 80072b4:	2000ed6c 	.word	0x2000ed6c

080072b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072c0:	f001 f832 	bl	8008328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	4a29      	ldr	r2, [pc, #164]	@ (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072ce:	4b29      	ldr	r3, [pc, #164]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072d6:	4a27      	ldr	r2, [pc, #156]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072dc:	4b24      	ldr	r3, [pc, #144]	@ (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072e4:	f000 fc06 	bl	8007af4 <prvInitialiseTaskLists>
 80072e8:	e00d      	b.n	8007306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072ea:	4b23      	ldr	r3, [pc, #140]	@ (8007378 <prvAddNewTaskToReadyList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072f2:	4b20      	ldr	r3, [pc, #128]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d802      	bhi.n	8007306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007300:	4a1c      	ldr	r2, [pc, #112]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007306:	4b1d      	ldr	r3, [pc, #116]	@ (800737c <prvAddNewTaskToReadyList+0xc4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	4a1b      	ldr	r2, [pc, #108]	@ (800737c <prvAddNewTaskToReadyList+0xc4>)
 800730e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	2201      	movs	r2, #1
 8007316:	409a      	lsls	r2, r3
 8007318:	4b19      	ldr	r3, [pc, #100]	@ (8007380 <prvAddNewTaskToReadyList+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	4a18      	ldr	r2, [pc, #96]	@ (8007380 <prvAddNewTaskToReadyList+0xc8>)
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <prvAddNewTaskToReadyList+0xcc>)
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f7fe fe09 	bl	8005f50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733e:	f001 f825 	bl	800838c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <prvAddNewTaskToReadyList+0xc0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800734a:	4b0a      	ldr	r3, [pc, #40]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d207      	bcs.n	8007368 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007358:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <prvAddNewTaskToReadyList+0xd0>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	2000558c 	.word	0x2000558c
 8007374:	2000548c 	.word	0x2000548c
 8007378:	20005598 	.word	0x20005598
 800737c:	200055a8 	.word	0x200055a8
 8007380:	20005594 	.word	0x20005594
 8007384:	20005490 	.word	0x20005490
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d018      	beq.n	80073d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800739e:	4b14      	ldr	r3, [pc, #80]	@ (80073f0 <vTaskDelay+0x64>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <vTaskDelay+0x32>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073be:	f000 f885 	bl	80074cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c2:	2100      	movs	r1, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fe19 	bl	8007ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073ca:	f000 f88d 	bl	80074e8 <xTaskResumeAll>
 80073ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80073d6:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <vTaskDelay+0x68>)
 80073d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200055b4 	.word	0x200055b4
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	@ 0x28
 80073fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007406:	463a      	mov	r2, r7
 8007408:	1d39      	adds	r1, r7, #4
 800740a:	f107 0308 	add.w	r3, r7, #8
 800740e:	4618      	mov	r0, r3
 8007410:	f7f9 f8be 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	9202      	str	r2, [sp, #8]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	2300      	movs	r3, #0
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2300      	movs	r3, #0
 8007424:	460a      	mov	r2, r1
 8007426:	4921      	ldr	r1, [pc, #132]	@ (80074ac <vTaskStartScheduler+0xb4>)
 8007428:	4821      	ldr	r0, [pc, #132]	@ (80074b0 <vTaskStartScheduler+0xb8>)
 800742a:	f7ff fdff 	bl	800702c <xTaskCreateStatic>
 800742e:	4603      	mov	r3, r0
 8007430:	4a20      	ldr	r2, [pc, #128]	@ (80074b4 <vTaskStartScheduler+0xbc>)
 8007432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007434:	4b1f      	ldr	r3, [pc, #124]	@ (80074b4 <vTaskStartScheduler+0xbc>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e001      	b.n	8007446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d11b      	bne.n	8007484 <vTaskStartScheduler+0x8c>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	613b      	str	r3, [r7, #16]
}
 800745e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007460:	4b15      	ldr	r3, [pc, #84]	@ (80074b8 <vTaskStartScheduler+0xc0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	334c      	adds	r3, #76	@ 0x4c
 8007466:	4a15      	ldr	r2, [pc, #84]	@ (80074bc <vTaskStartScheduler+0xc4>)
 8007468:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800746a:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <vTaskStartScheduler+0xc8>)
 800746c:	f04f 32ff 	mov.w	r2, #4294967295
 8007470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007472:	4b14      	ldr	r3, [pc, #80]	@ (80074c4 <vTaskStartScheduler+0xcc>)
 8007474:	2201      	movs	r2, #1
 8007476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007478:	4b13      	ldr	r3, [pc, #76]	@ (80074c8 <vTaskStartScheduler+0xd0>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800747e:	f000 feaf 	bl	80081e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007482:	e00f      	b.n	80074a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748a:	d10b      	bne.n	80074a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60fb      	str	r3, [r7, #12]
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	e7fd      	b.n	80074a0 <vTaskStartScheduler+0xa8>
}
 80074a4:	bf00      	nop
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	0801774c 	.word	0x0801774c
 80074b0:	08007ac5 	.word	0x08007ac5
 80074b4:	200055b0 	.word	0x200055b0
 80074b8:	2000548c 	.word	0x2000548c
 80074bc:	2000013c 	.word	0x2000013c
 80074c0:	200055ac 	.word	0x200055ac
 80074c4:	20005598 	.word	0x20005598
 80074c8:	20005590 	.word	0x20005590

080074cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074d0:	4b04      	ldr	r3, [pc, #16]	@ (80074e4 <vTaskSuspendAll+0x18>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3301      	adds	r3, #1
 80074d6:	4a03      	ldr	r2, [pc, #12]	@ (80074e4 <vTaskSuspendAll+0x18>)
 80074d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	200055b4 	.word	0x200055b4

080074e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074f6:	4b42      	ldr	r3, [pc, #264]	@ (8007600 <xTaskResumeAll+0x118>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <xTaskResumeAll+0x2e>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	603b      	str	r3, [r7, #0]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007516:	f000 ff07 	bl	8008328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800751a:	4b39      	ldr	r3, [pc, #228]	@ (8007600 <xTaskResumeAll+0x118>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	4a37      	ldr	r2, [pc, #220]	@ (8007600 <xTaskResumeAll+0x118>)
 8007522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007524:	4b36      	ldr	r3, [pc, #216]	@ (8007600 <xTaskResumeAll+0x118>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d161      	bne.n	80075f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800752c:	4b35      	ldr	r3, [pc, #212]	@ (8007604 <xTaskResumeAll+0x11c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d05d      	beq.n	80075f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007534:	e02e      	b.n	8007594 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007536:	4b34      	ldr	r3, [pc, #208]	@ (8007608 <xTaskResumeAll+0x120>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3318      	adds	r3, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fd61 	bl	800600a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fd5c 	bl	800600a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	2201      	movs	r2, #1
 8007558:	409a      	lsls	r2, r3
 800755a:	4b2c      	ldr	r3, [pc, #176]	@ (800760c <xTaskResumeAll+0x124>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4313      	orrs	r3, r2
 8007560:	4a2a      	ldr	r2, [pc, #168]	@ (800760c <xTaskResumeAll+0x124>)
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4a27      	ldr	r2, [pc, #156]	@ (8007610 <xTaskResumeAll+0x128>)
 8007572:	441a      	add	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fe fce8 	bl	8005f50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007584:	4b23      	ldr	r3, [pc, #140]	@ (8007614 <xTaskResumeAll+0x12c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800758e:	4b22      	ldr	r3, [pc, #136]	@ (8007618 <xTaskResumeAll+0x130>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007594:	4b1c      	ldr	r3, [pc, #112]	@ (8007608 <xTaskResumeAll+0x120>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1cc      	bne.n	8007536 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075a2:	f000 fb4b 	bl	8007c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075a6:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <xTaskResumeAll+0x134>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d010      	beq.n	80075d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075b2:	f000 f859 	bl	8007668 <xTaskIncrementTick>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075bc:	4b16      	ldr	r3, [pc, #88]	@ (8007618 <xTaskResumeAll+0x130>)
 80075be:	2201      	movs	r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f1      	bne.n	80075b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80075ce:	4b13      	ldr	r3, [pc, #76]	@ (800761c <xTaskResumeAll+0x134>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075d4:	4b10      	ldr	r3, [pc, #64]	@ (8007618 <xTaskResumeAll+0x130>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007620 <xTaskResumeAll+0x138>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075f0:	f000 fecc 	bl	800838c <vPortExitCritical>

	return xAlreadyYielded;
 80075f4:	68bb      	ldr	r3, [r7, #8]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200055b4 	.word	0x200055b4
 8007604:	2000558c 	.word	0x2000558c
 8007608:	2000554c 	.word	0x2000554c
 800760c:	20005594 	.word	0x20005594
 8007610:	20005490 	.word	0x20005490
 8007614:	2000548c 	.word	0x2000548c
 8007618:	200055a0 	.word	0x200055a0
 800761c:	2000559c 	.word	0x2000559c
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800762a:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <xTaskGetTickCount+0x1c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007630:	687b      	ldr	r3, [r7, #4]
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20005590 	.word	0x20005590

08007644 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800764a:	f000 ff4d 	bl	80084e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007652:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <xTaskGetTickCountFromISR+0x20>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007658:	683b      	ldr	r3, [r7, #0]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20005590 	.word	0x20005590

08007668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007672:	4b4f      	ldr	r3, [pc, #316]	@ (80077b0 <xTaskIncrementTick+0x148>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 808f 	bne.w	800779a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800767c:	4b4d      	ldr	r3, [pc, #308]	@ (80077b4 <xTaskIncrementTick+0x14c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007684:	4a4b      	ldr	r2, [pc, #300]	@ (80077b4 <xTaskIncrementTick+0x14c>)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d121      	bne.n	80076d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007690:	4b49      	ldr	r3, [pc, #292]	@ (80077b8 <xTaskIncrementTick+0x150>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <xTaskIncrementTick+0x46>
 80076b2:	4b41      	ldr	r3, [pc, #260]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	4b40      	ldr	r3, [pc, #256]	@ (80077bc <xTaskIncrementTick+0x154>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3e      	ldr	r2, [pc, #248]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	4a3e      	ldr	r2, [pc, #248]	@ (80077bc <xTaskIncrementTick+0x154>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b3e      	ldr	r3, [pc, #248]	@ (80077c0 <xTaskIncrementTick+0x158>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	4a3c      	ldr	r2, [pc, #240]	@ (80077c0 <xTaskIncrementTick+0x158>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	f000 fab4 	bl	8007c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076d4:	4b3b      	ldr	r3, [pc, #236]	@ (80077c4 <xTaskIncrementTick+0x15c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d348      	bcc.n	8007770 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076de:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <xTaskIncrementTick+0x15c>)
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	601a      	str	r2, [r3, #0]
					break;
 80076f0:	e03e      	b.n	8007770 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f2:	4b31      	ldr	r3, [pc, #196]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d203      	bcs.n	8007712 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800770a:	4a2e      	ldr	r2, [pc, #184]	@ (80077c4 <xTaskIncrementTick+0x15c>)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007710:	e02e      	b.n	8007770 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3304      	adds	r3, #4
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fc77 	bl	800600a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3318      	adds	r3, #24
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fc6e 	bl	800600a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	2201      	movs	r2, #1
 8007734:	409a      	lsls	r2, r3
 8007736:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <xTaskIncrementTick+0x160>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4313      	orrs	r3, r2
 800773c:	4a22      	ldr	r2, [pc, #136]	@ (80077c8 <xTaskIncrementTick+0x160>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a1f      	ldr	r2, [pc, #124]	@ (80077cc <xTaskIncrementTick+0x164>)
 800774e:	441a      	add	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fbfa 	bl	8005f50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007760:	4b1b      	ldr	r3, [pc, #108]	@ (80077d0 <xTaskIncrementTick+0x168>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	429a      	cmp	r2, r3
 8007768:	d3b9      	bcc.n	80076de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800776a:	2301      	movs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800776e:	e7b6      	b.n	80076de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007770:	4b17      	ldr	r3, [pc, #92]	@ (80077d0 <xTaskIncrementTick+0x168>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	4915      	ldr	r1, [pc, #84]	@ (80077cc <xTaskIncrementTick+0x164>)
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d901      	bls.n	800778c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800778c:	4b11      	ldr	r3, [pc, #68]	@ (80077d4 <xTaskIncrementTick+0x16c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e004      	b.n	80077a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800779a:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <xTaskIncrementTick+0x170>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	4a0d      	ldr	r2, [pc, #52]	@ (80077d8 <xTaskIncrementTick+0x170>)
 80077a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077a4:	697b      	ldr	r3, [r7, #20]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200055b4 	.word	0x200055b4
 80077b4:	20005590 	.word	0x20005590
 80077b8:	20005544 	.word	0x20005544
 80077bc:	20005548 	.word	0x20005548
 80077c0:	200055a4 	.word	0x200055a4
 80077c4:	200055ac 	.word	0x200055ac
 80077c8:	20005594 	.word	0x20005594
 80077cc:	20005490 	.word	0x20005490
 80077d0:	2000548c 	.word	0x2000548c
 80077d4:	200055a0 	.word	0x200055a0
 80077d8:	2000559c 	.word	0x2000559c

080077dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077e2:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <vTaskSwitchContext+0xb0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077ea:	4b29      	ldr	r3, [pc, #164]	@ (8007890 <vTaskSwitchContext+0xb4>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077f0:	e045      	b.n	800787e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80077f2:	4b27      	ldr	r3, [pc, #156]	@ (8007890 <vTaskSwitchContext+0xb4>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <vTaskSwitchContext+0xb8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	fab3 f383 	clz	r3, r3
 8007804:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	f1c3 031f 	rsb	r3, r3, #31
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <vTaskSwitchContext+0xbc>)
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	607b      	str	r3, [r7, #4]
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	e7fd      	b.n	8007836 <vTaskSwitchContext+0x5a>
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a14      	ldr	r2, [pc, #80]	@ (8007898 <vTaskSwitchContext+0xbc>)
 8007846:	4413      	add	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3308      	adds	r3, #8
 800785c:	429a      	cmp	r2, r3
 800785e:	d104      	bne.n	800786a <vTaskSwitchContext+0x8e>
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	605a      	str	r2, [r3, #4]
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	4a0a      	ldr	r2, [pc, #40]	@ (800789c <vTaskSwitchContext+0xc0>)
 8007872:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007874:	4b09      	ldr	r3, [pc, #36]	@ (800789c <vTaskSwitchContext+0xc0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	334c      	adds	r3, #76	@ 0x4c
 800787a:	4a09      	ldr	r2, [pc, #36]	@ (80078a0 <vTaskSwitchContext+0xc4>)
 800787c:	6013      	str	r3, [r2, #0]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200055b4 	.word	0x200055b4
 8007890:	200055a0 	.word	0x200055a0
 8007894:	20005594 	.word	0x20005594
 8007898:	20005490 	.word	0x20005490
 800789c:	2000548c 	.word	0x2000548c
 80078a0:	2000013c 	.word	0x2000013c

080078a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10b      	bne.n	80078cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60fb      	str	r3, [r7, #12]
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	e7fd      	b.n	80078c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078cc:	4b07      	ldr	r3, [pc, #28]	@ (80078ec <vTaskPlaceOnEventList+0x48>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fe fb5f 	bl	8005f98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078da:	2101      	movs	r1, #1
 80078dc:	6838      	ldr	r0, [r7, #0]
 80078de:	f000 fb8d 	bl	8007ffc <prvAddCurrentTaskToDelayedList>
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	2000548c 	.word	0x2000548c

080078f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60fb      	str	r3, [r7, #12]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3318      	adds	r3, #24
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fb71 	bl	800600a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007928:	4b1d      	ldr	r3, [pc, #116]	@ (80079a0 <xTaskRemoveFromEventList+0xb0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d11c      	bne.n	800796a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fb68 	bl	800600a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	2201      	movs	r2, #1
 8007940:	409a      	lsls	r2, r3
 8007942:	4b18      	ldr	r3, [pc, #96]	@ (80079a4 <xTaskRemoveFromEventList+0xb4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4313      	orrs	r3, r2
 8007948:	4a16      	ldr	r2, [pc, #88]	@ (80079a4 <xTaskRemoveFromEventList+0xb4>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a13      	ldr	r2, [pc, #76]	@ (80079a8 <xTaskRemoveFromEventList+0xb8>)
 800795a:	441a      	add	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe faf4 	bl	8005f50 <vListInsertEnd>
 8007968:	e005      	b.n	8007976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3318      	adds	r3, #24
 800796e:	4619      	mov	r1, r3
 8007970:	480e      	ldr	r0, [pc, #56]	@ (80079ac <xTaskRemoveFromEventList+0xbc>)
 8007972:	f7fe faed 	bl	8005f50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <xTaskRemoveFromEventList+0xc0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d905      	bls.n	8007990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007988:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <xTaskRemoveFromEventList+0xc4>)
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e001      	b.n	8007994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007994:	697b      	ldr	r3, [r7, #20]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	200055b4 	.word	0x200055b4
 80079a4:	20005594 	.word	0x20005594
 80079a8:	20005490 	.word	0x20005490
 80079ac:	2000554c 	.word	0x2000554c
 80079b0:	2000548c 	.word	0x2000548c
 80079b4:	200055a0 	.word	0x200055a0

080079b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <vTaskInternalSetTimeOutState+0x24>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079c8:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <vTaskInternalSetTimeOutState+0x28>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	200055a4 	.word	0x200055a4
 80079e0:	20005590 	.word	0x20005590

080079e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60fb      	str	r3, [r7, #12]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a2a:	f000 fc7d 	bl	8008328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa4 <xTaskCheckForTimeOut+0xc0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d102      	bne.n	8007a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e023      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b15      	ldr	r3, [pc, #84]	@ (8007aa8 <xTaskCheckForTimeOut+0xc4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d007      	beq.n	8007a6a <xTaskCheckForTimeOut+0x86>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e015      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d20b      	bcs.n	8007a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff99 	bl	80079b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e004      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f000 fc79 	bl	800838c <vPortExitCritical>

	return xReturn;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20005590 	.word	0x20005590
 8007aa8:	200055a4 	.word	0x200055a4

08007aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ab0:	4b03      	ldr	r3, [pc, #12]	@ (8007ac0 <vTaskMissedYield+0x14>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200055a0 	.word	0x200055a0

08007ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007acc:	f000 f852 	bl	8007b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ad0:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <prvIdleTask+0x28>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d9f9      	bls.n	8007acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <prvIdleTask+0x2c>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae8:	e7f0      	b.n	8007acc <prvIdleTask+0x8>
 8007aea:	bf00      	nop
 8007aec:	20005490 	.word	0x20005490
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afa:	2300      	movs	r3, #0
 8007afc:	607b      	str	r3, [r7, #4]
 8007afe:	e00c      	b.n	8007b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a12      	ldr	r2, [pc, #72]	@ (8007b54 <prvInitialiseTaskLists+0x60>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe f9f1 	bl	8005ef6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3301      	adds	r3, #1
 8007b18:	607b      	str	r3, [r7, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d9ef      	bls.n	8007b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b20:	480d      	ldr	r0, [pc, #52]	@ (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b22:	f7fe f9e8 	bl	8005ef6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b26:	480d      	ldr	r0, [pc, #52]	@ (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b28:	f7fe f9e5 	bl	8005ef6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b2c:	480c      	ldr	r0, [pc, #48]	@ (8007b60 <prvInitialiseTaskLists+0x6c>)
 8007b2e:	f7fe f9e2 	bl	8005ef6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b32:	480c      	ldr	r0, [pc, #48]	@ (8007b64 <prvInitialiseTaskLists+0x70>)
 8007b34:	f7fe f9df 	bl	8005ef6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b38:	480b      	ldr	r0, [pc, #44]	@ (8007b68 <prvInitialiseTaskLists+0x74>)
 8007b3a:	f7fe f9dc 	bl	8005ef6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <prvInitialiseTaskLists+0x78>)
 8007b40:	4a05      	ldr	r2, [pc, #20]	@ (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <prvInitialiseTaskLists+0x7c>)
 8007b46:	4a05      	ldr	r2, [pc, #20]	@ (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20005490 	.word	0x20005490
 8007b58:	2000551c 	.word	0x2000551c
 8007b5c:	20005530 	.word	0x20005530
 8007b60:	2000554c 	.word	0x2000554c
 8007b64:	20005560 	.word	0x20005560
 8007b68:	20005578 	.word	0x20005578
 8007b6c:	20005544 	.word	0x20005544
 8007b70:	20005548 	.word	0x20005548

08007b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7a:	e019      	b.n	8007bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b7c:	f000 fbd4 	bl	8008328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b80:	4b10      	ldr	r3, [pc, #64]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x50>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fa3c 	bl	800600a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ba6:	f000 fbf1 	bl	800838c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f810 	bl	8007bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb0:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e1      	bne.n	8007b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20005560 	.word	0x20005560
 8007bc8:	2000558c 	.word	0x2000558c
 8007bcc:	20005574 	.word	0x20005574

08007bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	334c      	adds	r3, #76	@ 0x4c
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f00e fbbf 	bl	8016360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d108      	bne.n	8007bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fd89 	bl	8008708 <vPortFree>
				vPortFree( pxTCB );
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fd86 	bl	8008708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bfc:	e019      	b.n	8007c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d103      	bne.n	8007c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fd7d 	bl	8008708 <vPortFree>
	}
 8007c0e:	e010      	b.n	8007c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d00b      	beq.n	8007c32 <prvDeleteTCB+0x62>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	60fb      	str	r3, [r7, #12]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <prvDeleteTCB+0x5e>
	}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c42:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <prvResetNextTaskUnblockTime+0x38>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <prvResetNextTaskUnblockTime+0x3c>)
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c54:	e008      	b.n	8007c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c56:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <prvResetNextTaskUnblockTime+0x38>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	4a04      	ldr	r2, [pc, #16]	@ (8007c78 <prvResetNextTaskUnblockTime+0x3c>)
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	20005544 	.word	0x20005544
 8007c78:	200055ac 	.word	0x200055ac

08007c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c82:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <xTaskGetSchedulerState+0x34>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	e008      	b.n	8007ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <xTaskGetSchedulerState+0x38>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	e001      	b.n	8007ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ca2:	687b      	ldr	r3, [r7, #4]
	}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20005598 	.word	0x20005598
 8007cb4:	200055b4 	.word	0x200055b4

08007cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d05e      	beq.n	8007d8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd2:	4b31      	ldr	r3, [pc, #196]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d24e      	bcs.n	8007d7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	db06      	blt.n	8007cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	f1c3 0207 	rsb	r2, r3, #7
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6959      	ldr	r1, [r3, #20]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4a26      	ldr	r2, [pc, #152]	@ (8007d9c <xTaskPriorityInherit+0xe4>)
 8007d04:	4413      	add	r3, r2
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d12f      	bne.n	8007d6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f97b 	bl	800600a <uxListRemove>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	2201      	movs	r2, #1
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43da      	mvns	r2, r3
 8007d26:	4b1e      	ldr	r3, [pc, #120]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d30:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	2201      	movs	r2, #1
 8007d40:	409a      	lsls	r2, r3
 8007d42:	4b17      	ldr	r3, [pc, #92]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	4a15      	ldr	r2, [pc, #84]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4a10      	ldr	r2, [pc, #64]	@ (8007d9c <xTaskPriorityInherit+0xe4>)
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fe f8f4 	bl	8005f50 <vListInsertEnd>
 8007d68:	e004      	b.n	8007d74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e008      	b.n	8007d8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d201      	bcs.n	8007d8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000548c 	.word	0x2000548c
 8007d9c:	20005490 	.word	0x20005490
 8007da0:	20005594 	.word	0x20005594

08007da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d070      	beq.n	8007e9c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dba:	4b3b      	ldr	r3, [pc, #236]	@ (8007ea8 <xTaskPriorityDisinherit+0x104>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d00b      	beq.n	8007ddc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60fb      	str	r3, [r7, #12]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60bb      	str	r3, [r7, #8]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d044      	beq.n	8007e9c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d140      	bne.n	8007e9c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe f8f3 	bl	800600a <uxListRemove>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d115      	bne.n	8007e56 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2e:	491f      	ldr	r1, [pc, #124]	@ (8007eac <xTaskPriorityDisinherit+0x108>)
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xTaskPriorityDisinherit+0xb2>
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43da      	mvns	r2, r3
 8007e4c:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4013      	ands	r3, r2
 8007e52:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e62:	f1c3 0207 	rsb	r2, r3, #7
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	2201      	movs	r2, #1
 8007e70:	409a      	lsls	r2, r3
 8007e72:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	4a0d      	ldr	r2, [pc, #52]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4a08      	ldr	r2, [pc, #32]	@ (8007eac <xTaskPriorityDisinherit+0x108>)
 8007e8a:	441a      	add	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe f85c 	bl	8005f50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e9c:	697b      	ldr	r3, [r7, #20]
	}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	2000548c 	.word	0x2000548c
 8007eac:	20005490 	.word	0x20005490
 8007eb0:	20005594 	.word	0x20005594

08007eb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d079      	beq.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d902      	bls.n	8007efc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	e002      	b.n	8007f02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d059      	beq.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d154      	bne.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f16:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d10b      	bne.n	8007f38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60bb      	str	r3, [r7, #8]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	db04      	blt.n	8007f56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f1c3 0207 	rsb	r2, r3, #7
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	6959      	ldr	r1, [r3, #20]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4a19      	ldr	r2, [pc, #100]	@ (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f66:	4413      	add	r3, r2
 8007f68:	4299      	cmp	r1, r3
 8007f6a:	d129      	bne.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe f84a 	bl	800600a <uxListRemove>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	2201      	movs	r2, #1
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43da      	mvns	r2, r3
 8007f88:	4b11      	ldr	r3, [pc, #68]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	4a10      	ldr	r2, [pc, #64]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007f90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	2201      	movs	r2, #1
 8007f98:	409a      	lsls	r2, r3
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4a06      	ldr	r2, [pc, #24]	@ (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fb2:	441a      	add	r2, r3
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fd ffc8 	bl	8005f50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fc0:	bf00      	nop
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	2000548c 	.word	0x2000548c
 8007fcc:	20005490 	.word	0x20005490
 8007fd0:	20005594 	.word	0x20005594

08007fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fd8:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007fea:	4b03      	ldr	r3, [pc, #12]	@ (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fec:	681b      	ldr	r3, [r3, #0]
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	2000548c 	.word	0x2000548c

08007ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008006:	4b29      	ldr	r3, [pc, #164]	@ (80080ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800800c:	4b28      	ldr	r3, [pc, #160]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd fff9 	bl	800600a <uxListRemove>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10b      	bne.n	8008036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800801e:	4b24      	ldr	r3, [pc, #144]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	2201      	movs	r2, #1
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	43da      	mvns	r2, r3
 800802c:	4b21      	ldr	r3, [pc, #132]	@ (80080b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4013      	ands	r3, r2
 8008032:	4a20      	ldr	r2, [pc, #128]	@ (80080b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d10a      	bne.n	8008054 <prvAddCurrentTaskToDelayedList+0x58>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008044:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	481a      	ldr	r0, [pc, #104]	@ (80080b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800804e:	f7fd ff7f 	bl	8005f50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008052:	e026      	b.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800805c:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	429a      	cmp	r2, r3
 800806a:	d209      	bcs.n	8008080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806c:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3304      	adds	r3, #4
 8008076:	4619      	mov	r1, r3
 8008078:	4610      	mov	r0, r2
 800807a:	f7fd ff8d 	bl	8005f98 <vListInsert>
}
 800807e:	e010      	b.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008080:	4b0f      	ldr	r3, [pc, #60]	@ (80080c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4b0a      	ldr	r3, [pc, #40]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fd ff83 	bl	8005f98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	429a      	cmp	r2, r3
 800809a:	d202      	bcs.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800809c:	4a09      	ldr	r2, [pc, #36]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6013      	str	r3, [r2, #0]
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20005590 	.word	0x20005590
 80080b0:	2000548c 	.word	0x2000548c
 80080b4:	20005594 	.word	0x20005594
 80080b8:	20005578 	.word	0x20005578
 80080bc:	20005548 	.word	0x20005548
 80080c0:	20005544 	.word	0x20005544
 80080c4:	200055ac 	.word	0x200055ac

080080c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f023 0201 	bic.w	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b04      	subs	r3, #4
 80080f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f8:	4a0c      	ldr	r2, [pc, #48]	@ (800812c <pxPortInitialiseStack+0x64>)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b14      	subs	r3, #20
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b04      	subs	r3, #4
 800810e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f06f 0202 	mvn.w	r2, #2
 8008116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3b20      	subs	r3, #32
 800811c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800811e:	68fb      	ldr	r3, [r7, #12]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	08008131 	.word	0x08008131

08008130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800813a:	4b13      	ldr	r3, [pc, #76]	@ (8008188 <prvTaskExitError+0x58>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d00b      	beq.n	800815c <prvTaskExitError+0x2c>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <prvTaskExitError+0x28>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60bb      	str	r3, [r7, #8]
}
 800816e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008170:	bf00      	nop
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0fc      	beq.n	8008172 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000120 	.word	0x20000120
 800818c:	00000000 	.word	0x00000000

08008190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	4770      	bx	lr
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst2>:
 80081b0:	2000548c 	.word	0x2000548c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081b8:	4808      	ldr	r0, [pc, #32]	@ (80081dc <prvPortStartFirstTask+0x24>)
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f380 8808 	msr	MSP, r0
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8814 	msr	CONTROL, r0
 80081ca:	b662      	cpsie	i
 80081cc:	b661      	cpsie	f
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	df00      	svc	0
 80081d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081da:	bf00      	nop
 80081dc:	e000ed08 	.word	0xe000ed08

080081e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081e6:	4b47      	ldr	r3, [pc, #284]	@ (8008304 <xPortStartScheduler+0x124>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a47      	ldr	r2, [pc, #284]	@ (8008308 <xPortStartScheduler+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10b      	bne.n	8008208 <xPortStartScheduler+0x28>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008208:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <xPortStartScheduler+0x124>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a3f      	ldr	r2, [pc, #252]	@ (800830c <xPortStartScheduler+0x12c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d10b      	bne.n	800822a <xPortStartScheduler+0x4a>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60fb      	str	r3, [r7, #12]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800822a:	4b39      	ldr	r3, [pc, #228]	@ (8008310 <xPortStartScheduler+0x130>)
 800822c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	22ff      	movs	r2, #255	@ 0xff
 800823a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4b31      	ldr	r3, [pc, #196]	@ (8008314 <xPortStartScheduler+0x134>)
 8008250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008252:	4b31      	ldr	r3, [pc, #196]	@ (8008318 <xPortStartScheduler+0x138>)
 8008254:	2207      	movs	r2, #7
 8008256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008258:	e009      	b.n	800826e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <xPortStartScheduler+0x138>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3b01      	subs	r3, #1
 8008260:	4a2d      	ldr	r2, [pc, #180]	@ (8008318 <xPortStartScheduler+0x138>)
 8008262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008276:	2b80      	cmp	r3, #128	@ 0x80
 8008278:	d0ef      	beq.n	800825a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800827a:	4b27      	ldr	r3, [pc, #156]	@ (8008318 <xPortStartScheduler+0x138>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f1c3 0307 	rsb	r3, r3, #7
 8008282:	2b04      	cmp	r3, #4
 8008284:	d00b      	beq.n	800829e <xPortStartScheduler+0xbe>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	e7fd      	b.n	800829a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800829e:	4b1e      	ldr	r3, [pc, #120]	@ (8008318 <xPortStartScheduler+0x138>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008318 <xPortStartScheduler+0x138>)
 80082a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008318 <xPortStartScheduler+0x138>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082b0:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <xPortStartScheduler+0x138>)
 80082b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082bc:	4b17      	ldr	r3, [pc, #92]	@ (800831c <xPortStartScheduler+0x13c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	@ (800831c <xPortStartScheduler+0x13c>)
 80082c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c8:	4b14      	ldr	r3, [pc, #80]	@ (800831c <xPortStartScheduler+0x13c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a13      	ldr	r2, [pc, #76]	@ (800831c <xPortStartScheduler+0x13c>)
 80082ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082d4:	f000 f8da 	bl	800848c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <xPortStartScheduler+0x140>)
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082de:	f000 f8f9 	bl	80084d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082e2:	4b10      	ldr	r3, [pc, #64]	@ (8008324 <xPortStartScheduler+0x144>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008324 <xPortStartScheduler+0x144>)
 80082e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ee:	f7ff ff63 	bl	80081b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082f2:	f7ff fa73 	bl	80077dc <vTaskSwitchContext>
	prvTaskExitError();
 80082f6:	f7ff ff1b 	bl	8008130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed00 	.word	0xe000ed00
 8008308:	410fc271 	.word	0x410fc271
 800830c:	410fc270 	.word	0x410fc270
 8008310:	e000e400 	.word	0xe000e400
 8008314:	200055b8 	.word	0x200055b8
 8008318:	200055bc 	.word	0x200055bc
 800831c:	e000ed20 	.word	0xe000ed20
 8008320:	20000120 	.word	0x20000120
 8008324:	e000ef34 	.word	0xe000ef34

08008328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <vPortEnterCritical+0x5c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <vPortEnterCritical+0x5c>)
 800834a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800834c:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <vPortEnterCritical+0x5c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d110      	bne.n	8008376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008354:	4b0c      	ldr	r3, [pc, #48]	@ (8008388 <vPortEnterCritical+0x60>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00b      	beq.n	8008376 <vPortEnterCritical+0x4e>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	603b      	str	r3, [r7, #0]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <vPortEnterCritical+0x4a>
	}
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000120 	.word	0x20000120
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008392:	4b12      	ldr	r3, [pc, #72]	@ (80083dc <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <vPortExitCritical+0x26>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	607b      	str	r3, [r7, #4]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	4a08      	ldr	r2, [pc, #32]	@ (80083dc <vPortExitCritical+0x50>)
 80083ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083bc:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <vPortExitCritical+0x50>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <vPortExitCritical+0x44>
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000120 	.word	0x20000120

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	@ (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008404:	f380 8811 	msr	BASEPRI, r0
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f7ff f9e4 	bl	80077dc <vTaskSwitchContext>
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f380 8811 	msr	BASEPRI, r0
 800841c:	bc09      	pop	{r0, r3}
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	6808      	ldr	r0, [r1, #0]
 8008422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008426:	f01e 0f10 	tst.w	lr, #16
 800842a:	bf08      	it	eq
 800842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008430:	f380 8809 	msr	PSP, r0
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst>:
 8008440:	2000548c 	.word	0x2000548c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008462:	f7ff f901 	bl	8007668 <xTaskIncrementTick>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800846c:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <SysTick_Handler+0x40>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f383 8811 	msr	BASEPRI, r3
}
 800847e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008490:	4b0b      	ldr	r3, [pc, #44]	@ (80084c0 <vPortSetupTimerInterrupt+0x34>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008496:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <vPortSetupTimerInterrupt+0x38>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800849c:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <vPortSetupTimerInterrupt+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	@ (80084cc <vPortSetupTimerInterrupt+0x40>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	4a09      	ldr	r2, [pc, #36]	@ (80084d0 <vPortSetupTimerInterrupt+0x44>)
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ae:	4b04      	ldr	r3, [pc, #16]	@ (80084c0 <vPortSetupTimerInterrupt+0x34>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	e000e010 	.word	0xe000e010
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	20000100 	.word	0x20000100
 80084cc:	10624dd3 	.word	0x10624dd3
 80084d0:	e000e014 	.word	0xe000e014

080084d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084e4 <vPortEnableVFP+0x10>
 80084d8:	6801      	ldr	r1, [r0, #0]
 80084da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084de:	6001      	str	r1, [r0, #0]
 80084e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e2:	bf00      	nop
 80084e4:	e000ed88 	.word	0xe000ed88

080084e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d915      	bls.n	8008526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fa:	4a18      	ldr	r2, [pc, #96]	@ (800855c <vPortValidateInterruptPriority+0x74>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008504:	4b16      	ldr	r3, [pc, #88]	@ (8008560 <vPortValidateInterruptPriority+0x78>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	7afa      	ldrb	r2, [r7, #11]
 800850a:	429a      	cmp	r2, r3
 800850c:	d20b      	bcs.n	8008526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008526:	4b0f      	ldr	r3, [pc, #60]	@ (8008564 <vPortValidateInterruptPriority+0x7c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800852e:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <vPortValidateInterruptPriority+0x80>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d90b      	bls.n	800854e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	603b      	str	r3, [r7, #0]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <vPortValidateInterruptPriority+0x62>
	}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	e000e3f0 	.word	0xe000e3f0
 8008560:	200055b8 	.word	0x200055b8
 8008564:	e000ed0c 	.word	0xe000ed0c
 8008568:	200055bc 	.word	0x200055bc

0800856c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	@ 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008578:	f7fe ffa8 	bl	80074cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800857c:	4b5c      	ldr	r3, [pc, #368]	@ (80086f0 <pvPortMalloc+0x184>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008584:	f000 f924 	bl	80087d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008588:	4b5a      	ldr	r3, [pc, #360]	@ (80086f4 <pvPortMalloc+0x188>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 8095 	bne.w	80086c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01e      	beq.n	80085da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800859c:	2208      	movs	r2, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d015      	beq.n	80085da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <pvPortMalloc+0x6e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	617b      	str	r3, [r7, #20]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d06f      	beq.n	80086c0 <pvPortMalloc+0x154>
 80085e0:	4b45      	ldr	r3, [pc, #276]	@ (80086f8 <pvPortMalloc+0x18c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d86a      	bhi.n	80086c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ea:	4b44      	ldr	r3, [pc, #272]	@ (80086fc <pvPortMalloc+0x190>)
 80085ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ee:	4b43      	ldr	r3, [pc, #268]	@ (80086fc <pvPortMalloc+0x190>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f4:	e004      	b.n	8008600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <pvPortMalloc+0xa6>
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f1      	bne.n	80085f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008612:	4b37      	ldr	r3, [pc, #220]	@ (80086f0 <pvPortMalloc+0x184>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008618:	429a      	cmp	r2, r3
 800861a:	d051      	beq.n	80086c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2208      	movs	r2, #8
 8008622:	4413      	add	r3, r2
 8008624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	2308      	movs	r3, #8
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	429a      	cmp	r2, r3
 800863c:	d920      	bls.n	8008680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800863e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <pvPortMalloc+0xfc>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800867a:	69b8      	ldr	r0, [r7, #24]
 800867c:	f000 f90a 	bl	8008894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008680:	4b1d      	ldr	r3, [pc, #116]	@ (80086f8 <pvPortMalloc+0x18c>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	4a1b      	ldr	r2, [pc, #108]	@ (80086f8 <pvPortMalloc+0x18c>)
 800868c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800868e:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <pvPortMalloc+0x18c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b1b      	ldr	r3, [pc, #108]	@ (8008700 <pvPortMalloc+0x194>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d203      	bcs.n	80086a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800869a:	4b17      	ldr	r3, [pc, #92]	@ (80086f8 <pvPortMalloc+0x18c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a18      	ldr	r2, [pc, #96]	@ (8008700 <pvPortMalloc+0x194>)
 80086a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b13      	ldr	r3, [pc, #76]	@ (80086f4 <pvPortMalloc+0x188>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086b6:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <pvPortMalloc+0x198>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <pvPortMalloc+0x198>)
 80086be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086c0:	f7fe ff12 	bl	80074e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <pvPortMalloc+0x17a>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <pvPortMalloc+0x176>
	return pvReturn;
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3728      	adds	r7, #40	@ 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200091c8 	.word	0x200091c8
 80086f4:	200091dc 	.word	0x200091dc
 80086f8:	200091cc 	.word	0x200091cc
 80086fc:	200091c0 	.word	0x200091c0
 8008700:	200091d0 	.word	0x200091d0
 8008704:	200091d4 	.word	0x200091d4

08008708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04f      	beq.n	80087ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800871a:	2308      	movs	r3, #8
 800871c:	425b      	negs	r3, r3
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b25      	ldr	r3, [pc, #148]	@ (80087c4 <vPortFree+0xbc>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <vPortFree+0x46>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60fb      	str	r3, [r7, #12]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <vPortFree+0x66>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60bb      	str	r3, [r7, #8]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <vPortFree+0xbc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4013      	ands	r3, r2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01e      	beq.n	80087ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11a      	bne.n	80087ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <vPortFree+0xbc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	43db      	mvns	r3, r3
 800878e:	401a      	ands	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008794:	f7fe fe9a 	bl	80074cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <vPortFree+0xc0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4413      	add	r3, r2
 80087a2:	4a09      	ldr	r2, [pc, #36]	@ (80087c8 <vPortFree+0xc0>)
 80087a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087a6:	6938      	ldr	r0, [r7, #16]
 80087a8:	f000 f874 	bl	8008894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <vPortFree+0xc4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <vPortFree+0xc4>)
 80087b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087b6:	f7fe fe97 	bl	80074e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ba:	bf00      	nop
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200091dc 	.word	0x200091dc
 80087c8:	200091cc 	.word	0x200091cc
 80087cc:	200091d8 	.word	0x200091d8

080087d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80087da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087dc:	4b27      	ldr	r3, [pc, #156]	@ (800887c <prvHeapInit+0xac>)
 80087de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00c      	beq.n	8008804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3307      	adds	r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	4a1f      	ldr	r2, [pc, #124]	@ (800887c <prvHeapInit+0xac>)
 8008800:	4413      	add	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008808:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <prvHeapInit+0xb0>)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800880e:	4b1c      	ldr	r3, [pc, #112]	@ (8008880 <prvHeapInit+0xb0>)
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800881c:	2208      	movs	r2, #8
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0307 	bic.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4a15      	ldr	r2, [pc, #84]	@ (8008884 <prvHeapInit+0xb4>)
 8008830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008832:	4b14      	ldr	r3, [pc, #80]	@ (8008884 <prvHeapInit+0xb4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2200      	movs	r2, #0
 8008838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <prvHeapInit+0xb4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008850:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <prvHeapInit+0xb4>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	4a0a      	ldr	r2, [pc, #40]	@ (8008888 <prvHeapInit+0xb8>)
 800885e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a09      	ldr	r2, [pc, #36]	@ (800888c <prvHeapInit+0xbc>)
 8008866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008868:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <prvHeapInit+0xc0>)
 800886a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800886e:	601a      	str	r2, [r3, #0]
}
 8008870:	bf00      	nop
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	200055c0 	.word	0x200055c0
 8008880:	200091c0 	.word	0x200091c0
 8008884:	200091c8 	.word	0x200091c8
 8008888:	200091d0 	.word	0x200091d0
 800888c:	200091cc 	.word	0x200091cc
 8008890:	200091dc 	.word	0x200091dc

08008894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800889c:	4b28      	ldr	r3, [pc, #160]	@ (8008940 <prvInsertBlockIntoFreeList+0xac>)
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x14>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d8f7      	bhi.n	80088a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d108      	bne.n	80088d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	441a      	add	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d118      	bne.n	800891c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <prvInsertBlockIntoFreeList+0xb0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d00d      	beq.n	8008912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	441a      	add	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e008      	b.n	8008924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008912:	4b0c      	ldr	r3, [pc, #48]	@ (8008944 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	e003      	b.n	8008924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d002      	beq.n	8008932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	200091c0 	.word	0x200091c0
 8008944:	200091c8 	.word	0x200091c8

08008948 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	461a      	mov	r2, r3
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f002 fa89 	bl	800ae74 <tcpip_send_msg_wait_sem>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <netconn_apimsg+0x2e>
    return apimsg->err;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008974:	e001      	b.n	800897a <netconn_apimsg+0x32>
  }
  return err;
 8008976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	@ 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	603a      	str	r2, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
 8008990:	460b      	mov	r3, r1
 8008992:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f001 f949 	bl	8009c30 <netconn_alloc>
 800899e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d054      	beq.n	8008a50 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80089a6:	79bb      	ldrb	r3, [r7, #6]
 80089a8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	4619      	mov	r1, r3
 80089b4:	4829      	ldr	r0, [pc, #164]	@ (8008a5c <netconn_new_with_proto_and_callback+0xd8>)
 80089b6:	f7ff ffc7 	bl	8008948 <netconn_apimsg>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80089c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d043      	beq.n	8008a50 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <netconn_new_with_proto_and_callback+0x58>
 80089d0:	4b23      	ldr	r3, [pc, #140]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 80089d2:	22a3      	movs	r2, #163	@ 0xa3
 80089d4:	4923      	ldr	r1, [pc, #140]	@ (8008a64 <netconn_new_with_proto_and_callback+0xe0>)
 80089d6:	4824      	ldr	r0, [pc, #144]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 80089d8:	f00d fc0a 	bl	80161f0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	3310      	adds	r3, #16
 80089e0:	4618      	mov	r0, r3
 80089e2:	f00d f9cc 	bl	8015d7e <sys_mbox_valid>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <netconn_new_with_proto_and_callback+0x74>
 80089ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 80089ee:	22a4      	movs	r2, #164	@ 0xa4
 80089f0:	491e      	ldr	r1, [pc, #120]	@ (8008a6c <netconn_new_with_proto_and_callback+0xe8>)
 80089f2:	481d      	ldr	r0, [pc, #116]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 80089f4:	f00d fbfc 	bl	80161f0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	3314      	adds	r3, #20
 80089fc:	4618      	mov	r0, r3
 80089fe:	f00d f9be 	bl	8015d7e <sys_mbox_valid>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <netconn_new_with_proto_and_callback+0x90>
 8008a08:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 8008a0a:	22a6      	movs	r2, #166	@ 0xa6
 8008a0c:	4918      	ldr	r1, [pc, #96]	@ (8008a70 <netconn_new_with_proto_and_callback+0xec>)
 8008a0e:	4816      	ldr	r0, [pc, #88]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 8008a10:	f00d fbee 	bl	80161f0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	330c      	adds	r3, #12
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f00d fa41 	bl	8015ea0 <sys_sem_valid>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <netconn_new_with_proto_and_callback+0xac>
 8008a24:	4b0e      	ldr	r3, [pc, #56]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 8008a26:	22a9      	movs	r2, #169	@ 0xa9
 8008a28:	4912      	ldr	r1, [pc, #72]	@ (8008a74 <netconn_new_with_proto_and_callback+0xf0>)
 8008a2a:	480f      	ldr	r0, [pc, #60]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 8008a2c:	f00d fbe0 	bl	80161f0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	330c      	adds	r3, #12
 8008a34:	4618      	mov	r0, r3
 8008a36:	f00d fa26 	bl	8015e86 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	3310      	adds	r3, #16
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f00d f916 	bl	8015c70 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a46:	2007      	movs	r0, #7
 8008a48:	f002 ffc2 	bl	800b9d0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e000      	b.n	8008a52 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3730      	adds	r7, #48	@ 0x30
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08009c05 	.word	0x08009c05
 8008a60:	08017754 	.word	0x08017754
 8008a64:	08017788 	.word	0x08017788
 8008a68:	080177ac 	.word	0x080177ac
 8008a6c:	080177d4 	.word	0x080177d4
 8008a70:	080177ec 	.word	0x080177ec
 8008a74:	08017810 	.word	0x08017810

08008a78 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08c      	sub	sp, #48	@ 0x30
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e014      	b.n	8008ab4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a8e:	2329      	movs	r3, #41	@ 0x29
 8008a90:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	4619      	mov	r1, r3
 8008a98:	4808      	ldr	r0, [pc, #32]	@ (8008abc <netconn_prepare_delete+0x44>)
 8008a9a:	f7ff ff55 	bl	8008948 <netconn_apimsg>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <netconn_prepare_delete+0x3a>
    return err;
 8008aac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008ab0:	e000      	b.n	8008ab4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3730      	adds	r7, #48	@ 0x30
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	0800a179 	.word	0x0800a179

08008ac0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <netconn_delete+0x12>
    return ERR_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e00d      	b.n	8008aee <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ffd0 	bl	8008a78 <netconn_prepare_delete>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <netconn_delete+0x2a>
    netconn_free(conn);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f915 	bl	8009d14 <netconn_free>
  }
  return err;
 8008aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08e      	sub	sp, #56	@ 0x38
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <netconn_bind+0x28>
 8008b0c:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <netconn_bind+0x5c>)
 8008b0e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008b12:	4911      	ldr	r1, [pc, #68]	@ (8008b58 <netconn_bind+0x60>)
 8008b14:	4811      	ldr	r0, [pc, #68]	@ (8008b5c <netconn_bind+0x64>)
 8008b16:	f00d fb6b 	bl	80161f0 <iprintf>
 8008b1a:	f06f 030f 	mvn.w	r3, #15
 8008b1e:	e015      	b.n	8008b4c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008b26:	4b0e      	ldr	r3, [pc, #56]	@ (8008b60 <netconn_bind+0x68>)
 8008b28:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008b36:	f107 0314 	add.w	r3, r7, #20
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4809      	ldr	r0, [pc, #36]	@ (8008b64 <netconn_bind+0x6c>)
 8008b3e:	f7ff ff03 	bl	8008948 <netconn_apimsg>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3738      	adds	r7, #56	@ 0x38
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	08017754 	.word	0x08017754
 8008b58:	0801788c 	.word	0x0801788c
 8008b5c:	080177ac 	.word	0x080177ac
 8008b60:	0801ad5c 	.word	0x0801ad5c
 8008b64:	0800a345 	.word	0x0800a345

08008b68 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	@ 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <netconn_listen_with_backlog+0x26>
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb0 <netconn_listen_with_backlog+0x48>)
 8008b7c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008b80:	490c      	ldr	r1, [pc, #48]	@ (8008bb4 <netconn_listen_with_backlog+0x4c>)
 8008b82:	480d      	ldr	r0, [pc, #52]	@ (8008bb8 <netconn_listen_with_backlog+0x50>)
 8008b84:	f00d fb34 	bl	80161f0 <iprintf>
 8008b88:	f06f 030f 	mvn.w	r3, #15
 8008b8c:	e00c      	b.n	8008ba8 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008b92:	f107 030c 	add.w	r3, r7, #12
 8008b96:	4619      	mov	r1, r3
 8008b98:	4808      	ldr	r0, [pc, #32]	@ (8008bbc <netconn_listen_with_backlog+0x54>)
 8008b9a:	f7ff fed5 	bl	8008948 <netconn_apimsg>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008ba4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3730      	adds	r7, #48	@ 0x30
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	08017754 	.word	0x08017754
 8008bb4:	0801790c 	.word	0x0801790c
 8008bb8:	080177ac 	.word	0x080177ac
 8008bbc:	0800a3b9 	.word	0x0800a3b9

08008bc0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d109      	bne.n	8008be4 <netconn_accept+0x24>
 8008bd0:	4b42      	ldr	r3, [pc, #264]	@ (8008cdc <netconn_accept+0x11c>)
 8008bd2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008bd6:	4942      	ldr	r1, [pc, #264]	@ (8008ce0 <netconn_accept+0x120>)
 8008bd8:	4842      	ldr	r0, [pc, #264]	@ (8008ce4 <netconn_accept+0x124>)
 8008bda:	f00d fb09 	bl	80161f0 <iprintf>
 8008bde:	f06f 030f 	mvn.w	r3, #15
 8008be2:	e077      	b.n	8008cd4 <netconn_accept+0x114>
  *new_conn = NULL;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <netconn_accept+0x44>
 8008bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8008cdc <netconn_accept+0x11c>)
 8008bf2:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8008bf6:	493c      	ldr	r1, [pc, #240]	@ (8008ce8 <netconn_accept+0x128>)
 8008bf8:	483a      	ldr	r0, [pc, #232]	@ (8008ce4 <netconn_accept+0x124>)
 8008bfa:	f00d faf9 	bl	80161f0 <iprintf>
 8008bfe:	f06f 030f 	mvn.w	r3, #15
 8008c02:	e067      	b.n	8008cd4 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb88 	bl	800931a <netconn_err>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008c0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008c16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c1a:	e05b      	b.n	8008cd4 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3314      	adds	r3, #20
 8008c20:	4618      	mov	r0, r3
 8008c22:	f00d f8ac 	bl	8015d7e <sys_mbox_valid>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d006      	beq.n	8008c3a <netconn_accept+0x7a>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008c3a:	f06f 030e 	mvn.w	r3, #14
 8008c3e:	e049      	b.n	8008cd4 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00e      	beq.n	8008c6c <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3314      	adds	r3, #20
 8008c52:	f107 020c 	add.w	r2, r7, #12
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f00d f874 	bl	8015d46 <sys_arch_mbox_tryfetch>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c64:	d113      	bne.n	8008c8e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008c66:	f06f 0306 	mvn.w	r3, #6
 8008c6a:	e033      	b.n	8008cd4 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f103 0014 	add.w	r0, r3, #20
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69da      	ldr	r2, [r3, #28]
 8008c76:	f107 030c 	add.w	r3, r7, #12
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f00d f824 	bl	8015cc8 <sys_arch_mbox_fetch>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c86:	d102      	bne.n	8008c8e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8008c88:	f06f 0302 	mvn.w	r3, #2
 8008c8c:	e022      	b.n	8008cd4 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <netconn_accept+0xe2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f107 0213 	add.w	r2, r7, #19
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fb86 	bl	80093bc <lwip_netconn_is_err_msg>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008cb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cba:	e00b      	b.n	8008cd4 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d102      	bne.n	8008cc8 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008cc2:	f06f 030e 	mvn.w	r3, #14
 8008cc6:	e005      	b.n	8008cd4 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008cd2:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	08017754 	.word	0x08017754
 8008ce0:	0801792c 	.word	0x0801792c
 8008ce4:	080177ac 	.word	0x080177ac
 8008ce8:	0801794c 	.word	0x0801794c

08008cec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <netconn_recv_data+0x2c>
 8008d04:	4b5e      	ldr	r3, [pc, #376]	@ (8008e80 <netconn_recv_data+0x194>)
 8008d06:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8008d0a:	495e      	ldr	r1, [pc, #376]	@ (8008e84 <netconn_recv_data+0x198>)
 8008d0c:	485e      	ldr	r0, [pc, #376]	@ (8008e88 <netconn_recv_data+0x19c>)
 8008d0e:	f00d fa6f 	bl	80161f0 <iprintf>
 8008d12:	f06f 030f 	mvn.w	r3, #15
 8008d16:	e0ae      	b.n	8008e76 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <netconn_recv_data+0x4c>
 8008d24:	4b56      	ldr	r3, [pc, #344]	@ (8008e80 <netconn_recv_data+0x194>)
 8008d26:	f240 224a 	movw	r2, #586	@ 0x24a
 8008d2a:	4958      	ldr	r1, [pc, #352]	@ (8008e8c <netconn_recv_data+0x1a0>)
 8008d2c:	4856      	ldr	r0, [pc, #344]	@ (8008e88 <netconn_recv_data+0x19c>)
 8008d2e:	f00d fa5f 	bl	80161f0 <iprintf>
 8008d32:	f06f 030f 	mvn.w	r3, #15
 8008d36:	e09e      	b.n	8008e76 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3310      	adds	r3, #16
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f00d f81e 	bl	8015d7e <sys_mbox_valid>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10e      	bne.n	8008d66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 fae6 	bl	800931a <netconn_err>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008d52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008d5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008d5e:	e08a      	b.n	8008e76 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8008d60:	f06f 030a 	mvn.w	r3, #10
 8008d64:	e087      	b.n	8008e76 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d110      	bne.n	8008d96 <netconn_recv_data+0xaa>
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d84:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d104      	bne.n	8008d96 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d024      	beq.n	8008de0 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3310      	adds	r3, #16
 8008d9a:	f107 0218 	add.w	r2, r7, #24
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f00c ffd0 	bl	8015d46 <sys_arch_mbox_tryfetch>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dac:	d129      	bne.n	8008e02 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fab3 	bl	800931a <netconn_err>
 8008db4:	4603      	mov	r3, r0
 8008db6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008db8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8008dc0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008dc4:	e057      	b.n	8008e76 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <netconn_recv_data+0xee>
        return ERR_CONN;
 8008dd4:	f06f 030a 	mvn.w	r3, #10
 8008dd8:	e04d      	b.n	8008e76 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8008dda:	f06f 0306 	mvn.w	r3, #6
 8008dde:	e04a      	b.n	8008e76 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f103 0010 	add.w	r0, r3, #16
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	69da      	ldr	r2, [r3, #28]
 8008dea:	f107 0318 	add.w	r3, r7, #24
 8008dee:	4619      	mov	r1, r3
 8008df0:	f00c ff6a 	bl	8015cc8 <sys_arch_mbox_fetch>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d102      	bne.n	8008e02 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8008dfc:	f06f 0302 	mvn.w	r3, #2
 8008e00:	e039      	b.n	8008e76 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d117      	bne.n	8008e3e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f107 0217 	add.w	r2, r7, #23
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fad0 	bl	80093bc <lwip_netconn_is_err_msg>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e26:	f113 0f0f 	cmn.w	r3, #15
 8008e2a:	d101      	bne.n	8008e30 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e022      	b.n	8008e76 <netconn_recv_data+0x18a>
      }
      return err;
 8008e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e34:	e01f      	b.n	8008e76 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	891b      	ldrh	r3, [r3, #8]
 8008e3a:	83fb      	strh	r3, [r7, #30]
 8008e3c:	e00d      	b.n	8008e5a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <netconn_recv_data+0x166>
 8008e44:	4b0e      	ldr	r3, [pc, #56]	@ (8008e80 <netconn_recv_data+0x194>)
 8008e46:	f240 2291 	movw	r2, #657	@ 0x291
 8008e4a:	4911      	ldr	r1, [pc, #68]	@ (8008e90 <netconn_recv_data+0x1a4>)
 8008e4c:	480e      	ldr	r0, [pc, #56]	@ (8008e88 <netconn_recv_data+0x19c>)
 8008e4e:	f00d f9cf 	bl	80161f0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	891b      	ldrh	r3, [r3, #8]
 8008e58:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <netconn_recv_data+0x182>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	8bfa      	ldrh	r2, [r7, #30]
 8008e68:	2101      	movs	r1, #1
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3720      	adds	r7, #32
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	08017754 	.word	0x08017754
 8008e84:	0801796c 	.word	0x0801796c
 8008e88:	080177ac 	.word	0x080177ac
 8008e8c:	0801798c 	.word	0x0801798c
 8008e90:	080179a8 	.word	0x080179a8

08008e94 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <netconn_tcp_recvd_msg+0x1e>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d009      	beq.n	8008ec6 <netconn_tcp_recvd_msg+0x32>
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <netconn_tcp_recvd_msg+0x50>)
 8008eb4:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8008eb8:	490b      	ldr	r1, [pc, #44]	@ (8008ee8 <netconn_tcp_recvd_msg+0x54>)
 8008eba:	480c      	ldr	r0, [pc, #48]	@ (8008eec <netconn_tcp_recvd_msg+0x58>)
 8008ebc:	f00d f998 	bl	80161f0 <iprintf>
 8008ec0:	f06f 030f 	mvn.w	r3, #15
 8008ec4:	e00a      	b.n	8008edc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	4806      	ldr	r0, [pc, #24]	@ (8008ef0 <netconn_tcp_recvd_msg+0x5c>)
 8008ed6:	f7ff fd37 	bl	8008948 <netconn_apimsg>
 8008eda:	4603      	mov	r3, r0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	08017754 	.word	0x08017754
 8008ee8:	080179b4 	.word	0x080179b4
 8008eec:	080177ac 	.word	0x080177ac
 8008ef0:	0800a4e9 	.word	0x0800a4e9

08008ef4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b090      	sub	sp, #64	@ 0x40
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3310      	adds	r3, #16
 8008f06:	4618      	mov	r0, r3
 8008f08:	f00c ff39 	bl	8015d7e <sys_mbox_valid>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008f12:	f06f 030a 	mvn.w	r3, #10
 8008f16:	e072      	b.n	8008ffe <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	da09      	bge.n	8008f38 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8008f36:	e03b      	b.n	8008fb0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff fed4 	bl	8008cec <netconn_recv_data>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8008f4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008f52:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008f56:	e052      	b.n	8008ffe <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10e      	bne.n	8008f86 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <netconn_recv_data_tcp+0x80>
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	891b      	ldrh	r3, [r3, #8]
 8008f72:	e000      	b.n	8008f76 <netconn_recv_data_tcp+0x82>
 8008f74:	2301      	movs	r3, #1
 8008f76:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008f78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f7a:	f107 0214 	add.w	r2, r7, #20
 8008f7e:	4619      	mov	r1, r3
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff ff87 	bl	8008e94 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d136      	bne.n	8008ffa <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8008fa8:	f06f 0306 	mvn.w	r3, #6
 8008fac:	e027      	b.n	8008ffe <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8008fae:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <netconn_recv_data_tcp+0xd0>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10f      	bne.n	8008fec <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f9a4 	bl	800931a <netconn_err>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8008fd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <netconn_recv_data_tcp+0xf2>
          return err;
 8008fe0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008fe4:	e00b      	b.n	8008ffe <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8008fe6:	f06f 030d 	mvn.w	r3, #13
 8008fea:	e008      	b.n	8008ffe <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008fec:	2101      	movs	r1, #1
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f956 	bl	80092a0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008ff4:	f06f 030e 	mvn.w	r3, #14
 8008ff8:	e001      	b.n	8008ffe <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8008ffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3740      	adds	r7, #64	@ 0x40
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <netconn_recv+0x28>
 800901c:	4b32      	ldr	r3, [pc, #200]	@ (80090e8 <netconn_recv+0xe0>)
 800901e:	f240 3263 	movw	r2, #867	@ 0x363
 8009022:	4932      	ldr	r1, [pc, #200]	@ (80090ec <netconn_recv+0xe4>)
 8009024:	4832      	ldr	r0, [pc, #200]	@ (80090f0 <netconn_recv+0xe8>)
 8009026:	f00d f8e3 	bl	80161f0 <iprintf>
 800902a:	f06f 030f 	mvn.w	r3, #15
 800902e:	e056      	b.n	80090de <netconn_recv+0xd6>
  *new_buf = NULL;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d109      	bne.n	8009050 <netconn_recv+0x48>
 800903c:	4b2a      	ldr	r3, [pc, #168]	@ (80090e8 <netconn_recv+0xe0>)
 800903e:	f240 3265 	movw	r2, #869	@ 0x365
 8009042:	492c      	ldr	r1, [pc, #176]	@ (80090f4 <netconn_recv+0xec>)
 8009044:	482a      	ldr	r0, [pc, #168]	@ (80090f0 <netconn_recv+0xe8>)
 8009046:	f00d f8d3 	bl	80161f0 <iprintf>
 800904a:	f06f 030f 	mvn.w	r3, #15
 800904e:	e046      	b.n	80090de <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009058:	2b10      	cmp	r3, #16
 800905a:	d13a      	bne.n	80090d2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009060:	2006      	movs	r0, #6
 8009062:	f002 fc3f 	bl	800b8e4 <memp_malloc>
 8009066:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <netconn_recv+0x6c>
      return ERR_MEM;
 800906e:	f04f 33ff 	mov.w	r3, #4294967295
 8009072:	e034      	b.n	80090de <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	2200      	movs	r2, #0
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff ff39 	bl	8008ef4 <netconn_recv_data_tcp>
 8009082:	4603      	mov	r3, r0
 8009084:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009086:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d006      	beq.n	800909c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800908e:	6979      	ldr	r1, [r7, #20]
 8009090:	2006      	movs	r0, #6
 8009092:	f002 fc9d 	bl	800b9d0 <memp_free>
      return err;
 8009096:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800909a:	e020      	b.n	80090de <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d106      	bne.n	80090b0 <netconn_recv+0xa8>
 80090a2:	4b11      	ldr	r3, [pc, #68]	@ (80090e8 <netconn_recv+0xe0>)
 80090a4:	f240 3279 	movw	r2, #889	@ 0x379
 80090a8:	4913      	ldr	r1, [pc, #76]	@ (80090f8 <netconn_recv+0xf0>)
 80090aa:	4811      	ldr	r0, [pc, #68]	@ (80090f0 <netconn_recv+0xe8>)
 80090ac:	f00d f8a0 	bl	80161f0 <iprintf>

    buf->p = p;
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2200      	movs	r2, #0
 80090c0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2200      	movs	r2, #0
 80090c6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e005      	b.n	80090de <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80090d2:	2200      	movs	r2, #0
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fe08 	bl	8008cec <netconn_recv_data>
 80090dc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	08017754 	.word	0x08017754
 80090ec:	0801796c 	.word	0x0801796c
 80090f0:	080177ac 	.word	0x080177ac
 80090f4:	0801798c 	.word	0x0801798c
 80090f8:	08017a04 	.word	0x08017a04

080090fc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	f107 0110 	add.w	r1, r7, #16
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	2201      	movs	r2, #1
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f805 	bl	8009130 <netconn_write_vectors_partly>
 8009126:	4603      	mov	r3, r0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b092      	sub	sp, #72	@ 0x48
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	460b      	mov	r3, r1
 8009140:	80fb      	strh	r3, [r7, #6]
 8009142:	4613      	mov	r3, r2
 8009144:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <netconn_write_vectors_partly+0x30>
 800914c:	4b4e      	ldr	r3, [pc, #312]	@ (8009288 <netconn_write_vectors_partly+0x158>)
 800914e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009152:	494e      	ldr	r1, [pc, #312]	@ (800928c <netconn_write_vectors_partly+0x15c>)
 8009154:	484e      	ldr	r0, [pc, #312]	@ (8009290 <netconn_write_vectors_partly+0x160>)
 8009156:	f00d f84b 	bl	80161f0 <iprintf>
 800915a:	f06f 030f 	mvn.w	r3, #15
 800915e:	e08f      	b.n	8009280 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009168:	2b10      	cmp	r3, #16
 800916a:	d009      	beq.n	8009180 <netconn_write_vectors_partly+0x50>
 800916c:	4b46      	ldr	r3, [pc, #280]	@ (8009288 <netconn_write_vectors_partly+0x158>)
 800916e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009172:	4948      	ldr	r1, [pc, #288]	@ (8009294 <netconn_write_vectors_partly+0x164>)
 8009174:	4846      	ldr	r0, [pc, #280]	@ (8009290 <netconn_write_vectors_partly+0x160>)
 8009176:	f00d f83b 	bl	80161f0 <iprintf>
 800917a:	f06f 0305 	mvn.w	r3, #5
 800917e:	e07f      	b.n	8009280 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <netconn_write_vectors_partly+0x68>
 800918e:	797b      	ldrb	r3, [r7, #5]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <netconn_write_vectors_partly+0x6c>
 8009198:	2301      	movs	r3, #1
 800919a:	e000      	b.n	800919e <netconn_write_vectors_partly+0x6e>
 800919c:	2300      	movs	r3, #0
 800919e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80091a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d005      	beq.n	80091b6 <netconn_write_vectors_partly+0x86>
 80091aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80091b0:	f06f 0305 	mvn.w	r3, #5
 80091b4:	e064      	b.n	8009280 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80091ba:	2300      	movs	r3, #0
 80091bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80091be:	e015      	b.n	80091ec <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 80091c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4413      	add	r3, r2
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091cc:	4413      	add	r3, r2
 80091ce:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 80091d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	4413      	add	r3, r2
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091dc:	429a      	cmp	r2, r3
 80091de:	d202      	bcs.n	80091e6 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 80091e0:	f06f 0305 	mvn.w	r3, #5
 80091e4:	e04c      	b.n	8009280 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 80091e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e8:	3301      	adds	r3, #1
 80091ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091f0:	429a      	cmp	r2, r3
 80091f2:	dbe5      	blt.n	80091c0 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 80091f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e040      	b.n	8009280 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 80091fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009200:	2b00      	cmp	r3, #0
 8009202:	da0a      	bge.n	800921a <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009206:	2b00      	cmp	r3, #0
 8009208:	d102      	bne.n	8009210 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800920a:	f06f 0305 	mvn.w	r3, #5
 800920e:	e037      	b.n	8009280 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009210:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009214:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800922a:	797b      	ldrb	r3, [r7, #5]
 800922c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009232:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009238:	f107 0314 	add.w	r3, r7, #20
 800923c:	4619      	mov	r1, r3
 800923e:	4816      	ldr	r0, [pc, #88]	@ (8009298 <netconn_write_vectors_partly+0x168>)
 8009240:	f7ff fb82 	bl	8008948 <netconn_apimsg>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800924a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800924e:	2b00      	cmp	r3, #0
 8009250:	d114      	bne.n	800927c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8009252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800925c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800925e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800926a:	429a      	cmp	r2, r3
 800926c:	d006      	beq.n	800927c <netconn_write_vectors_partly+0x14c>
 800926e:	4b06      	ldr	r3, [pc, #24]	@ (8009288 <netconn_write_vectors_partly+0x158>)
 8009270:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009274:	4909      	ldr	r1, [pc, #36]	@ (800929c <netconn_write_vectors_partly+0x16c>)
 8009276:	4806      	ldr	r0, [pc, #24]	@ (8009290 <netconn_write_vectors_partly+0x160>)
 8009278:	f00c ffba 	bl	80161f0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800927c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009280:	4618      	mov	r0, r3
 8009282:	3748      	adds	r7, #72	@ 0x48
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	08017754 	.word	0x08017754
 800928c:	08017a2c 	.word	0x08017a2c
 8009290:	080177ac 	.word	0x080177ac
 8009294:	08017a48 	.word	0x08017a48
 8009298:	0800a8f5 	.word	0x0800a8f5
 800929c:	08017a6c 	.word	0x08017a6c

080092a0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08c      	sub	sp, #48	@ 0x30
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <netconn_close_shutdown+0x26>
 80092b2:	4b0f      	ldr	r3, [pc, #60]	@ (80092f0 <netconn_close_shutdown+0x50>)
 80092b4:	f240 4247 	movw	r2, #1095	@ 0x447
 80092b8:	490e      	ldr	r1, [pc, #56]	@ (80092f4 <netconn_close_shutdown+0x54>)
 80092ba:	480f      	ldr	r0, [pc, #60]	@ (80092f8 <netconn_close_shutdown+0x58>)
 80092bc:	f00c ff98 	bl	80161f0 <iprintf>
 80092c0:	f06f 030f 	mvn.w	r3, #15
 80092c4:	e010      	b.n	80092e8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80092ce:	2329      	movs	r3, #41	@ 0x29
 80092d0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	4619      	mov	r1, r3
 80092d8:	4808      	ldr	r0, [pc, #32]	@ (80092fc <netconn_close_shutdown+0x5c>)
 80092da:	f7ff fb35 	bl	8008948 <netconn_apimsg>
 80092de:	4603      	mov	r3, r0
 80092e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80092e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3730      	adds	r7, #48	@ 0x30
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08017754 	.word	0x08017754
 80092f4:	08017a90 	.word	0x08017a90
 80092f8:	080177ac 	.word	0x080177ac
 80092fc:	0800aa0d 	.word	0x0800aa0d

08009300 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009308:	2103      	movs	r1, #3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff ffc8 	bl	80092a0 <netconn_close_shutdown>
 8009310:	4603      	mov	r3, r0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <netconn_err+0x12>
    return ERR_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e00d      	b.n	8009348 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800932c:	f00c fe42 	bl	8015fb4 <sys_arch_protect>
 8009330:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7a1b      	ldrb	r3, [r3, #8]
 8009336:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f00c fe46 	bl	8015fd0 <sys_arch_unprotect>
  return err;
 8009344:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800935a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800935e:	f113 0f0d 	cmn.w	r3, #13
 8009362:	d009      	beq.n	8009378 <lwip_netconn_err_to_msg+0x28>
 8009364:	f113 0f0d 	cmn.w	r3, #13
 8009368:	dc0c      	bgt.n	8009384 <lwip_netconn_err_to_msg+0x34>
 800936a:	f113 0f0f 	cmn.w	r3, #15
 800936e:	d007      	beq.n	8009380 <lwip_netconn_err_to_msg+0x30>
 8009370:	f113 0f0e 	cmn.w	r3, #14
 8009374:	d002      	beq.n	800937c <lwip_netconn_err_to_msg+0x2c>
 8009376:	e005      	b.n	8009384 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009378:	4b0a      	ldr	r3, [pc, #40]	@ (80093a4 <lwip_netconn_err_to_msg+0x54>)
 800937a:	e00e      	b.n	800939a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800937c:	4b0a      	ldr	r3, [pc, #40]	@ (80093a8 <lwip_netconn_err_to_msg+0x58>)
 800937e:	e00c      	b.n	800939a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009380:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <lwip_netconn_err_to_msg+0x5c>)
 8009382:	e00a      	b.n	800939a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <lwip_netconn_err_to_msg+0x48>
 800938c:	4b08      	ldr	r3, [pc, #32]	@ (80093b0 <lwip_netconn_err_to_msg+0x60>)
 800938e:	227d      	movs	r2, #125	@ 0x7d
 8009390:	4908      	ldr	r1, [pc, #32]	@ (80093b4 <lwip_netconn_err_to_msg+0x64>)
 8009392:	4809      	ldr	r0, [pc, #36]	@ (80093b8 <lwip_netconn_err_to_msg+0x68>)
 8009394:	f00c ff2c 	bl	80161f0 <iprintf>
      return NULL;
 8009398:	2300      	movs	r3, #0
  }
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	0801ac48 	.word	0x0801ac48
 80093a8:	0801ac49 	.word	0x0801ac49
 80093ac:	0801ac4a 	.word	0x0801ac4a
 80093b0:	08017aac 	.word	0x08017aac
 80093b4:	08017ae0 	.word	0x08017ae0
 80093b8:	08017af0 	.word	0x08017af0

080093bc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d105      	bne.n	80093d8 <lwip_netconn_is_err_msg+0x1c>
 80093cc:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <lwip_netconn_is_err_msg+0x5c>)
 80093ce:	2285      	movs	r2, #133	@ 0x85
 80093d0:	4912      	ldr	r1, [pc, #72]	@ (800941c <lwip_netconn_is_err_msg+0x60>)
 80093d2:	4813      	ldr	r0, [pc, #76]	@ (8009420 <lwip_netconn_is_err_msg+0x64>)
 80093d4:	f00c ff0c 	bl	80161f0 <iprintf>

  if (msg == &netconn_aborted) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a12      	ldr	r2, [pc, #72]	@ (8009424 <lwip_netconn_is_err_msg+0x68>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d104      	bne.n	80093ea <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	22f3      	movs	r2, #243	@ 0xf3
 80093e4:	701a      	strb	r2, [r3, #0]
    return 1;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e012      	b.n	8009410 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a0e      	ldr	r2, [pc, #56]	@ (8009428 <lwip_netconn_is_err_msg+0x6c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d104      	bne.n	80093fc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	22f2      	movs	r2, #242	@ 0xf2
 80093f6:	701a      	strb	r2, [r3, #0]
    return 1;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e009      	b.n	8009410 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a0b      	ldr	r2, [pc, #44]	@ (800942c <lwip_netconn_is_err_msg+0x70>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d104      	bne.n	800940e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	22f1      	movs	r2, #241	@ 0xf1
 8009408:	701a      	strb	r2, [r3, #0]
    return 1;
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	08017aac 	.word	0x08017aac
 800941c:	08017b18 	.word	0x08017b18
 8009420:	08017af0 	.word	0x08017af0
 8009424:	0801ac48 	.word	0x0801ac48
 8009428:	0801ac49 	.word	0x0801ac49
 800942c:	0801ac4a 	.word	0x0801ac4a

08009430 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b088      	sub	sp, #32
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d105      	bne.n	8009450 <recv_udp+0x20>
 8009444:	4b34      	ldr	r3, [pc, #208]	@ (8009518 <recv_udp+0xe8>)
 8009446:	22e5      	movs	r2, #229	@ 0xe5
 8009448:	4934      	ldr	r1, [pc, #208]	@ (800951c <recv_udp+0xec>)
 800944a:	4835      	ldr	r0, [pc, #212]	@ (8009520 <recv_udp+0xf0>)
 800944c:	f00c fed0 	bl	80161f0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <recv_udp+0x32>
 8009456:	4b30      	ldr	r3, [pc, #192]	@ (8009518 <recv_udp+0xe8>)
 8009458:	22e6      	movs	r2, #230	@ 0xe6
 800945a:	4932      	ldr	r1, [pc, #200]	@ (8009524 <recv_udp+0xf4>)
 800945c:	4830      	ldr	r0, [pc, #192]	@ (8009520 <recv_udp+0xf0>)
 800945e:	f00c fec7 	bl	80161f0 <iprintf>
  conn = (struct netconn *)arg;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <recv_udp+0x44>
    pbuf_free(p);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f003 f953 	bl	800c718 <pbuf_free>
    return;
 8009472:	e04d      	b.n	8009510 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	429a      	cmp	r2, r3
 800947c:	d005      	beq.n	800948a <recv_udp+0x5a>
 800947e:	4b26      	ldr	r3, [pc, #152]	@ (8009518 <recv_udp+0xe8>)
 8009480:	22ee      	movs	r2, #238	@ 0xee
 8009482:	4929      	ldr	r1, [pc, #164]	@ (8009528 <recv_udp+0xf8>)
 8009484:	4826      	ldr	r0, [pc, #152]	@ (8009520 <recv_udp+0xf0>)
 8009486:	f00c feb3 	bl	80161f0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	3310      	adds	r3, #16
 800948e:	4618      	mov	r0, r3
 8009490:	f00c fc75 	bl	8015d7e <sys_mbox_valid>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f003 f93c 	bl	800c718 <pbuf_free>
    return;
 80094a0:	e036      	b.n	8009510 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80094a2:	2006      	movs	r0, #6
 80094a4:	f002 fa1e 	bl	800b8e4 <memp_malloc>
 80094a8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <recv_udp+0x88>
    pbuf_free(p);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f003 f931 	bl	800c718 <pbuf_free>
    return;
 80094b6:	e02b      	b.n	8009510 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <recv_udp+0xa0>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	e000      	b.n	80094d2 <recv_udp+0xa2>
 80094d0:	2300      	movs	r3, #0
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80094da:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	891b      	ldrh	r3, [r3, #8]
 80094e0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	3310      	adds	r3, #16
 80094e6:	69b9      	ldr	r1, [r7, #24]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f00c fbd3 	bl	8015c94 <sys_mbox_trypost>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d003      	beq.n	80094fc <recv_udp+0xcc>
    netbuf_delete(buf);
 80094f4:	69b8      	ldr	r0, [r7, #24]
 80094f6:	f001 fb15 	bl	800ab24 <netbuf_delete>
    return;
 80094fa:	e009      	b.n	8009510 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <recv_udp+0xe0>
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009508:	8afa      	ldrh	r2, [r7, #22]
 800950a:	2100      	movs	r1, #0
 800950c:	69f8      	ldr	r0, [r7, #28]
 800950e:	4798      	blx	r3
  }
}
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	08017aac 	.word	0x08017aac
 800951c:	08017b24 	.word	0x08017b24
 8009520:	08017af0 	.word	0x08017af0
 8009524:	08017b48 	.word	0x08017b48
 8009528:	08017b68 	.word	0x08017b68

0800952c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <recv_tcp+0x22>
 8009540:	4b36      	ldr	r3, [pc, #216]	@ (800961c <recv_tcp+0xf0>)
 8009542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009546:	4936      	ldr	r1, [pc, #216]	@ (8009620 <recv_tcp+0xf4>)
 8009548:	4836      	ldr	r0, [pc, #216]	@ (8009624 <recv_tcp+0xf8>)
 800954a:	f00c fe51 	bl	80161f0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <recv_tcp+0x36>
 8009554:	4b31      	ldr	r3, [pc, #196]	@ (800961c <recv_tcp+0xf0>)
 8009556:	f240 122d 	movw	r2, #301	@ 0x12d
 800955a:	4933      	ldr	r1, [pc, #204]	@ (8009628 <recv_tcp+0xfc>)
 800955c:	4831      	ldr	r0, [pc, #196]	@ (8009624 <recv_tcp+0xf8>)
 800955e:	f00c fe47 	bl	80161f0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d006      	beq.n	8009578 <recv_tcp+0x4c>
 800956a:	4b2c      	ldr	r3, [pc, #176]	@ (800961c <recv_tcp+0xf0>)
 800956c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009570:	492e      	ldr	r1, [pc, #184]	@ (800962c <recv_tcp+0x100>)
 8009572:	482c      	ldr	r0, [pc, #176]	@ (8009624 <recv_tcp+0xf8>)
 8009574:	f00c fe3c 	bl	80161f0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <recv_tcp+0x5c>
    return ERR_VAL;
 8009582:	f06f 0305 	mvn.w	r3, #5
 8009586:	e045      	b.n	8009614 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	d006      	beq.n	80095a0 <recv_tcp+0x74>
 8009592:	4b22      	ldr	r3, [pc, #136]	@ (800961c <recv_tcp+0xf0>)
 8009594:	f240 1235 	movw	r2, #309	@ 0x135
 8009598:	4925      	ldr	r1, [pc, #148]	@ (8009630 <recv_tcp+0x104>)
 800959a:	4822      	ldr	r0, [pc, #136]	@ (8009624 <recv_tcp+0xf8>)
 800959c:	f00c fe28 	bl	80161f0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	3310      	adds	r3, #16
 80095a4:	4618      	mov	r0, r3
 80095a6:	f00c fbea 	bl	8015d7e <sys_mbox_valid>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10d      	bne.n	80095cc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	891b      	ldrh	r3, [r3, #8]
 80095ba:	4619      	mov	r1, r3
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f004 f885 	bl	800d6cc <tcp_recved>
      pbuf_free(p);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f003 f8a8 	bl	800c718 <pbuf_free>
    }
    return ERR_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e023      	b.n	8009614 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d005      	beq.n	80095de <recv_tcp+0xb2>
    msg = p;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	891b      	ldrh	r3, [r3, #8]
 80095da:	83fb      	strh	r3, [r7, #30]
 80095dc:	e003      	b.n	80095e6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80095de:	4b15      	ldr	r3, [pc, #84]	@ (8009634 <recv_tcp+0x108>)
 80095e0:	61bb      	str	r3, [r7, #24]
    len = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	3310      	adds	r3, #16
 80095ea:	69b9      	ldr	r1, [r7, #24]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00c fb51 	bl	8015c94 <sys_mbox_trypost>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80095f8:	f04f 33ff 	mov.w	r3, #4294967295
 80095fc:	e00a      	b.n	8009614 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <recv_tcp+0xe6>
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	8bfa      	ldrh	r2, [r7, #30]
 800960c:	2100      	movs	r1, #0
 800960e:	6978      	ldr	r0, [r7, #20]
 8009610:	4798      	blx	r3
  }

  return ERR_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	08017aac 	.word	0x08017aac
 8009620:	08017b88 	.word	0x08017b88
 8009624:	08017af0 	.word	0x08017af0
 8009628:	08017bac 	.word	0x08017bac
 800962c:	08017bcc 	.word	0x08017bcc
 8009630:	08017be4 	.word	0x08017be4
 8009634:	0801ac4a 	.word	0x0801ac4a

08009638 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <poll_tcp+0x22>
 800964c:	4b2b      	ldr	r3, [pc, #172]	@ (80096fc <poll_tcp+0xc4>)
 800964e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009652:	492b      	ldr	r1, [pc, #172]	@ (8009700 <poll_tcp+0xc8>)
 8009654:	482b      	ldr	r0, [pc, #172]	@ (8009704 <poll_tcp+0xcc>)
 8009656:	f00c fdcb 	bl	80161f0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d104      	bne.n	800966c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009662:	2101      	movs	r1, #1
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 ff75 	bl	800a554 <lwip_netconn_do_writemore>
 800966a:	e016      	b.n	800969a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	2b04      	cmp	r3, #4
 8009672:	d112      	bne.n	800969a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <poll_tcp+0x5a>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	7a5b      	ldrb	r3, [r3, #9]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	7a5a      	ldrb	r2, [r3, #9]
 800968c:	3a01      	subs	r2, #1
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009692:	2101      	movs	r1, #1
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fc05 	bl	8009ea4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096a0:	f003 0310 	and.w	r3, r3, #16
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d023      	beq.n	80096f0 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01f      	beq.n	80096f0 <poll_tcp+0xb8>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80096b8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80096bc:	d318      	bcc.n	80096f0 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d812      	bhi.n	80096f0 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096d0:	f023 0310 	bic.w	r3, r3, #16
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <poll_tcp+0xb8>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e8:	2200      	movs	r2, #0
 80096ea:	2102      	movs	r1, #2
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08017aac 	.word	0x08017aac
 8009700:	08017c04 	.word	0x08017c04
 8009704:	08017af0 	.word	0x08017af0

08009708 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d106      	bne.n	800972e <sent_tcp+0x26>
 8009720:	4b21      	ldr	r3, [pc, #132]	@ (80097a8 <sent_tcp+0xa0>)
 8009722:	f240 1293 	movw	r2, #403	@ 0x193
 8009726:	4921      	ldr	r1, [pc, #132]	@ (80097ac <sent_tcp+0xa4>)
 8009728:	4821      	ldr	r0, [pc, #132]	@ (80097b0 <sent_tcp+0xa8>)
 800972a:	f00c fd61 	bl	80161f0 <iprintf>

  if (conn) {
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d034      	beq.n	800979e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d104      	bne.n	8009746 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800973c:	2101      	movs	r1, #1
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f000 ff08 	bl	800a554 <lwip_netconn_do_writemore>
 8009744:	e007      	b.n	8009756 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d103      	bne.n	8009756 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800974e:	2101      	movs	r1, #1
 8009750:	6978      	ldr	r0, [r7, #20]
 8009752:	f000 fba7 	bl	8009ea4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01f      	beq.n	800979e <sent_tcp+0x96>
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009766:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800976a:	d318      	bcc.n	800979e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009774:	2b04      	cmp	r3, #4
 8009776:	d812      	bhi.n	800979e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800977e:	f023 0310 	bic.w	r3, r3, #16
 8009782:	b2da      	uxtb	r2, r3
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978e:	2b00      	cmp	r3, #0
 8009790:	d005      	beq.n	800979e <sent_tcp+0x96>
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009796:	88fa      	ldrh	r2, [r7, #6]
 8009798:	2102      	movs	r1, #2
 800979a:	6978      	ldr	r0, [r7, #20]
 800979c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	08017aac 	.word	0x08017aac
 80097ac:	08017c04 	.word	0x08017c04
 80097b0:	08017af0 	.word	0x08017af0

080097b4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <err_tcp+0x24>
 80097ca:	4b61      	ldr	r3, [pc, #388]	@ (8009950 <err_tcp+0x19c>)
 80097cc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80097d0:	4960      	ldr	r1, [pc, #384]	@ (8009954 <err_tcp+0x1a0>)
 80097d2:	4861      	ldr	r0, [pc, #388]	@ (8009958 <err_tcp+0x1a4>)
 80097d4:	f00c fd0c 	bl	80161f0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80097d8:	f00c fbec 	bl	8015fb4 <sys_arch_protect>
 80097dc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	2200      	movs	r2, #0
 80097e2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	78fa      	ldrb	r2, [r7, #3]
 80097e8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097f0:	f043 0301 	orr.w	r3, r3, #1
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2200      	movs	r2, #0
 8009806:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009808:	69b8      	ldr	r0, [r7, #24]
 800980a:	f00c fbe1 	bl	8015fd0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d005      	beq.n	8009822 <err_tcp+0x6e>
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981a:	2200      	movs	r2, #0
 800981c:	2104      	movs	r1, #4
 800981e:	69f8      	ldr	r0, [r7, #28]
 8009820:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <err_tcp+0x82>
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	69f8      	ldr	r0, [r7, #28]
 8009834:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <err_tcp+0x96>
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	2200      	movs	r2, #0
 8009844:	2102      	movs	r1, #2
 8009846:	69f8      	ldr	r0, [r7, #28]
 8009848:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800984a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff fd7e 	bl	8009350 <lwip_netconn_err_to_msg>
 8009854:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	3310      	adds	r3, #16
 800985a:	4618      	mov	r0, r3
 800985c:	f00c fa8f 	bl	8015d7e <sys_mbox_valid>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	3310      	adds	r3, #16
 800986a:	6939      	ldr	r1, [r7, #16]
 800986c:	4618      	mov	r0, r3
 800986e:	f00c fa11 	bl	8015c94 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3314      	adds	r3, #20
 8009876:	4618      	mov	r0, r3
 8009878:	f00c fa81 	bl	8015d7e <sys_mbox_valid>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	3314      	adds	r3, #20
 8009886:	6939      	ldr	r1, [r7, #16]
 8009888:	4618      	mov	r0, r3
 800988a:	f00c fa03 	bl	8015c94 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d005      	beq.n	80098a0 <err_tcp+0xec>
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	2b04      	cmp	r3, #4
 8009898:	d002      	beq.n	80098a0 <err_tcp+0xec>
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	2b03      	cmp	r3, #3
 800989e:	d146      	bne.n	800992e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bf14      	ite	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	2300      	moveq	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098bc:	f023 0304 	bic.w	r3, r3, #4
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d13b      	bne.n	8009946 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <err_tcp+0x130>
 80098d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009950 <err_tcp+0x19c>)
 80098d8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80098dc:	491f      	ldr	r1, [pc, #124]	@ (800995c <err_tcp+0x1a8>)
 80098de:	481e      	ldr	r0, [pc, #120]	@ (8009958 <err_tcp+0x1a4>)
 80098e0:	f00c fc86 	bl	80161f0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d104      	bne.n	80098f4 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ee:	2200      	movs	r2, #0
 80098f0:	711a      	strb	r2, [r3, #4]
 80098f2:	e003      	b.n	80098fc <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	330c      	adds	r3, #12
 8009904:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009906:	68b8      	ldr	r0, [r7, #8]
 8009908:	f00c faca 	bl	8015ea0 <sys_sem_valid>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <err_tcp+0x16c>
 8009912:	4b0f      	ldr	r3, [pc, #60]	@ (8009950 <err_tcp+0x19c>)
 8009914:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009918:	4911      	ldr	r1, [pc, #68]	@ (8009960 <err_tcp+0x1ac>)
 800991a:	480f      	ldr	r0, [pc, #60]	@ (8009958 <err_tcp+0x1a4>)
 800991c:	f00c fc68 	bl	80161f0 <iprintf>
      conn->current_msg = NULL;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	2200      	movs	r2, #0
 8009924:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009926:	68b8      	ldr	r0, [r7, #8]
 8009928:	f00c faa0 	bl	8015e6c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800992c:	e00b      	b.n	8009946 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <err_tcp+0x194>
 8009936:	4b06      	ldr	r3, [pc, #24]	@ (8009950 <err_tcp+0x19c>)
 8009938:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800993c:	4909      	ldr	r1, [pc, #36]	@ (8009964 <err_tcp+0x1b0>)
 800993e:	4806      	ldr	r0, [pc, #24]	@ (8009958 <err_tcp+0x1a4>)
 8009940:	f00c fc56 	bl	80161f0 <iprintf>
  }
}
 8009944:	e000      	b.n	8009948 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009946:	bf00      	nop
}
 8009948:	bf00      	nop
 800994a:	3720      	adds	r7, #32
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	08017aac 	.word	0x08017aac
 8009954:	08017c04 	.word	0x08017c04
 8009958:	08017af0 	.word	0x08017af0
 800995c:	08017c14 	.word	0x08017c14
 8009960:	08017c30 	.word	0x08017c30
 8009964:	08017c4c 	.word	0x08017c4c

08009968 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f004 fd7b 	bl	800e474 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800997e:	490a      	ldr	r1, [pc, #40]	@ (80099a8 <setup_tcp+0x40>)
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f004 fd89 	bl	800e498 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009986:	4909      	ldr	r1, [pc, #36]	@ (80099ac <setup_tcp+0x44>)
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f004 fda7 	bl	800e4dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800998e:	2202      	movs	r2, #2
 8009990:	4907      	ldr	r1, [pc, #28]	@ (80099b0 <setup_tcp+0x48>)
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f004 fdfe 	bl	800e594 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009998:	4906      	ldr	r1, [pc, #24]	@ (80099b4 <setup_tcp+0x4c>)
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f004 fdc0 	bl	800e520 <tcp_err>
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	0800952d 	.word	0x0800952d
 80099ac:	08009709 	.word	0x08009709
 80099b0:	08009639 	.word	0x08009639
 80099b4:	080097b5 	.word	0x080097b5

080099b8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b089      	sub	sp, #36	@ 0x24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d102      	bne.n	80099d6 <accept_function+0x1e>
    return ERR_VAL;
 80099d0:	f06f 0305 	mvn.w	r3, #5
 80099d4:	e0a1      	b.n	8009b1a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	3314      	adds	r3, #20
 80099da:	4618      	mov	r0, r3
 80099dc:	f00c f9cf 	bl	8015d7e <sys_mbox_valid>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80099e6:	f06f 0305 	mvn.w	r3, #5
 80099ea:	e096      	b.n	8009b1a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d11b      	bne.n	8009a2a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f103 0414 	add.w	r4, r3, #20
 80099f8:	f06f 000c 	mvn.w	r0, #12
 80099fc:	f7ff fca8 	bl	8009350 <lwip_netconn_err_to_msg>
 8009a00:	4603      	mov	r3, r0
 8009a02:	4619      	mov	r1, r3
 8009a04:	4620      	mov	r0, r4
 8009a06:	f00c f945 	bl	8015c94 <sys_mbox_trypost>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d109      	bne.n	8009a24 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <accept_function+0x6c>
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	69f8      	ldr	r0, [r7, #28]
 8009a22:	4798      	blx	r3
    }
    return ERR_VAL;
 8009a24:	f06f 0305 	mvn.w	r3, #5
 8009a28:	e077      	b.n	8009b1a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <accept_function+0x88>
 8009a32:	4b3c      	ldr	r3, [pc, #240]	@ (8009b24 <accept_function+0x16c>)
 8009a34:	f240 222a 	movw	r2, #554	@ 0x22a
 8009a38:	493b      	ldr	r1, [pc, #236]	@ (8009b28 <accept_function+0x170>)
 8009a3a:	483c      	ldr	r0, [pc, #240]	@ (8009b2c <accept_function+0x174>)
 8009a3c:	f00c fbd8 	bl	80161f0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f000 f8f0 	bl	8009c30 <netconn_alloc>
 8009a50:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11b      	bne.n	8009a90 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	f103 0414 	add.w	r4, r3, #20
 8009a5e:	f06f 000c 	mvn.w	r0, #12
 8009a62:	f7ff fc75 	bl	8009350 <lwip_netconn_err_to_msg>
 8009a66:	4603      	mov	r3, r0
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f00c f912 	bl	8015c94 <sys_mbox_trypost>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d109      	bne.n	8009a8a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <accept_function+0xd2>
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a82:	2200      	movs	r2, #0
 8009a84:	2100      	movs	r1, #0
 8009a86:	69f8      	ldr	r0, [r7, #28]
 8009a88:	4798      	blx	r3
    }
    return ERR_MEM;
 8009a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8e:	e044      	b.n	8009b1a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009a96:	69b8      	ldr	r0, [r7, #24]
 8009a98:	f7ff ff66 	bl	8009968 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	3314      	adds	r3, #20
 8009aa0:	69b9      	ldr	r1, [r7, #24]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f00c f8f6 	bl	8015c94 <sys_mbox_trypost>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d02a      	beq.n	8009b04 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	f004 fcdc 	bl	800e474 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009abc:	2100      	movs	r1, #0
 8009abe:	6978      	ldr	r0, [r7, #20]
 8009ac0:	f004 fcea 	bl	800e498 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	6978      	ldr	r0, [r7, #20]
 8009ac8:	f004 fd08 	bl	800e4dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6978      	ldr	r0, [r7, #20]
 8009ad2:	f004 fd5f 	bl	800e594 <tcp_poll>
    tcp_err(pcb, NULL);
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6978      	ldr	r0, [r7, #20]
 8009ada:	f004 fd21 	bl	800e520 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	3310      	adds	r3, #16
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f00c f8c1 	bl	8015c70 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	3310      	adds	r3, #16
 8009af2:	4618      	mov	r0, r3
 8009af4:	f00c f954 	bl	8015da0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009af8:	69b8      	ldr	r0, [r7, #24]
 8009afa:	f000 f90b 	bl	8009d14 <netconn_free>
    return ERR_MEM;
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295
 8009b02:	e00a      	b.n	8009b1a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <accept_function+0x160>
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b10:	2200      	movs	r2, #0
 8009b12:	2100      	movs	r1, #0
 8009b14:	69f8      	ldr	r0, [r7, #28]
 8009b16:	4798      	blx	r3
  }

  return ERR_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3724      	adds	r7, #36	@ 0x24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd90      	pop	{r4, r7, pc}
 8009b22:	bf00      	nop
 8009b24:	08017aac 	.word	0x08017aac
 8009b28:	08017c68 	.word	0x08017c68
 8009b2c:	08017af0 	.word	0x08017af0

08009b30 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009b30:	b590      	push	{r4, r7, lr}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d006      	beq.n	8009b54 <pcb_new+0x24>
 8009b46:	4b2b      	ldr	r3, [pc, #172]	@ (8009bf4 <pcb_new+0xc4>)
 8009b48:	f240 2265 	movw	r2, #613	@ 0x265
 8009b4c:	492a      	ldr	r1, [pc, #168]	@ (8009bf8 <pcb_new+0xc8>)
 8009b4e:	482b      	ldr	r0, [pc, #172]	@ (8009bfc <pcb_new+0xcc>)
 8009b50:	f00c fb4e 	bl	80161f0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d022      	beq.n	8009ba8 <pcb_new+0x78>
 8009b62:	2b20      	cmp	r3, #32
 8009b64:	d133      	bne.n	8009bce <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681c      	ldr	r4, [r3, #0]
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f009 fd5a 	bl	8013626 <udp_new_ip_type>
 8009b72:	4603      	mov	r3, r0
 8009b74:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02a      	beq.n	8009bd6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2b22      	cmp	r3, #34	@ 0x22
 8009b88:	d104      	bne.n	8009b94 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6858      	ldr	r0, [r3, #4]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	4917      	ldr	r1, [pc, #92]	@ (8009c00 <pcb_new+0xd0>)
 8009ba2:	f009 fcc7 	bl	8013534 <udp_recv>
      }
      break;
 8009ba6:	e016      	b.n	8009bd6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681c      	ldr	r4, [r3, #0]
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f004 fc52 	bl	800e458 <tcp_new_ip_type>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00b      	beq.n	8009bda <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff fece 	bl	8009968 <setup_tcp>
      }
      break;
 8009bcc:	e005      	b.n	8009bda <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	22fa      	movs	r2, #250	@ 0xfa
 8009bd2:	711a      	strb	r2, [r3, #4]
      return;
 8009bd4:	e00a      	b.n	8009bec <pcb_new+0xbc>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e000      	b.n	8009bdc <pcb_new+0xac>
      break;
 8009bda:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	22ff      	movs	r2, #255	@ 0xff
 8009bea:	711a      	strb	r2, [r3, #4]
  }
}
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd90      	pop	{r4, r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	08017aac 	.word	0x08017aac
 8009bf8:	08017c90 	.word	0x08017c90
 8009bfc:	08017af0 	.word	0x08017af0
 8009c00:	08009431 	.word	0x08009431

08009c04 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7ff ff85 	bl	8009b30 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009c40:	2007      	movs	r0, #7
 8009c42:	f001 fe4f 	bl	800b8e4 <memp_malloc>
 8009c46:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d101      	bne.n	8009c52 <netconn_alloc+0x22>
    return NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e056      	b.n	8009d00 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	79fa      	ldrb	r2, [r7, #7]
 8009c5c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c6a:	2b10      	cmp	r3, #16
 8009c6c:	d004      	beq.n	8009c78 <netconn_alloc+0x48>
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d105      	bne.n	8009c7e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009c72:	2306      	movs	r3, #6
 8009c74:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009c76:	e00a      	b.n	8009c8e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009c78:	2306      	movs	r3, #6
 8009c7a:	617b      	str	r3, [r7, #20]
      break;
 8009c7c:	e007      	b.n	8009c8e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009c7e:	4b22      	ldr	r3, [pc, #136]	@ (8009d08 <netconn_alloc+0xd8>)
 8009c80:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8009c84:	4921      	ldr	r1, [pc, #132]	@ (8009d0c <netconn_alloc+0xdc>)
 8009c86:	4822      	ldr	r0, [pc, #136]	@ (8009d10 <netconn_alloc+0xe0>)
 8009c88:	f00c fab2 	bl	80161f0 <iprintf>
      goto free_and_return;
 8009c8c:	e033      	b.n	8009cf6 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3310      	adds	r3, #16
 8009c92:	6979      	ldr	r1, [r7, #20]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f00b ffc9 	bl	8015c2c <sys_mbox_new>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d129      	bne.n	8009cf4 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	330c      	adds	r3, #12
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f00c f887 	bl	8015dba <sys_sem_new>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3310      	adds	r3, #16
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f00b ffda 	bl	8015c70 <sys_mbox_free>
    goto free_and_return;
 8009cbc:	e01b      	b.n	8009cf6 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00c f86c 	bl	8015da0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	7cfa      	ldrb	r2, [r7, #19]
 8009cec:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	e005      	b.n	8009d00 <netconn_alloc+0xd0>
    goto free_and_return;
 8009cf4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009cf6:	68f9      	ldr	r1, [r7, #12]
 8009cf8:	2007      	movs	r0, #7
 8009cfa:	f001 fe69 	bl	800b9d0 <memp_free>
  return NULL;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	08017aac 	.word	0x08017aac
 8009d0c:	08017cb0 	.word	0x08017cb0
 8009d10:	08017af0 	.word	0x08017af0

08009d14 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <netconn_free+0x1e>
 8009d24:	4b1b      	ldr	r3, [pc, #108]	@ (8009d94 <netconn_free+0x80>)
 8009d26:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009d2a:	491b      	ldr	r1, [pc, #108]	@ (8009d98 <netconn_free+0x84>)
 8009d2c:	481b      	ldr	r0, [pc, #108]	@ (8009d9c <netconn_free+0x88>)
 8009d2e:	f00c fa5f 	bl	80161f0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3310      	adds	r3, #16
 8009d36:	4618      	mov	r0, r3
 8009d38:	f00c f821 	bl	8015d7e <sys_mbox_valid>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <netconn_free+0x3c>
 8009d42:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <netconn_free+0x80>)
 8009d44:	f240 3223 	movw	r2, #803	@ 0x323
 8009d48:	4915      	ldr	r1, [pc, #84]	@ (8009da0 <netconn_free+0x8c>)
 8009d4a:	4814      	ldr	r0, [pc, #80]	@ (8009d9c <netconn_free+0x88>)
 8009d4c:	f00c fa50 	bl	80161f0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3314      	adds	r3, #20
 8009d54:	4618      	mov	r0, r3
 8009d56:	f00c f812 	bl	8015d7e <sys_mbox_valid>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d006      	beq.n	8009d6e <netconn_free+0x5a>
 8009d60:	4b0c      	ldr	r3, [pc, #48]	@ (8009d94 <netconn_free+0x80>)
 8009d62:	f240 3226 	movw	r2, #806	@ 0x326
 8009d66:	490f      	ldr	r1, [pc, #60]	@ (8009da4 <netconn_free+0x90>)
 8009d68:	480c      	ldr	r0, [pc, #48]	@ (8009d9c <netconn_free+0x88>)
 8009d6a:	f00c fa41 	bl	80161f0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	330c      	adds	r3, #12
 8009d72:	4618      	mov	r0, r3
 8009d74:	f00c f887 	bl	8015e86 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f00c f8a0 	bl	8015ec2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	2007      	movs	r0, #7
 8009d86:	f001 fe23 	bl	800b9d0 <memp_free>
}
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	08017aac 	.word	0x08017aac
 8009d98:	08017cd8 	.word	0x08017cd8
 8009d9c:	08017af0 	.word	0x08017af0
 8009da0:	08017d08 	.word	0x08017d08
 8009da4:	08017d44 	.word	0x08017d44

08009da8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3310      	adds	r3, #16
 8009db4:	4618      	mov	r0, r3
 8009db6:	f00b ffe2 	bl	8015d7e <sys_mbox_valid>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02f      	beq.n	8009e20 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009dc0:	e018      	b.n	8009df4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	d10e      	bne.n	8009dec <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f107 020f 	add.w	r2, r7, #15
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff faf0 	bl	80093bc <lwip_netconn_is_err_msg>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d108      	bne.n	8009df4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 fc97 	bl	800c718 <pbuf_free>
 8009dea:	e003      	b.n	8009df4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fe98 	bl	800ab24 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3310      	adds	r3, #16
 8009df8:	f107 0210 	add.w	r2, r7, #16
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f00b ffa1 	bl	8015d46 <sys_arch_mbox_tryfetch>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d1da      	bne.n	8009dc2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3310      	adds	r3, #16
 8009e10:	4618      	mov	r0, r3
 8009e12:	f00b ff2d 	bl	8015c70 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3310      	adds	r3, #16
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f00b ffc0 	bl	8015da0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3314      	adds	r3, #20
 8009e24:	4618      	mov	r0, r3
 8009e26:	f00b ffaa 	bl	8015d7e <sys_mbox_valid>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d034      	beq.n	8009e9a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009e30:	e01d      	b.n	8009e6e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f107 020e 	add.w	r2, r7, #14
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff fabe 	bl	80093bc <lwip_netconn_is_err_msg>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d113      	bne.n	8009e6e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009e4a:	6978      	ldr	r0, [r7, #20]
 8009e4c:	f7ff ffac 	bl	8009da8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d007      	beq.n	8009e68 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f003 fa6d 	bl	800d33c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2200      	movs	r2, #0
 8009e66:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009e68:	6978      	ldr	r0, [r7, #20]
 8009e6a:	f7ff ff53 	bl	8009d14 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3314      	adds	r3, #20
 8009e72:	f107 0210 	add.w	r2, r7, #16
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f00b ff64 	bl	8015d46 <sys_arch_mbox_tryfetch>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e84:	d1d5      	bne.n	8009e32 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3314      	adds	r3, #20
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f00b fef0 	bl	8015c70 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3314      	adds	r3, #20
 8009e94:	4618      	mov	r0, r3
 8009e96:	f00b ff83 	bl	8015da0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009e9a:	bf00      	nop
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <lwip_netconn_do_close_internal+0x24>
 8009eba:	4b87      	ldr	r3, [pc, #540]	@ (800a0d8 <lwip_netconn_do_close_internal+0x234>)
 8009ebc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8009ec0:	4986      	ldr	r1, [pc, #536]	@ (800a0dc <lwip_netconn_do_close_internal+0x238>)
 8009ec2:	4887      	ldr	r0, [pc, #540]	@ (800a0e0 <lwip_netconn_do_close_internal+0x23c>)
 8009ec4:	f00c f994 	bl	80161f0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	d006      	beq.n	8009ee2 <lwip_netconn_do_close_internal+0x3e>
 8009ed4:	4b80      	ldr	r3, [pc, #512]	@ (800a0d8 <lwip_netconn_do_close_internal+0x234>)
 8009ed6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8009eda:	4982      	ldr	r1, [pc, #520]	@ (800a0e4 <lwip_netconn_do_close_internal+0x240>)
 8009edc:	4880      	ldr	r0, [pc, #512]	@ (800a0e0 <lwip_netconn_do_close_internal+0x23c>)
 8009ede:	f00c f987 	bl	80161f0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	d006      	beq.n	8009ef8 <lwip_netconn_do_close_internal+0x54>
 8009eea:	4b7b      	ldr	r3, [pc, #492]	@ (800a0d8 <lwip_netconn_do_close_internal+0x234>)
 8009eec:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8009ef0:	497d      	ldr	r1, [pc, #500]	@ (800a0e8 <lwip_netconn_do_close_internal+0x244>)
 8009ef2:	487b      	ldr	r0, [pc, #492]	@ (800a0e0 <lwip_netconn_do_close_internal+0x23c>)
 8009ef4:	f00c f97c 	bl	80161f0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d106      	bne.n	8009f0e <lwip_netconn_do_close_internal+0x6a>
 8009f00:	4b75      	ldr	r3, [pc, #468]	@ (800a0d8 <lwip_netconn_do_close_internal+0x234>)
 8009f02:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8009f06:	4979      	ldr	r1, [pc, #484]	@ (800a0ec <lwip_netconn_do_close_internal+0x248>)
 8009f08:	4875      	ldr	r0, [pc, #468]	@ (800a0e0 <lwip_netconn_do_close_internal+0x23c>)
 8009f0a:	f00c f971 	bl	80161f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <lwip_netconn_do_close_internal+0x80>
 8009f16:	4b70      	ldr	r3, [pc, #448]	@ (800a0d8 <lwip_netconn_do_close_internal+0x234>)
 8009f18:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009f1c:	4974      	ldr	r1, [pc, #464]	@ (800a0f0 <lwip_netconn_do_close_internal+0x24c>)
 8009f1e:	4870      	ldr	r0, [pc, #448]	@ (800a0e0 <lwip_netconn_do_close_internal+0x23c>)
 8009f20:	f00c f966 	bl	80161f0 <iprintf>

  tpcb = conn->pcb.tcp;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2e:	7a1b      	ldrb	r3, [r3, #8]
 8009f30:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d102      	bne.n	8009f4e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	75bb      	strb	r3, [r7, #22]
 8009f4c:	e01f      	b.n	8009f8e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00e      	beq.n	8009f72 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009f58:	2b05      	cmp	r3, #5
 8009f5a:	d007      	beq.n	8009f6c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009f60:	2b06      	cmp	r3, #6
 8009f62:	d003      	beq.n	8009f6c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d102      	bne.n	8009f72 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75bb      	strb	r3, [r7, #22]
 8009f70:	e00d      	b.n	8009f8e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009f72:	7b7b      	ldrb	r3, [r7, #13]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <lwip_netconn_do_close_internal+0xe6>
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	8b5b      	ldrh	r3, [r3, #26]
 8009f7c:	f003 0310 	and.w	r3, r3, #16
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	75bb      	strb	r3, [r7, #22]
 8009f88:	e001      	b.n	8009f8e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009f8e:	7dbb      	ldrb	r3, [r7, #22]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009f94:	2100      	movs	r1, #0
 8009f96:	6938      	ldr	r0, [r7, #16]
 8009f98:	f004 fa6c 	bl	800e474 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d104      	bne.n	8009fae <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	6938      	ldr	r0, [r7, #16]
 8009fa8:	f004 fadc 	bl	800e564 <tcp_accept>
 8009fac:	e01d      	b.n	8009fea <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6938      	ldr	r0, [r7, #16]
 8009fb8:	f004 fa6e 	bl	800e498 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6938      	ldr	r0, [r7, #16]
 8009fc0:	f004 fad0 	bl	800e564 <tcp_accept>
    }
    if (shut_tx) {
 8009fc4:	7b7b      	ldrb	r3, [r7, #13]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6938      	ldr	r0, [r7, #16]
 8009fce:	f004 fa85 	bl	800e4dc <tcp_sent>
    }
    if (shut_close) {
 8009fd2:	7dbb      	ldrb	r3, [r7, #22]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d008      	beq.n	8009fea <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2100      	movs	r1, #0
 8009fdc:	6938      	ldr	r0, [r7, #16]
 8009fde:	f004 fad9 	bl	800e594 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	6938      	ldr	r0, [r7, #16]
 8009fe6:	f004 fa9b 	bl	800e520 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009fea:	7dbb      	ldrb	r3, [r7, #22]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009ff0:	6938      	ldr	r0, [r7, #16]
 8009ff2:	f003 f85d 	bl	800d0b0 <tcp_close>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]
 8009ffa:	e007      	b.n	800a00c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	7b7a      	ldrb	r2, [r7, #13]
 800a000:	4619      	mov	r1, r3
 800a002:	6938      	ldr	r0, [r7, #16]
 800a004:	f003 f880 	bl	800d108 <tcp_shutdown>
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a00c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a014:	2301      	movs	r3, #1
 800a016:	757b      	strb	r3, [r7, #21]
 800a018:	e016      	b.n	800a048 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a022:	d10f      	bne.n	800a044 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a028:	7a5b      	ldrb	r3, [r3, #9]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10c      	bne.n	800a048 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a02e:	2301      	movs	r3, #1
 800a030:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a032:	7dbb      	ldrb	r3, [r7, #22]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d007      	beq.n	800a048 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a038:	6938      	ldr	r0, [r7, #16]
 800a03a:	f003 f97f 	bl	800d33c <tcp_abort>
          err = ERR_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	75fb      	strb	r3, [r7, #23]
 800a042:	e001      	b.n	800a048 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a044:	2301      	movs	r3, #1
 800a046:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a048:	7d7b      	ldrb	r3, [r7, #21]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d052      	beq.n	800a0f4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05c:	7dfa      	ldrb	r2, [r7, #23]
 800a05e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a06c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d129      	bne.n	800a0c8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a074:	7dbb      	ldrb	r3, [r7, #22]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00c      	beq.n	800a094 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <lwip_netconn_do_close_internal+0x1f0>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08c:	2200      	movs	r2, #0
 800a08e:	2104      	movs	r1, #4
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	4798      	blx	r3
      }
      if (shut_rx) {
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <lwip_netconn_do_close_internal+0x20a>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
      }
      if (shut_tx) {
 800a0ae:	7b7b      	ldrb	r3, [r7, #13]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d009      	beq.n	800a0c8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <lwip_netconn_do_close_internal+0x224>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2102      	movs	r1, #2
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a0ce:	68b8      	ldr	r0, [r7, #8]
 800a0d0:	f00b fecc 	bl	8015e6c <sys_sem_signal>
    }
    return ERR_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e03c      	b.n	800a152 <lwip_netconn_do_close_internal+0x2ae>
 800a0d8:	08017aac 	.word	0x08017aac
 800a0dc:	08017d80 	.word	0x08017d80
 800a0e0:	08017af0 	.word	0x08017af0
 800a0e4:	08017d90 	.word	0x08017d90
 800a0e8:	08017db0 	.word	0x08017db0
 800a0ec:	08017dd4 	.word	0x08017dd4
 800a0f0:	08017c14 	.word	0x08017c14
  }
  if (!close_finished) {
 800a0f4:	7d7b      	ldrb	r3, [r7, #21]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d11e      	bne.n	800a138 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	7d1b      	ldrb	r3, [r3, #20]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d106      	bne.n	800a110 <lwip_netconn_do_close_internal+0x26c>
 800a102:	4b16      	ldr	r3, [pc, #88]	@ (800a15c <lwip_netconn_do_close_internal+0x2b8>)
 800a104:	f240 4241 	movw	r2, #1089	@ 0x441
 800a108:	4915      	ldr	r1, [pc, #84]	@ (800a160 <lwip_netconn_do_close_internal+0x2bc>)
 800a10a:	4816      	ldr	r0, [pc, #88]	@ (800a164 <lwip_netconn_do_close_internal+0x2c0>)
 800a10c:	f00c f870 	bl	80161f0 <iprintf>
    if (shut_tx) {
 800a110:	7b7b      	ldrb	r3, [r7, #13]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a116:	4914      	ldr	r1, [pc, #80]	@ (800a168 <lwip_netconn_do_close_internal+0x2c4>)
 800a118:	6938      	ldr	r0, [r7, #16]
 800a11a:	f004 f9df 	bl	800e4dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a11e:	2201      	movs	r2, #1
 800a120:	4912      	ldr	r1, [pc, #72]	@ (800a16c <lwip_netconn_do_close_internal+0x2c8>)
 800a122:	6938      	ldr	r0, [r7, #16]
 800a124:	f004 fa36 	bl	800e594 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a128:	4911      	ldr	r1, [pc, #68]	@ (800a170 <lwip_netconn_do_close_internal+0x2cc>)
 800a12a:	6938      	ldr	r0, [r7, #16]
 800a12c:	f004 f9f8 	bl	800e520 <tcp_err>
    tcp_arg(tpcb, conn);
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	6938      	ldr	r0, [r7, #16]
 800a134:	f004 f99e 	bl	800e474 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d106      	bne.n	800a14e <lwip_netconn_do_close_internal+0x2aa>
 800a140:	4b06      	ldr	r3, [pc, #24]	@ (800a15c <lwip_netconn_do_close_internal+0x2b8>)
 800a142:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a146:	490b      	ldr	r1, [pc, #44]	@ (800a174 <lwip_netconn_do_close_internal+0x2d0>)
 800a148:	4806      	ldr	r0, [pc, #24]	@ (800a164 <lwip_netconn_do_close_internal+0x2c0>)
 800a14a:	f00c f851 	bl	80161f0 <iprintf>
  return err;
 800a14e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	08017aac 	.word	0x08017aac
 800a160:	08017de8 	.word	0x08017de8
 800a164:	08017af0 	.word	0x08017af0
 800a168:	08009709 	.word	0x08009709
 800a16c:	08009639 	.word	0x08009639
 800a170:	080097b5 	.word	0x080097b5
 800a174:	08017e0c 	.word	0x08017e0c

0800a178 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00d      	beq.n	800a1ae <lwip_netconn_do_delconn+0x36>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a19c:	2b10      	cmp	r3, #16
 800a19e:	d006      	beq.n	800a1ae <lwip_netconn_do_delconn+0x36>
 800a1a0:	4b61      	ldr	r3, [pc, #388]	@ (800a328 <lwip_netconn_do_delconn+0x1b0>)
 800a1a2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a1a6:	4961      	ldr	r1, [pc, #388]	@ (800a32c <lwip_netconn_do_delconn+0x1b4>)
 800a1a8:	4861      	ldr	r0, [pc, #388]	@ (800a330 <lwip_netconn_do_delconn+0x1b8>)
 800a1aa:	f00c f821 	bl	80161f0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <lwip_netconn_do_delconn+0x48>
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d002      	beq.n	800a1c0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d10a      	bne.n	800a1d6 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d10b      	bne.n	800a1de <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d103      	bne.n	800a1de <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	22fb      	movs	r2, #251	@ 0xfb
 800a1da:	711a      	strb	r2, [r3, #4]
 800a1dc:	e098      	b.n	800a310 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d10e      	bne.n	800a202 <lwip_netconn_do_delconn+0x8a>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <lwip_netconn_do_delconn+0x8a>
 800a1f4:	4b4c      	ldr	r3, [pc, #304]	@ (800a328 <lwip_netconn_do_delconn+0x1b0>)
 800a1f6:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a1fa:	494e      	ldr	r1, [pc, #312]	@ (800a334 <lwip_netconn_do_delconn+0x1bc>)
 800a1fc:	484c      	ldr	r0, [pc, #304]	@ (800a330 <lwip_netconn_do_delconn+0x1b8>)
 800a1fe:	f00b fff7 	bl	80161f0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff fdcb 	bl	8009da8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d05f      	beq.n	800a2dc <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a226:	2b10      	cmp	r3, #16
 800a228:	d00d      	beq.n	800a246 <lwip_netconn_do_delconn+0xce>
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	d151      	bne.n	800a2d2 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	4618      	mov	r0, r3
 800a240:	f009 f998 	bl	8013574 <udp_remove>
          break;
 800a244:	e046      	b.n	800a2d4 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <lwip_netconn_do_delconn+0xe6>
 800a250:	4b35      	ldr	r3, [pc, #212]	@ (800a328 <lwip_netconn_do_delconn+0x1b0>)
 800a252:	f240 4294 	movw	r2, #1172	@ 0x494
 800a256:	4938      	ldr	r1, [pc, #224]	@ (800a338 <lwip_netconn_do_delconn+0x1c0>)
 800a258:	4835      	ldr	r0, [pc, #212]	@ (800a330 <lwip_netconn_do_delconn+0x1b8>)
 800a25a:	f00b ffc9 	bl	80161f0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2204      	movs	r2, #4
 800a264:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2203      	movs	r2, #3
 800a26a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7ff fe12 	bl	8009ea4 <lwip_netconn_do_close_internal>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d04b      	beq.n	800a31e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	785b      	ldrb	r3, [r3, #1]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d006      	beq.n	800a29e <lwip_netconn_do_delconn+0x126>
 800a290:	4b25      	ldr	r3, [pc, #148]	@ (800a328 <lwip_netconn_do_delconn+0x1b0>)
 800a292:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a296:	4929      	ldr	r1, [pc, #164]	@ (800a33c <lwip_netconn_do_delconn+0x1c4>)
 800a298:	4825      	ldr	r0, [pc, #148]	@ (800a330 <lwip_netconn_do_delconn+0x1b8>)
 800a29a:	f00b ffa9 	bl	80161f0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a29e:	4828      	ldr	r0, [pc, #160]	@ (800a340 <lwip_netconn_do_delconn+0x1c8>)
 800a2a0:	f00b fe55 	bl	8015f4e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f00b fdac 	bl	8015e0a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a2b2:	4823      	ldr	r0, [pc, #140]	@ (800a340 <lwip_netconn_do_delconn+0x1c8>)
 800a2b4:	f00b fe3c 	bl	8015f30 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d02d      	beq.n	800a31e <lwip_netconn_do_delconn+0x1a6>
 800a2c2:	4b19      	ldr	r3, [pc, #100]	@ (800a328 <lwip_netconn_do_delconn+0x1b0>)
 800a2c4:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a2c8:	491c      	ldr	r1, [pc, #112]	@ (800a33c <lwip_netconn_do_delconn+0x1c4>)
 800a2ca:	4819      	ldr	r0, [pc, #100]	@ (800a330 <lwip_netconn_do_delconn+0x1b8>)
 800a2cc:	f00b ff90 	bl	80161f0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a2d0:	e025      	b.n	800a31e <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800a2d2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d007      	beq.n	800a2f6 <lwip_netconn_do_delconn+0x17e>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	6810      	ldr	r0, [r2, #0]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <lwip_netconn_do_delconn+0x198>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	6810      	ldr	r0, [r2, #0]
 800a30a:	2200      	movs	r2, #0
 800a30c:	2102      	movs	r1, #2
 800a30e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	330c      	adds	r3, #12
 800a316:	4618      	mov	r0, r3
 800a318:	f00b fdc2 	bl	8015ea0 <sys_sem_valid>
 800a31c:	e000      	b.n	800a320 <lwip_netconn_do_delconn+0x1a8>
          return;
 800a31e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	08017aac 	.word	0x08017aac
 800a32c:	08017e1c 	.word	0x08017e1c
 800a330:	08017af0 	.word	0x08017af0
 800a334:	08017e30 	.word	0x08017e30
 800a338:	08017e50 	.word	0x08017e50
 800a33c:	08017e6c 	.word	0x08017e6c
 800a340:	200091ec 	.word	0x200091ec

0800a344 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d025      	beq.n	800a3a6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a364:	2b10      	cmp	r3, #16
 800a366:	d00e      	beq.n	800a386 <lwip_netconn_do_bind+0x42>
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d119      	bne.n	800a3a0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6858      	ldr	r0, [r3, #4]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6899      	ldr	r1, [r3, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	899b      	ldrh	r3, [r3, #12]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f009 f852 	bl	8013424 <udp_bind>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
        break;
 800a384:	e011      	b.n	800a3aa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6858      	ldr	r0, [r3, #4]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	6899      	ldr	r1, [r3, #8]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	899b      	ldrh	r3, [r3, #12]
 800a394:	461a      	mov	r2, r3
 800a396:	f002 ffdd 	bl	800d354 <tcp_bind>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
        break;
 800a39e:	e004      	b.n	800a3aa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a3a0:	23fa      	movs	r3, #250	@ 0xfa
 800a3a2:	73fb      	strb	r3, [r7, #15]
        break;
 800a3a4:	e001      	b.n	800a3aa <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a3a6:	23fa      	movs	r3, #250	@ 0xfa
 800a3a8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	7bfa      	ldrb	r2, [r7, #15]
 800a3ae:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d07f      	beq.n	800a4ce <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3d8:	2b10      	cmp	r3, #16
 800a3da:	d175      	bne.n	800a4c8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	785b      	ldrb	r3, [r3, #1]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d165      	bne.n	800a4b2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	7d1b      	ldrb	r3, [r3, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a3f2:	23fa      	movs	r3, #250	@ 0xfa
 800a3f4:	72fb      	strb	r3, [r7, #11]
 800a3f6:	e06c      	b.n	800a4d2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a3f8:	23ff      	movs	r3, #255	@ 0xff
 800a3fa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f107 020b 	add.w	r2, r7, #11
 800a406:	7cf9      	ldrb	r1, [r7, #19]
 800a408:	4618      	mov	r0, r3
 800a40a:	f003 f85b 	bl	800d4c4 <tcp_listen_with_backlog_and_err>
 800a40e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d05d      	beq.n	800a4d2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3310      	adds	r3, #16
 800a41c:	4618      	mov	r0, r3
 800a41e:	f00b fcae 	bl	8015d7e <sys_mbox_valid>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3310      	adds	r3, #16
 800a42e:	4618      	mov	r0, r3
 800a430:	f00b fc1e 	bl	8015c70 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3310      	adds	r3, #16
 800a43a:	4618      	mov	r0, r3
 800a43c:	f00b fcb0 	bl	8015da0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3314      	adds	r3, #20
 800a44a:	4618      	mov	r0, r3
 800a44c:	f00b fc97 	bl	8015d7e <sys_mbox_valid>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d108      	bne.n	800a468 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3314      	adds	r3, #20
 800a45c:	2106      	movs	r1, #6
 800a45e:	4618      	mov	r0, r3
 800a460:	f00b fbe4 	bl	8015c2c <sys_mbox_new>
 800a464:	4603      	mov	r3, r0
 800a466:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a468:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d118      	bne.n	800a4a2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2202      	movs	r2, #2
 800a476:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f003 fff1 	bl	800e474 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4912      	ldr	r1, [pc, #72]	@ (800a4e4 <lwip_netconn_do_listen+0x12c>)
 800a49a:	4618      	mov	r0, r3
 800a49c:	f004 f862 	bl	800e564 <tcp_accept>
 800a4a0:	e017      	b.n	800a4d2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f002 fe04 	bl	800d0b0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	605a      	str	r2, [r3, #4]
 800a4b0:	e00f      	b.n	800a4d2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d102      	bne.n	800a4c2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	72fb      	strb	r3, [r7, #11]
 800a4c0:	e007      	b.n	800a4d2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a4c2:	23f5      	movs	r3, #245	@ 0xf5
 800a4c4:	72fb      	strb	r3, [r7, #11]
 800a4c6:	e004      	b.n	800a4d2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a4c8:	23f0      	movs	r3, #240	@ 0xf0
 800a4ca:	72fb      	strb	r3, [r7, #11]
 800a4cc:	e001      	b.n	800a4d2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a4ce:	23f5      	movs	r3, #245	@ 0xf5
 800a4d0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a4d2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a4da:	bf00      	nop
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	080099b9 	.word	0x080099b9

0800a4e8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d022      	beq.n	800a54a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a50e:	2b10      	cmp	r3, #16
 800a510:	d11b      	bne.n	800a54a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a51e:	d202      	bcs.n	800a526 <lwip_netconn_do_recv+0x3e>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	b29b      	uxth	r3, r3
 800a524:	e001      	b.n	800a52a <lwip_netconn_do_recv+0x42>
 800a526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a52a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	89fa      	ldrh	r2, [r7, #14]
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f003 f8c8 	bl	800d6cc <tcp_recved>
        remaining -= recved;
 800a53c:	89fb      	ldrh	r3, [r7, #14]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e6      	bne.n	800a518 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a54a:	bf00      	nop
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <lwip_netconn_do_writemore+0x24>
 800a56a:	4b61      	ldr	r3, [pc, #388]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a56c:	f240 6273 	movw	r2, #1651	@ 0x673
 800a570:	4960      	ldr	r1, [pc, #384]	@ (800a6f4 <lwip_netconn_do_writemore+0x1a0>)
 800a572:	4861      	ldr	r0, [pc, #388]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a574:	f00b fe3c 	bl	80161f0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d006      	beq.n	800a58e <lwip_netconn_do_writemore+0x3a>
 800a580:	4b5b      	ldr	r3, [pc, #364]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a582:	f240 6274 	movw	r2, #1652	@ 0x674
 800a586:	495d      	ldr	r1, [pc, #372]	@ (800a6fc <lwip_netconn_do_writemore+0x1a8>)
 800a588:	485b      	ldr	r0, [pc, #364]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a58a:	f00b fe31 	bl	80161f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <lwip_netconn_do_writemore+0x50>
 800a596:	4b56      	ldr	r3, [pc, #344]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a598:	f240 6275 	movw	r2, #1653	@ 0x675
 800a59c:	4958      	ldr	r1, [pc, #352]	@ (800a700 <lwip_netconn_do_writemore+0x1ac>)
 800a59e:	4856      	ldr	r0, [pc, #344]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a5a0:	f00b fe26 	bl	80161f0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <lwip_netconn_do_writemore+0x66>
 800a5ac:	4b50      	ldr	r3, [pc, #320]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a5ae:	f240 6276 	movw	r2, #1654	@ 0x676
 800a5b2:	4954      	ldr	r1, [pc, #336]	@ (800a704 <lwip_netconn_do_writemore+0x1b0>)
 800a5b4:	4850      	ldr	r0, [pc, #320]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a5b6:	f00b fe1b 	bl	80161f0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5be:	699a      	ldr	r2, [r3, #24]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d306      	bcc.n	800a5d8 <lwip_netconn_do_writemore+0x84>
 800a5ca:	4b49      	ldr	r3, [pc, #292]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a5cc:	f240 6277 	movw	r2, #1655	@ 0x677
 800a5d0:	494d      	ldr	r1, [pc, #308]	@ (800a708 <lwip_netconn_do_writemore+0x1b4>)
 800a5d2:	4849      	ldr	r0, [pc, #292]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a5d4:	f00b fe0c 	bl	80161f0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5dc:	899b      	ldrh	r3, [r3, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <lwip_netconn_do_writemore+0x9c>
 800a5e2:	4b43      	ldr	r3, [pc, #268]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a5e4:	f240 6279 	movw	r2, #1657	@ 0x679
 800a5e8:	4948      	ldr	r1, [pc, #288]	@ (800a70c <lwip_netconn_do_writemore+0x1b8>)
 800a5ea:	4843      	ldr	r0, [pc, #268]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a5ec:	f00b fe00 	bl	80161f0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f4:	7f1b      	ldrb	r3, [r3, #28]
 800a5f6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d104      	bne.n	800a610 <lwip_netconn_do_writemore+0xbc>
 800a606:	7ebb      	ldrb	r3, [r7, #26]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <lwip_netconn_do_writemore+0xc0>
 800a610:	2301      	movs	r3, #1
 800a612:	e000      	b.n	800a616 <lwip_netconn_do_writemore+0xc2>
 800a614:	2300      	movs	r3, #0
 800a616:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	4413      	add	r3, r2
 800a628:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a642:	d307      	bcc.n	800a654 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800a644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a648:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a64a:	7ebb      	ldrb	r3, [r7, #26]
 800a64c:	f043 0302 	orr.w	r3, r3, #2
 800a650:	76bb      	strb	r3, [r7, #26]
 800a652:	e001      	b.n	800a658 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a660:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a662:	89fa      	ldrh	r2, [r7, #14]
 800a664:	8bbb      	ldrh	r3, [r7, #28]
 800a666:	429a      	cmp	r2, r3
 800a668:	d216      	bcs.n	800a698 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800a66a:	89fb      	ldrh	r3, [r7, #14]
 800a66c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a66e:	7e3b      	ldrb	r3, [r7, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00d      	beq.n	800a690 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800a674:	8bbb      	ldrh	r3, [r7, #28]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10e      	bne.n	800a698 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <lwip_netconn_do_writemore+0x136>
 800a684:	f06f 0306 	mvn.w	r3, #6
 800a688:	e000      	b.n	800a68c <lwip_netconn_do_writemore+0x138>
 800a68a:	2300      	movs	r3, #0
 800a68c:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a68e:	e08f      	b.n	800a7b0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a690:	7ebb      	ldrb	r3, [r7, #26]
 800a692:	f043 0302 	orr.w	r3, r3, #2
 800a696:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69c:	691a      	ldr	r2, [r3, #16]
 800a69e:	8bbb      	ldrh	r3, [r7, #28]
 800a6a0:	441a      	add	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d906      	bls.n	800a6bc <lwip_netconn_do_writemore+0x168>
 800a6ae:	4b10      	ldr	r3, [pc, #64]	@ (800a6f0 <lwip_netconn_do_writemore+0x19c>)
 800a6b0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a6b4:	4916      	ldr	r1, [pc, #88]	@ (800a710 <lwip_netconn_do_writemore+0x1bc>)
 800a6b6:	4810      	ldr	r0, [pc, #64]	@ (800a6f8 <lwip_netconn_do_writemore+0x1a4>)
 800a6b8:	f00b fd9a 	bl	80161f0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a6bc:	8bbb      	ldrh	r3, [r7, #28]
 800a6be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d103      	bne.n	800a6ce <lwip_netconn_do_writemore+0x17a>
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6cc:	d209      	bcs.n	800a6e2 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a6d2:	8bba      	ldrh	r2, [r7, #28]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d11d      	bne.n	800a714 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6dc:	899b      	ldrh	r3, [r3, #12]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d918      	bls.n	800a714 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a6e6:	7ebb      	ldrb	r3, [r7, #26]
 800a6e8:	f043 0302 	orr.w	r3, r3, #2
 800a6ec:	76bb      	strb	r3, [r7, #26]
 800a6ee:	e013      	b.n	800a718 <lwip_netconn_do_writemore+0x1c4>
 800a6f0:	08017aac 	.word	0x08017aac
 800a6f4:	08017c04 	.word	0x08017c04
 800a6f8:	08017af0 	.word	0x08017af0
 800a6fc:	08017f0c 	.word	0x08017f0c
 800a700:	08017c14 	.word	0x08017c14
 800a704:	08017f2c 	.word	0x08017f2c
 800a708:	08017f44 	.word	0x08017f44
 800a70c:	08017f84 	.word	0x08017f84
 800a710:	08017fac 	.word	0x08017fac
      } else {
        write_more = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6858      	ldr	r0, [r3, #4]
 800a71c:	7ebb      	ldrb	r3, [r7, #26]
 800a71e:	8bba      	ldrh	r2, [r7, #28]
 800a720:	6979      	ldr	r1, [r7, #20]
 800a722:	f006 fde3 	bl	80112ec <tcp_write>
 800a726:	4603      	mov	r3, r0
 800a728:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a72a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d12c      	bne.n	800a78c <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	6999      	ldr	r1, [r3, #24]
 800a738:	8bba      	ldrh	r2, [r7, #28]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	440a      	add	r2, r1
 800a740:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	6919      	ldr	r1, [r3, #16]
 800a748:	8bba      	ldrh	r2, [r7, #28]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74e:	440a      	add	r2, r1
 800a750:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	691a      	ldr	r2, [r3, #16]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	429a      	cmp	r2, r3
 800a762:	d113      	bne.n	800a78c <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a768:	899a      	ldrh	r2, [r3, #12]
 800a76a:	3a01      	subs	r2, #1
 800a76c:	b292      	uxth	r2, r2
 800a76e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a774:	899b      	ldrh	r3, [r3, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d008      	beq.n	800a78c <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	3208      	adds	r2, #8
 800a782:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a788:	2200      	movs	r2, #0
 800a78a:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a78c:	7e7b      	ldrb	r3, [r7, #25]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <lwip_netconn_do_writemore+0x248>
 800a792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f43f af3e 	beq.w	800a618 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a79c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <lwip_netconn_do_writemore+0x25a>
 800a7a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ac:	d136      	bne.n	800a81c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800a7ae:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a7b0:	7e3b      	ldrb	r3, [r7, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01b      	beq.n	800a7ee <lwip_netconn_do_writemore+0x29a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ba:	699a      	ldr	r2, [r3, #24]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d213      	bcs.n	800a7ee <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d005      	beq.n	800a7da <lwip_netconn_do_writemore+0x286>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2103      	movs	r1, #3
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7e0:	f043 0310 	orr.w	r3, r3, #16
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f883 2020 	strb.w	r2, [r3, #32]
 800a7ec:	e016      	b.n	800a81c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a7f6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a7fa:	d305      	bcc.n	800a808 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a804:	2b04      	cmp	r3, #4
 800a806:	d909      	bls.n	800a81c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <lwip_netconn_do_writemore+0x2c8>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a814:	2200      	movs	r2, #0
 800a816:	2103      	movs	r1, #3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a81c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d11d      	bne.n	800a860 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	429a      	cmp	r2, r3
 800a832:	d002      	beq.n	800a83a <lwip_netconn_do_writemore+0x2e6>
 800a834:	7e3b      	ldrb	r3, [r7, #24]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a83a:	2301      	movs	r3, #1
 800a83c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	4618      	mov	r0, r3
 800a844:	f007 fb3c 	bl	8011ec0 <tcp_output>
 800a848:	4603      	mov	r3, r0
 800a84a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a84c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a850:	f113 0f04 	cmn.w	r3, #4
 800a854:	d12c      	bne.n	800a8b0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a856:	7b3b      	ldrb	r3, [r7, #12]
 800a858:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a85a:	2301      	movs	r3, #1
 800a85c:	76fb      	strb	r3, [r7, #27]
 800a85e:	e027      	b.n	800a8b0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800a860:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d120      	bne.n	800a8ac <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	4618      	mov	r0, r3
 800a870:	f007 fb26 	bl	8011ec0 <tcp_output>
 800a874:	4603      	mov	r3, r0
 800a876:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a87c:	f113 0f04 	cmn.w	r3, #4
 800a880:	d104      	bne.n	800a88c <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a882:	7b7b      	ldrb	r3, [r7, #13]
 800a884:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a886:	2301      	movs	r3, #1
 800a888:	76fb      	strb	r3, [r7, #27]
 800a88a:	e011      	b.n	800a8b0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800a88c:	7e3b      	ldrb	r3, [r7, #24]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00e      	beq.n	800a8b0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <lwip_netconn_do_writemore+0x34e>
 800a89c:	f06f 0306 	mvn.w	r3, #6
 800a8a0:	e000      	b.n	800a8a4 <lwip_netconn_do_writemore+0x350>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	76fb      	strb	r3, [r7, #27]
 800a8aa:	e001      	b.n	800a8b0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a8b0:	7efb      	ldrb	r3, [r7, #27]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d015      	beq.n	800a8e2 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	330c      	adds	r3, #12
 800a8be:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	7ffa      	ldrb	r2, [r7, #31]
 800a8c6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d006      	beq.n	800a8e8 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	f00b fac6 	bl	8015e6c <sys_sem_signal>
 800a8e0:	e002      	b.n	800a8e8 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e6:	e000      	b.n	800a8ea <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3720      	adds	r7, #32
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop

0800a8f4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe fd08 	bl	800931a <netconn_err>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d166      	bne.n	800a9e4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a920:	2b10      	cmp	r3, #16
 800a922:	d15d      	bne.n	800a9e0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	785b      	ldrb	r3, [r3, #1]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a92e:	23fb      	movs	r3, #251	@ 0xfb
 800a930:	73fb      	strb	r3, [r7, #15]
 800a932:	e057      	b.n	800a9e4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d04d      	beq.n	800a9da <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2201      	movs	r2, #1
 800a944:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d006      	beq.n	800a95e <lwip_netconn_do_write+0x6a>
 800a950:	4b28      	ldr	r3, [pc, #160]	@ (800a9f4 <lwip_netconn_do_write+0x100>)
 800a952:	f240 7223 	movw	r2, #1827	@ 0x723
 800a956:	4928      	ldr	r1, [pc, #160]	@ (800a9f8 <lwip_netconn_do_write+0x104>)
 800a958:	4828      	ldr	r0, [pc, #160]	@ (800a9fc <lwip_netconn_do_write+0x108>)
 800a95a:	f00b fc49 	bl	80161f0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <lwip_netconn_do_write+0x80>
 800a966:	4b23      	ldr	r3, [pc, #140]	@ (800a9f4 <lwip_netconn_do_write+0x100>)
 800a968:	f240 7224 	movw	r2, #1828	@ 0x724
 800a96c:	4924      	ldr	r1, [pc, #144]	@ (800aa00 <lwip_netconn_do_write+0x10c>)
 800a96e:	4823      	ldr	r0, [pc, #140]	@ (800a9fc <lwip_netconn_do_write+0x108>)
 800a970:	f00b fc3e 	bl	80161f0 <iprintf>
        msg->conn->current_msg = msg;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fde6 	bl	800a554 <lwip_netconn_do_writemore>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d02e      	beq.n	800a9ec <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	785b      	ldrb	r3, [r3, #1]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d006      	beq.n	800a9a6 <lwip_netconn_do_write+0xb2>
 800a998:	4b16      	ldr	r3, [pc, #88]	@ (800a9f4 <lwip_netconn_do_write+0x100>)
 800a99a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a99e:	4919      	ldr	r1, [pc, #100]	@ (800aa04 <lwip_netconn_do_write+0x110>)
 800a9a0:	4816      	ldr	r0, [pc, #88]	@ (800a9fc <lwip_netconn_do_write+0x108>)
 800a9a2:	f00b fc25 	bl	80161f0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a9a6:	4818      	ldr	r0, [pc, #96]	@ (800aa08 <lwip_netconn_do_write+0x114>)
 800a9a8:	f00b fad1 	bl	8015f4e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	330c      	adds	r3, #12
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f00b fa28 	bl	8015e0a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a9ba:	4813      	ldr	r0, [pc, #76]	@ (800aa08 <lwip_netconn_do_write+0x114>)
 800a9bc:	f00b fab8 	bl	8015f30 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d110      	bne.n	800a9ec <lwip_netconn_do_write+0xf8>
 800a9ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f4 <lwip_netconn_do_write+0x100>)
 800a9cc:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a9d0:	490c      	ldr	r1, [pc, #48]	@ (800aa04 <lwip_netconn_do_write+0x110>)
 800a9d2:	480a      	ldr	r0, [pc, #40]	@ (800a9fc <lwip_netconn_do_write+0x108>)
 800a9d4:	f00b fc0c 	bl	80161f0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a9d8:	e008      	b.n	800a9ec <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a9da:	23f5      	movs	r3, #245	@ 0xf5
 800a9dc:	73fb      	strb	r3, [r7, #15]
 800a9de:	e001      	b.n	800a9e4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a9e0:	23fa      	movs	r3, #250	@ 0xfa
 800a9e2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	7bfa      	ldrb	r2, [r7, #15]
 800a9e8:	711a      	strb	r2, [r3, #4]
 800a9ea:	e000      	b.n	800a9ee <lwip_netconn_do_write+0xfa>
        return;
 800a9ec:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	08017aac 	.word	0x08017aac
 800a9f8:	08017e50 	.word	0x08017e50
 800a9fc:	08017af0 	.word	0x08017af0
 800aa00:	08017fd8 	.word	0x08017fd8
 800aa04:	08017e6c 	.word	0x08017e6c
 800aa08:	200091ec 	.word	0x200091ec

0800aa0c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d069      	beq.n	800aafe <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d162      	bne.n	800aafe <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d002      	beq.n	800aa46 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800aa40:	7afb      	ldrb	r3, [r7, #11]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d05b      	beq.n	800aafe <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d103      	bne.n	800aa54 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	22f5      	movs	r2, #245	@ 0xf5
 800aa50:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800aa52:	e059      	b.n	800ab08 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d103      	bne.n	800aa62 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	22fb      	movs	r2, #251	@ 0xfb
 800aa5e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800aa60:	e052      	b.n	800ab08 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	7a1b      	ldrb	r3, [r3, #8]
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d004      	beq.n	800aa78 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff f998 	bl	8009da8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d006      	beq.n	800aa90 <lwip_netconn_do_close+0x84>
 800aa82:	4b23      	ldr	r3, [pc, #140]	@ (800ab10 <lwip_netconn_do_close+0x104>)
 800aa84:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800aa88:	4922      	ldr	r1, [pc, #136]	@ (800ab14 <lwip_netconn_do_close+0x108>)
 800aa8a:	4823      	ldr	r0, [pc, #140]	@ (800ab18 <lwip_netconn_do_close+0x10c>)
 800aa8c:	f00b fbb0 	bl	80161f0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2204      	movs	r2, #4
 800aa96:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff f9fc 	bl	8009ea4 <lwip_netconn_do_close_internal>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d029      	beq.n	800ab06 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d006      	beq.n	800aaca <lwip_netconn_do_close+0xbe>
 800aabc:	4b14      	ldr	r3, [pc, #80]	@ (800ab10 <lwip_netconn_do_close+0x104>)
 800aabe:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800aac2:	4916      	ldr	r1, [pc, #88]	@ (800ab1c <lwip_netconn_do_close+0x110>)
 800aac4:	4814      	ldr	r0, [pc, #80]	@ (800ab18 <lwip_netconn_do_close+0x10c>)
 800aac6:	f00b fb93 	bl	80161f0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800aaca:	4815      	ldr	r0, [pc, #84]	@ (800ab20 <lwip_netconn_do_close+0x114>)
 800aacc:	f00b fa3f 	bl	8015f4e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	330c      	adds	r3, #12
 800aad6:	2100      	movs	r1, #0
 800aad8:	4618      	mov	r0, r3
 800aada:	f00b f996 	bl	8015e0a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800aade:	4810      	ldr	r0, [pc, #64]	@ (800ab20 <lwip_netconn_do_close+0x114>)
 800aae0:	f00b fa26 	bl	8015f30 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	785b      	ldrb	r3, [r3, #1]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00b      	beq.n	800ab06 <lwip_netconn_do_close+0xfa>
 800aaee:	4b08      	ldr	r3, [pc, #32]	@ (800ab10 <lwip_netconn_do_close+0x104>)
 800aaf0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800aaf4:	4909      	ldr	r1, [pc, #36]	@ (800ab1c <lwip_netconn_do_close+0x110>)
 800aaf6:	4808      	ldr	r0, [pc, #32]	@ (800ab18 <lwip_netconn_do_close+0x10c>)
 800aaf8:	f00b fb7a 	bl	80161f0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800aafc:	e003      	b.n	800ab06 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	22f5      	movs	r2, #245	@ 0xf5
 800ab02:	711a      	strb	r2, [r3, #4]
 800ab04:	e000      	b.n	800ab08 <lwip_netconn_do_close+0xfc>
      return;
 800ab06:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	08017aac 	.word	0x08017aac
 800ab14:	08017e50 	.word	0x08017e50
 800ab18:	08017af0 	.word	0x08017af0
 800ab1c:	08017e6c 	.word	0x08017e6c
 800ab20:	200091ec 	.word	0x200091ec

0800ab24 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d013      	beq.n	800ab5a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 fdea 	bl	800c718 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	605a      	str	r2, [r3, #4]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	2006      	movs	r0, #6
 800ab56:	f000 ff3b 	bl	800b9d0 <memp_free>
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d108      	bne.n	800ab84 <netbuf_next+0x20>
 800ab72:	4b11      	ldr	r3, [pc, #68]	@ (800abb8 <netbuf_next+0x54>)
 800ab74:	22e0      	movs	r2, #224	@ 0xe0
 800ab76:	4911      	ldr	r1, [pc, #68]	@ (800abbc <netbuf_next+0x58>)
 800ab78:	4811      	ldr	r0, [pc, #68]	@ (800abc0 <netbuf_next+0x5c>)
 800ab7a:	f00b fb39 	bl	80161f0 <iprintf>
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	e014      	b.n	800abae <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d102      	bne.n	800ab94 <netbuf_next+0x30>
    return -1;
 800ab8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab92:	e00c      	b.n	800abae <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <netbuf_next+0x48>
    return 1;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e000      	b.n	800abae <netbuf_next+0x4a>
  }
  return 0;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	08018004 	.word	0x08018004
 800abbc:	08018164 	.word	0x08018164
 800abc0:	08018054 	.word	0x08018054

0800abc4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800abce:	f008 fa2f 	bl	8013030 <sys_timeouts_sleeptime>
 800abd2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	d10b      	bne.n	800abf4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800abdc:	4813      	ldr	r0, [pc, #76]	@ (800ac2c <tcpip_timeouts_mbox_fetch+0x68>)
 800abde:	f00b f9b6 	bl	8015f4e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800abe2:	2200      	movs	r2, #0
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f00b f86e 	bl	8015cc8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800abec:	480f      	ldr	r0, [pc, #60]	@ (800ac2c <tcpip_timeouts_mbox_fetch+0x68>)
 800abee:	f00b f99f 	bl	8015f30 <sys_mutex_lock>
    return;
 800abf2:	e018      	b.n	800ac26 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d102      	bne.n	800ac00 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800abfa:	f008 f9df 	bl	8012fbc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800abfe:	e7e6      	b.n	800abce <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ac00:	480a      	ldr	r0, [pc, #40]	@ (800ac2c <tcpip_timeouts_mbox_fetch+0x68>)
 800ac02:	f00b f9a4 	bl	8015f4e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f00b f85c 	bl	8015cc8 <sys_arch_mbox_fetch>
 800ac10:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ac12:	4806      	ldr	r0, [pc, #24]	@ (800ac2c <tcpip_timeouts_mbox_fetch+0x68>)
 800ac14:	f00b f98c 	bl	8015f30 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d102      	bne.n	800ac26 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ac20:	f008 f9cc 	bl	8012fbc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac24:	e7d3      	b.n	800abce <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	200091ec 	.word	0x200091ec

0800ac30 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ac38:	4810      	ldr	r0, [pc, #64]	@ (800ac7c <tcpip_thread+0x4c>)
 800ac3a:	f00b f979 	bl	8015f30 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ac3e:	4b10      	ldr	r3, [pc, #64]	@ (800ac80 <tcpip_thread+0x50>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ac46:	4b0e      	ldr	r3, [pc, #56]	@ (800ac80 <tcpip_thread+0x50>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a0e      	ldr	r2, [pc, #56]	@ (800ac84 <tcpip_thread+0x54>)
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac52:	f107 030c 	add.w	r3, r7, #12
 800ac56:	4619      	mov	r1, r3
 800ac58:	480b      	ldr	r0, [pc, #44]	@ (800ac88 <tcpip_thread+0x58>)
 800ac5a:	f7ff ffb3 	bl	800abc4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d106      	bne.n	800ac72 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ac64:	4b09      	ldr	r3, [pc, #36]	@ (800ac8c <tcpip_thread+0x5c>)
 800ac66:	2291      	movs	r2, #145	@ 0x91
 800ac68:	4909      	ldr	r1, [pc, #36]	@ (800ac90 <tcpip_thread+0x60>)
 800ac6a:	480a      	ldr	r0, [pc, #40]	@ (800ac94 <tcpip_thread+0x64>)
 800ac6c:	f00b fac0 	bl	80161f0 <iprintf>
      continue;
 800ac70:	e003      	b.n	800ac7a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f80f 	bl	800ac98 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac7a:	e7ea      	b.n	800ac52 <tcpip_thread+0x22>
 800ac7c:	200091ec 	.word	0x200091ec
 800ac80:	200091e0 	.word	0x200091e0
 800ac84:	200091e4 	.word	0x200091e4
 800ac88:	200091e8 	.word	0x200091e8
 800ac8c:	0801819c 	.word	0x0801819c
 800ac90:	080181cc 	.word	0x080181cc
 800ac94:	080181ec 	.word	0x080181ec

0800ac98 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d026      	beq.n	800acf6 <tcpip_thread_handle_msg+0x5e>
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	dc2b      	bgt.n	800ad04 <tcpip_thread_handle_msg+0x6c>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <tcpip_thread_handle_msg+0x1e>
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d015      	beq.n	800ace0 <tcpip_thread_handle_msg+0x48>
 800acb4:	e026      	b.n	800ad04 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6850      	ldr	r0, [r2, #4]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	6892      	ldr	r2, [r2, #8]
 800acc2:	4611      	mov	r1, r2
 800acc4:	4798      	blx	r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f001 fd21 	bl	800c718 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	2009      	movs	r0, #9
 800acda:	f000 fe79 	bl	800b9d0 <memp_free>
      break;
 800acde:	e018      	b.n	800ad12 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6892      	ldr	r2, [r2, #8]
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	2008      	movs	r0, #8
 800acf0:	f000 fe6e 	bl	800b9d0 <memp_free>
      break;
 800acf4:	e00d      	b.n	800ad12 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	6892      	ldr	r2, [r2, #8]
 800acfe:	4610      	mov	r0, r2
 800ad00:	4798      	blx	r3
      break;
 800ad02:	e006      	b.n	800ad12 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <tcpip_thread_handle_msg+0x84>)
 800ad06:	22cf      	movs	r2, #207	@ 0xcf
 800ad08:	4905      	ldr	r1, [pc, #20]	@ (800ad20 <tcpip_thread_handle_msg+0x88>)
 800ad0a:	4806      	ldr	r0, [pc, #24]	@ (800ad24 <tcpip_thread_handle_msg+0x8c>)
 800ad0c:	f00b fa70 	bl	80161f0 <iprintf>
      break;
 800ad10:	bf00      	nop
  }
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0801819c 	.word	0x0801819c
 800ad20:	080181cc 	.word	0x080181cc
 800ad24:	080181ec 	.word	0x080181ec

0800ad28 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ad34:	481a      	ldr	r0, [pc, #104]	@ (800ada0 <tcpip_inpkt+0x78>)
 800ad36:	f00b f822 	bl	8015d7e <sys_mbox_valid>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d105      	bne.n	800ad4c <tcpip_inpkt+0x24>
 800ad40:	4b18      	ldr	r3, [pc, #96]	@ (800ada4 <tcpip_inpkt+0x7c>)
 800ad42:	22fc      	movs	r2, #252	@ 0xfc
 800ad44:	4918      	ldr	r1, [pc, #96]	@ (800ada8 <tcpip_inpkt+0x80>)
 800ad46:	4819      	ldr	r0, [pc, #100]	@ (800adac <tcpip_inpkt+0x84>)
 800ad48:	f00b fa52 	bl	80161f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ad4c:	2009      	movs	r0, #9
 800ad4e:	f000 fdc9 	bl	800b8e4 <memp_malloc>
 800ad52:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5e:	e01a      	b.n	800ad96 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ad78:	6979      	ldr	r1, [r7, #20]
 800ad7a:	4809      	ldr	r0, [pc, #36]	@ (800ada0 <tcpip_inpkt+0x78>)
 800ad7c:	f00a ff8a 	bl	8015c94 <sys_mbox_trypost>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d006      	beq.n	800ad94 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad86:	6979      	ldr	r1, [r7, #20]
 800ad88:	2009      	movs	r0, #9
 800ad8a:	f000 fe21 	bl	800b9d0 <memp_free>
    return ERR_MEM;
 800ad8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad92:	e000      	b.n	800ad96 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ad94:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	200091e8 	.word	0x200091e8
 800ada4:	0801819c 	.word	0x0801819c
 800ada8:	08018214 	.word	0x08018214
 800adac:	080181ec 	.word	0x080181ec

0800adb0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adc0:	f003 0318 	and.w	r3, r3, #24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d006      	beq.n	800add6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800adc8:	4a08      	ldr	r2, [pc, #32]	@ (800adec <tcpip_input+0x3c>)
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7ff ffab 	bl	800ad28 <tcpip_inpkt>
 800add2:	4603      	mov	r3, r0
 800add4:	e005      	b.n	800ade2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800add6:	4a06      	ldr	r2, [pc, #24]	@ (800adf0 <tcpip_input+0x40>)
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff ffa4 	bl	800ad28 <tcpip_inpkt>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	08015a81 	.word	0x08015a81
 800adf0:	08014989 	.word	0x08014989

0800adf4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800adfe:	4819      	ldr	r0, [pc, #100]	@ (800ae64 <tcpip_try_callback+0x70>)
 800ae00:	f00a ffbd 	bl	8015d7e <sys_mbox_valid>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d106      	bne.n	800ae18 <tcpip_try_callback+0x24>
 800ae0a:	4b17      	ldr	r3, [pc, #92]	@ (800ae68 <tcpip_try_callback+0x74>)
 800ae0c:	f240 125d 	movw	r2, #349	@ 0x15d
 800ae10:	4916      	ldr	r1, [pc, #88]	@ (800ae6c <tcpip_try_callback+0x78>)
 800ae12:	4817      	ldr	r0, [pc, #92]	@ (800ae70 <tcpip_try_callback+0x7c>)
 800ae14:	f00b f9ec 	bl	80161f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ae18:	2008      	movs	r0, #8
 800ae1a:	f000 fd63 	bl	800b8e4 <memp_malloc>
 800ae1e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ae26:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2a:	e017      	b.n	800ae5c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ae3e:	68f9      	ldr	r1, [r7, #12]
 800ae40:	4808      	ldr	r0, [pc, #32]	@ (800ae64 <tcpip_try_callback+0x70>)
 800ae42:	f00a ff27 	bl	8015c94 <sys_mbox_trypost>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ae4c:	68f9      	ldr	r1, [r7, #12]
 800ae4e:	2008      	movs	r0, #8
 800ae50:	f000 fdbe 	bl	800b9d0 <memp_free>
    return ERR_MEM;
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	e000      	b.n	800ae5c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	200091e8 	.word	0x200091e8
 800ae68:	0801819c 	.word	0x0801819c
 800ae6c:	08018214 	.word	0x08018214
 800ae70:	080181ec 	.word	0x080181ec

0800ae74 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ae80:	4806      	ldr	r0, [pc, #24]	@ (800ae9c <tcpip_send_msg_wait_sem+0x28>)
 800ae82:	f00b f855 	bl	8015f30 <sys_mutex_lock>
  fn(apimsg);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	68b8      	ldr	r0, [r7, #8]
 800ae8a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ae8c:	4803      	ldr	r0, [pc, #12]	@ (800ae9c <tcpip_send_msg_wait_sem+0x28>)
 800ae8e:	f00b f85e 	bl	8015f4e <sys_mutex_unlock>
  return ERR_OK;
 800ae92:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200091ec 	.word	0x200091ec

0800aea0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800aeaa:	f000 f871 	bl	800af90 <lwip_init>

  tcpip_init_done = initfunc;
 800aeae:	4a17      	ldr	r2, [pc, #92]	@ (800af0c <tcpip_init+0x6c>)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800aeb4:	4a16      	ldr	r2, [pc, #88]	@ (800af10 <tcpip_init+0x70>)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800aeba:	2106      	movs	r1, #6
 800aebc:	4815      	ldr	r0, [pc, #84]	@ (800af14 <tcpip_init+0x74>)
 800aebe:	f00a feb5 	bl	8015c2c <sys_mbox_new>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d006      	beq.n	800aed6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800aec8:	4b13      	ldr	r3, [pc, #76]	@ (800af18 <tcpip_init+0x78>)
 800aeca:	f240 2261 	movw	r2, #609	@ 0x261
 800aece:	4913      	ldr	r1, [pc, #76]	@ (800af1c <tcpip_init+0x7c>)
 800aed0:	4813      	ldr	r0, [pc, #76]	@ (800af20 <tcpip_init+0x80>)
 800aed2:	f00b f98d 	bl	80161f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aed6:	4813      	ldr	r0, [pc, #76]	@ (800af24 <tcpip_init+0x84>)
 800aed8:	f00b f80e 	bl	8015ef8 <sys_mutex_new>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d006      	beq.n	800aef0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800aee2:	4b0d      	ldr	r3, [pc, #52]	@ (800af18 <tcpip_init+0x78>)
 800aee4:	f240 2265 	movw	r2, #613	@ 0x265
 800aee8:	490f      	ldr	r1, [pc, #60]	@ (800af28 <tcpip_init+0x88>)
 800aeea:	480d      	ldr	r0, [pc, #52]	@ (800af20 <tcpip_init+0x80>)
 800aeec:	f00b f980 	bl	80161f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aef0:	2300      	movs	r3, #0
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aef8:	2200      	movs	r2, #0
 800aefa:	490c      	ldr	r1, [pc, #48]	@ (800af2c <tcpip_init+0x8c>)
 800aefc:	480c      	ldr	r0, [pc, #48]	@ (800af30 <tcpip_init+0x90>)
 800aefe:	f00b f833 	bl	8015f68 <sys_thread_new>
}
 800af02:	bf00      	nop
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200091e0 	.word	0x200091e0
 800af10:	200091e4 	.word	0x200091e4
 800af14:	200091e8 	.word	0x200091e8
 800af18:	0801819c 	.word	0x0801819c
 800af1c:	08018224 	.word	0x08018224
 800af20:	080181ec 	.word	0x080181ec
 800af24:	200091ec 	.word	0x200091ec
 800af28:	08018248 	.word	0x08018248
 800af2c:	0800ac31 	.word	0x0800ac31
 800af30:	0801826c 	.word	0x0801826c

0800af34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800af3e:	88fb      	ldrh	r3, [r7, #6]
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	b21a      	sxth	r2, r3
 800af44:	88fb      	ldrh	r3, [r7, #6]
 800af46:	0a1b      	lsrs	r3, r3, #8
 800af48:	b29b      	uxth	r3, r3
 800af4a:	b21b      	sxth	r3, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	b21b      	sxth	r3, r3
 800af50:	b29b      	uxth	r3, r3
}
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	061a      	lsls	r2, r3, #24
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	021b      	lsls	r3, r3, #8
 800af6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af72:	431a      	orrs	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	0a1b      	lsrs	r3, r3, #8
 800af78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	0e1b      	lsrs	r3, r3, #24
 800af82:	4313      	orrs	r3, r2
}
 800af84:	4618      	mov	r0, r3
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800af9a:	f00a ff9f 	bl	8015edc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800af9e:	f000 f8d5 	bl	800b14c <mem_init>
  memp_init();
 800afa2:	f000 fc31 	bl	800b808 <memp_init>
  pbuf_init();
  netif_init();
 800afa6:	f000 fd3d 	bl	800ba24 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800afaa:	f008 f879 	bl	80130a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800afae:	f001 fe6f 	bl	800cc90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800afb2:	f007 ffbb 	bl	8012f2c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800afca:	4b05      	ldr	r3, [pc, #20]	@ (800afe0 <ptr_to_mem+0x20>)
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	88fb      	ldrh	r3, [r7, #6]
 800afd0:	4413      	add	r3, r2
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	2000ba1c 	.word	0x2000ba1c

0800afe4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800afec:	4b05      	ldr	r3, [pc, #20]	@ (800b004 <mem_to_ptr+0x20>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	b29b      	uxth	r3, r3
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	2000ba1c 	.word	0x2000ba1c

0800b008 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b008:	b590      	push	{r4, r7, lr}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b010:	4b45      	ldr	r3, [pc, #276]	@ (800b128 <plug_holes+0x120>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	429a      	cmp	r2, r3
 800b018:	d206      	bcs.n	800b028 <plug_holes+0x20>
 800b01a:	4b44      	ldr	r3, [pc, #272]	@ (800b12c <plug_holes+0x124>)
 800b01c:	f240 12df 	movw	r2, #479	@ 0x1df
 800b020:	4943      	ldr	r1, [pc, #268]	@ (800b130 <plug_holes+0x128>)
 800b022:	4844      	ldr	r0, [pc, #272]	@ (800b134 <plug_holes+0x12c>)
 800b024:	f00b f8e4 	bl	80161f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b028:	4b43      	ldr	r3, [pc, #268]	@ (800b138 <plug_holes+0x130>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d306      	bcc.n	800b040 <plug_holes+0x38>
 800b032:	4b3e      	ldr	r3, [pc, #248]	@ (800b12c <plug_holes+0x124>)
 800b034:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b038:	4940      	ldr	r1, [pc, #256]	@ (800b13c <plug_holes+0x134>)
 800b03a:	483e      	ldr	r0, [pc, #248]	@ (800b134 <plug_holes+0x12c>)
 800b03c:	f00b f8d8 	bl	80161f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	791b      	ldrb	r3, [r3, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d006      	beq.n	800b056 <plug_holes+0x4e>
 800b048:	4b38      	ldr	r3, [pc, #224]	@ (800b12c <plug_holes+0x124>)
 800b04a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b04e:	493c      	ldr	r1, [pc, #240]	@ (800b140 <plug_holes+0x138>)
 800b050:	4838      	ldr	r0, [pc, #224]	@ (800b134 <plug_holes+0x12c>)
 800b052:	f00b f8cd 	bl	80161f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b05e:	d906      	bls.n	800b06e <plug_holes+0x66>
 800b060:	4b32      	ldr	r3, [pc, #200]	@ (800b12c <plug_holes+0x124>)
 800b062:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b066:	4937      	ldr	r1, [pc, #220]	@ (800b144 <plug_holes+0x13c>)
 800b068:	4832      	ldr	r0, [pc, #200]	@ (800b134 <plug_holes+0x12c>)
 800b06a:	f00b f8c1 	bl	80161f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff ffa4 	bl	800afc0 <ptr_to_mem>
 800b078:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d024      	beq.n	800b0cc <plug_holes+0xc4>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d120      	bne.n	800b0cc <plug_holes+0xc4>
 800b08a:	4b2b      	ldr	r3, [pc, #172]	@ (800b138 <plug_holes+0x130>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	429a      	cmp	r2, r3
 800b092:	d01b      	beq.n	800b0cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b094:	4b2c      	ldr	r3, [pc, #176]	@ (800b148 <plug_holes+0x140>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d102      	bne.n	800b0a4 <plug_holes+0x9c>
      lfree = mem;
 800b09e:	4a2a      	ldr	r2, [pc, #168]	@ (800b148 <plug_holes+0x140>)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	881a      	ldrh	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b0b4:	d00a      	beq.n	800b0cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff ff80 	bl	800afc0 <ptr_to_mem>
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff ff8e 	bl	800afe4 <mem_to_ptr>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	885b      	ldrh	r3, [r3, #2]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff ff75 	bl	800afc0 <ptr_to_mem>
 800b0d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d01f      	beq.n	800b120 <plug_holes+0x118>
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	791b      	ldrb	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d11b      	bne.n	800b120 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b0e8:	4b17      	ldr	r3, [pc, #92]	@ (800b148 <plug_holes+0x140>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d102      	bne.n	800b0f8 <plug_holes+0xf0>
      lfree = pmem;
 800b0f2:	4a15      	ldr	r2, [pc, #84]	@ (800b148 <plug_holes+0x140>)
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	881a      	ldrh	r2, [r3, #0]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b108:	d00a      	beq.n	800b120 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff ff56 	bl	800afc0 <ptr_to_mem>
 800b114:	4604      	mov	r4, r0
 800b116:	68b8      	ldr	r0, [r7, #8]
 800b118:	f7ff ff64 	bl	800afe4 <mem_to_ptr>
 800b11c:	4603      	mov	r3, r0
 800b11e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b120:	bf00      	nop
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	bd90      	pop	{r4, r7, pc}
 800b128:	2000ba1c 	.word	0x2000ba1c
 800b12c:	0801827c 	.word	0x0801827c
 800b130:	080182ac 	.word	0x080182ac
 800b134:	080182c4 	.word	0x080182c4
 800b138:	2000ba20 	.word	0x2000ba20
 800b13c:	080182ec 	.word	0x080182ec
 800b140:	08018308 	.word	0x08018308
 800b144:	08018324 	.word	0x08018324
 800b148:	2000ba28 	.word	0x2000ba28

0800b14c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b152:	4b1f      	ldr	r3, [pc, #124]	@ (800b1d0 <mem_init+0x84>)
 800b154:	3303      	adds	r3, #3
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	461a      	mov	r2, r3
 800b15c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d4 <mem_init+0x88>)
 800b15e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b160:	4b1c      	ldr	r3, [pc, #112]	@ (800b1d4 <mem_init+0x88>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b16c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b17a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b17e:	f7ff ff1f 	bl	800afc0 <ptr_to_mem>
 800b182:	4603      	mov	r3, r0
 800b184:	4a14      	ldr	r2, [pc, #80]	@ (800b1d8 <mem_init+0x8c>)
 800b186:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b188:	4b13      	ldr	r3, [pc, #76]	@ (800b1d8 <mem_init+0x8c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2201      	movs	r2, #1
 800b18e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b190:	4b11      	ldr	r3, [pc, #68]	@ (800b1d8 <mem_init+0x8c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b198:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b19a:	4b0f      	ldr	r3, [pc, #60]	@ (800b1d8 <mem_init+0x8c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b1a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b1a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d4 <mem_init+0x88>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a0c      	ldr	r2, [pc, #48]	@ (800b1dc <mem_init+0x90>)
 800b1aa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b1ac:	480c      	ldr	r0, [pc, #48]	@ (800b1e0 <mem_init+0x94>)
 800b1ae:	f00a fea3 	bl	8015ef8 <sys_mutex_new>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d006      	beq.n	800b1c6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e4 <mem_init+0x98>)
 800b1ba:	f240 221f 	movw	r2, #543	@ 0x21f
 800b1be:	490a      	ldr	r1, [pc, #40]	@ (800b1e8 <mem_init+0x9c>)
 800b1c0:	480a      	ldr	r0, [pc, #40]	@ (800b1ec <mem_init+0xa0>)
 800b1c2:	f00b f815 	bl	80161f0 <iprintf>
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20009208 	.word	0x20009208
 800b1d4:	2000ba1c 	.word	0x2000ba1c
 800b1d8:	2000ba20 	.word	0x2000ba20
 800b1dc:	2000ba28 	.word	0x2000ba28
 800b1e0:	2000ba24 	.word	0x2000ba24
 800b1e4:	0801827c 	.word	0x0801827c
 800b1e8:	08018350 	.word	0x08018350
 800b1ec:	080182c4 	.word	0x080182c4

0800b1f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff fef3 	bl	800afe4 <mem_to_ptr>
 800b1fe:	4603      	mov	r3, r0
 800b200:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff feda 	bl	800afc0 <ptr_to_mem>
 800b20c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	885b      	ldrh	r3, [r3, #2]
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff fed4 	bl	800afc0 <ptr_to_mem>
 800b218:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b222:	d818      	bhi.n	800b256 <mem_link_valid+0x66>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	885b      	ldrh	r3, [r3, #2]
 800b228:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b22c:	d813      	bhi.n	800b256 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b232:	8afa      	ldrh	r2, [r7, #22]
 800b234:	429a      	cmp	r2, r3
 800b236:	d004      	beq.n	800b242 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	8afa      	ldrh	r2, [r7, #22]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d109      	bne.n	800b256 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b242:	4b08      	ldr	r3, [pc, #32]	@ (800b264 <mem_link_valid+0x74>)
 800b244:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d006      	beq.n	800b25a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	885b      	ldrh	r3, [r3, #2]
 800b250:	8afa      	ldrh	r2, [r7, #22]
 800b252:	429a      	cmp	r2, r3
 800b254:	d001      	beq.n	800b25a <mem_link_valid+0x6a>
    return 0;
 800b256:	2300      	movs	r3, #0
 800b258:	e000      	b.n	800b25c <mem_link_valid+0x6c>
  }
  return 1;
 800b25a:	2301      	movs	r3, #1
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	2000ba20 	.word	0x2000ba20

0800b268 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d070      	beq.n	800b358 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f003 0303 	and.w	r3, r3, #3
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00d      	beq.n	800b29c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b280:	4b37      	ldr	r3, [pc, #220]	@ (800b360 <mem_free+0xf8>)
 800b282:	f240 2273 	movw	r2, #627	@ 0x273
 800b286:	4937      	ldr	r1, [pc, #220]	@ (800b364 <mem_free+0xfc>)
 800b288:	4837      	ldr	r0, [pc, #220]	@ (800b368 <mem_free+0x100>)
 800b28a:	f00a ffb1 	bl	80161f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b28e:	f00a fe91 	bl	8015fb4 <sys_arch_protect>
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f00a fe9b 	bl	8015fd0 <sys_arch_unprotect>
    return;
 800b29a:	e05e      	b.n	800b35a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3b08      	subs	r3, #8
 800b2a0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b2a2:	4b32      	ldr	r3, [pc, #200]	@ (800b36c <mem_free+0x104>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d306      	bcc.n	800b2ba <mem_free+0x52>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f103 020c 	add.w	r2, r3, #12
 800b2b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b370 <mem_free+0x108>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d90d      	bls.n	800b2d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b2ba:	4b29      	ldr	r3, [pc, #164]	@ (800b360 <mem_free+0xf8>)
 800b2bc:	f240 227f 	movw	r2, #639	@ 0x27f
 800b2c0:	492c      	ldr	r1, [pc, #176]	@ (800b374 <mem_free+0x10c>)
 800b2c2:	4829      	ldr	r0, [pc, #164]	@ (800b368 <mem_free+0x100>)
 800b2c4:	f00a ff94 	bl	80161f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2c8:	f00a fe74 	bl	8015fb4 <sys_arch_protect>
 800b2cc:	6138      	str	r0, [r7, #16]
 800b2ce:	6938      	ldr	r0, [r7, #16]
 800b2d0:	f00a fe7e 	bl	8015fd0 <sys_arch_unprotect>
    return;
 800b2d4:	e041      	b.n	800b35a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b2d6:	4828      	ldr	r0, [pc, #160]	@ (800b378 <mem_free+0x110>)
 800b2d8:	f00a fe2a 	bl	8015f30 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	791b      	ldrb	r3, [r3, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d110      	bne.n	800b306 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b2e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b360 <mem_free+0xf8>)
 800b2e6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b2ea:	4924      	ldr	r1, [pc, #144]	@ (800b37c <mem_free+0x114>)
 800b2ec:	481e      	ldr	r0, [pc, #120]	@ (800b368 <mem_free+0x100>)
 800b2ee:	f00a ff7f 	bl	80161f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b2f2:	4821      	ldr	r0, [pc, #132]	@ (800b378 <mem_free+0x110>)
 800b2f4:	f00a fe2b 	bl	8015f4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2f8:	f00a fe5c 	bl	8015fb4 <sys_arch_protect>
 800b2fc:	6178      	str	r0, [r7, #20]
 800b2fe:	6978      	ldr	r0, [r7, #20]
 800b300:	f00a fe66 	bl	8015fd0 <sys_arch_unprotect>
    return;
 800b304:	e029      	b.n	800b35a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b306:	69f8      	ldr	r0, [r7, #28]
 800b308:	f7ff ff72 	bl	800b1f0 <mem_link_valid>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d110      	bne.n	800b334 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b312:	4b13      	ldr	r3, [pc, #76]	@ (800b360 <mem_free+0xf8>)
 800b314:	f240 2295 	movw	r2, #661	@ 0x295
 800b318:	4919      	ldr	r1, [pc, #100]	@ (800b380 <mem_free+0x118>)
 800b31a:	4813      	ldr	r0, [pc, #76]	@ (800b368 <mem_free+0x100>)
 800b31c:	f00a ff68 	bl	80161f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b320:	4815      	ldr	r0, [pc, #84]	@ (800b378 <mem_free+0x110>)
 800b322:	f00a fe14 	bl	8015f4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b326:	f00a fe45 	bl	8015fb4 <sys_arch_protect>
 800b32a:	61b8      	str	r0, [r7, #24]
 800b32c:	69b8      	ldr	r0, [r7, #24]
 800b32e:	f00a fe4f 	bl	8015fd0 <sys_arch_unprotect>
    return;
 800b332:	e012      	b.n	800b35a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	2200      	movs	r2, #0
 800b338:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b33a:	4b12      	ldr	r3, [pc, #72]	@ (800b384 <mem_free+0x11c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	429a      	cmp	r2, r3
 800b342:	d202      	bcs.n	800b34a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b344:	4a0f      	ldr	r2, [pc, #60]	@ (800b384 <mem_free+0x11c>)
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b34a:	69f8      	ldr	r0, [r7, #28]
 800b34c:	f7ff fe5c 	bl	800b008 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b350:	4809      	ldr	r0, [pc, #36]	@ (800b378 <mem_free+0x110>)
 800b352:	f00a fdfc 	bl	8015f4e <sys_mutex_unlock>
 800b356:	e000      	b.n	800b35a <mem_free+0xf2>
    return;
 800b358:	bf00      	nop
}
 800b35a:	3720      	adds	r7, #32
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	0801827c 	.word	0x0801827c
 800b364:	0801836c 	.word	0x0801836c
 800b368:	080182c4 	.word	0x080182c4
 800b36c:	2000ba1c 	.word	0x2000ba1c
 800b370:	2000ba20 	.word	0x2000ba20
 800b374:	08018390 	.word	0x08018390
 800b378:	2000ba24 	.word	0x2000ba24
 800b37c:	080183ac 	.word	0x080183ac
 800b380:	080183d4 	.word	0x080183d4
 800b384:	2000ba28 	.word	0x2000ba28

0800b388 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b394:	887b      	ldrh	r3, [r7, #2]
 800b396:	3303      	adds	r3, #3
 800b398:	b29b      	uxth	r3, r3
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b3a0:	8bfb      	ldrh	r3, [r7, #30]
 800b3a2:	2b0b      	cmp	r3, #11
 800b3a4:	d801      	bhi.n	800b3aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b3aa:	8bfb      	ldrh	r3, [r7, #30]
 800b3ac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b3b0:	d803      	bhi.n	800b3ba <mem_trim+0x32>
 800b3b2:	8bfa      	ldrh	r2, [r7, #30]
 800b3b4:	887b      	ldrh	r3, [r7, #2]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d201      	bcs.n	800b3be <mem_trim+0x36>
    return NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e0d8      	b.n	800b570 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b3be:	4b6e      	ldr	r3, [pc, #440]	@ (800b578 <mem_trim+0x1f0>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d304      	bcc.n	800b3d2 <mem_trim+0x4a>
 800b3c8:	4b6c      	ldr	r3, [pc, #432]	@ (800b57c <mem_trim+0x1f4>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d306      	bcc.n	800b3e0 <mem_trim+0x58>
 800b3d2:	4b6b      	ldr	r3, [pc, #428]	@ (800b580 <mem_trim+0x1f8>)
 800b3d4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b3d8:	496a      	ldr	r1, [pc, #424]	@ (800b584 <mem_trim+0x1fc>)
 800b3da:	486b      	ldr	r0, [pc, #428]	@ (800b588 <mem_trim+0x200>)
 800b3dc:	f00a ff08 	bl	80161f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b3e0:	4b65      	ldr	r3, [pc, #404]	@ (800b578 <mem_trim+0x1f0>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d304      	bcc.n	800b3f4 <mem_trim+0x6c>
 800b3ea:	4b64      	ldr	r3, [pc, #400]	@ (800b57c <mem_trim+0x1f4>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d307      	bcc.n	800b404 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b3f4:	f00a fdde 	bl	8015fb4 <sys_arch_protect>
 800b3f8:	60b8      	str	r0, [r7, #8]
 800b3fa:	68b8      	ldr	r0, [r7, #8]
 800b3fc:	f00a fde8 	bl	8015fd0 <sys_arch_unprotect>
    return rmem;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	e0b5      	b.n	800b570 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3b08      	subs	r3, #8
 800b408:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b40a:	69b8      	ldr	r0, [r7, #24]
 800b40c:	f7ff fdea 	bl	800afe4 <mem_to_ptr>
 800b410:	4603      	mov	r3, r0
 800b412:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	881a      	ldrh	r2, [r3, #0]
 800b418:	8afb      	ldrh	r3, [r7, #22]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3b08      	subs	r3, #8
 800b420:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b422:	8bfa      	ldrh	r2, [r7, #30]
 800b424:	8abb      	ldrh	r3, [r7, #20]
 800b426:	429a      	cmp	r2, r3
 800b428:	d906      	bls.n	800b438 <mem_trim+0xb0>
 800b42a:	4b55      	ldr	r3, [pc, #340]	@ (800b580 <mem_trim+0x1f8>)
 800b42c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b430:	4956      	ldr	r1, [pc, #344]	@ (800b58c <mem_trim+0x204>)
 800b432:	4855      	ldr	r0, [pc, #340]	@ (800b588 <mem_trim+0x200>)
 800b434:	f00a fedc 	bl	80161f0 <iprintf>
  if (newsize > size) {
 800b438:	8bfa      	ldrh	r2, [r7, #30]
 800b43a:	8abb      	ldrh	r3, [r7, #20]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d901      	bls.n	800b444 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b440:	2300      	movs	r3, #0
 800b442:	e095      	b.n	800b570 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b444:	8bfa      	ldrh	r2, [r7, #30]
 800b446:	8abb      	ldrh	r3, [r7, #20]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d101      	bne.n	800b450 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	e08f      	b.n	800b570 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b450:	484f      	ldr	r0, [pc, #316]	@ (800b590 <mem_trim+0x208>)
 800b452:	f00a fd6d 	bl	8015f30 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fdb0 	bl	800afc0 <ptr_to_mem>
 800b460:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	791b      	ldrb	r3, [r3, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d13f      	bne.n	800b4ea <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b472:	d106      	bne.n	800b482 <mem_trim+0xfa>
 800b474:	4b42      	ldr	r3, [pc, #264]	@ (800b580 <mem_trim+0x1f8>)
 800b476:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b47a:	4946      	ldr	r1, [pc, #280]	@ (800b594 <mem_trim+0x20c>)
 800b47c:	4842      	ldr	r0, [pc, #264]	@ (800b588 <mem_trim+0x200>)
 800b47e:	f00a feb7 	bl	80161f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b488:	8afa      	ldrh	r2, [r7, #22]
 800b48a:	8bfb      	ldrh	r3, [r7, #30]
 800b48c:	4413      	add	r3, r2
 800b48e:	b29b      	uxth	r3, r3
 800b490:	3308      	adds	r3, #8
 800b492:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b494:	4b40      	ldr	r3, [pc, #256]	@ (800b598 <mem_trim+0x210>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d106      	bne.n	800b4ac <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b49e:	89fb      	ldrh	r3, [r7, #14]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff fd8d 	bl	800afc0 <ptr_to_mem>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4a3b      	ldr	r2, [pc, #236]	@ (800b598 <mem_trim+0x210>)
 800b4aa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b4ac:	89fb      	ldrh	r3, [r7, #14]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff fd86 	bl	800afc0 <ptr_to_mem>
 800b4b4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	89ba      	ldrh	r2, [r7, #12]
 800b4c0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	8afa      	ldrh	r2, [r7, #22]
 800b4c6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	89fa      	ldrh	r2, [r7, #14]
 800b4cc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b4d6:	d047      	beq.n	800b568 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fd6f 	bl	800afc0 <ptr_to_mem>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	89fb      	ldrh	r3, [r7, #14]
 800b4e6:	8053      	strh	r3, [r2, #2]
 800b4e8:	e03e      	b.n	800b568 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b4ea:	8bfb      	ldrh	r3, [r7, #30]
 800b4ec:	f103 0214 	add.w	r2, r3, #20
 800b4f0:	8abb      	ldrh	r3, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d838      	bhi.n	800b568 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b4f6:	8afa      	ldrh	r2, [r7, #22]
 800b4f8:	8bfb      	ldrh	r3, [r7, #30]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	3308      	adds	r3, #8
 800b500:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b50a:	d106      	bne.n	800b51a <mem_trim+0x192>
 800b50c:	4b1c      	ldr	r3, [pc, #112]	@ (800b580 <mem_trim+0x1f8>)
 800b50e:	f240 3216 	movw	r2, #790	@ 0x316
 800b512:	4920      	ldr	r1, [pc, #128]	@ (800b594 <mem_trim+0x20c>)
 800b514:	481c      	ldr	r0, [pc, #112]	@ (800b588 <mem_trim+0x200>)
 800b516:	f00a fe6b 	bl	80161f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b51a:	89fb      	ldrh	r3, [r7, #14]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff fd4f 	bl	800afc0 <ptr_to_mem>
 800b522:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b524:	4b1c      	ldr	r3, [pc, #112]	@ (800b598 <mem_trim+0x210>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d202      	bcs.n	800b534 <mem_trim+0x1ac>
      lfree = mem2;
 800b52e:	4a1a      	ldr	r2, [pc, #104]	@ (800b598 <mem_trim+0x210>)
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	2200      	movs	r2, #0
 800b538:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	881a      	ldrh	r2, [r3, #0]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	8afa      	ldrh	r2, [r7, #22]
 800b546:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	89fa      	ldrh	r2, [r7, #14]
 800b54c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b556:	d007      	beq.n	800b568 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	881b      	ldrh	r3, [r3, #0]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff fd2f 	bl	800afc0 <ptr_to_mem>
 800b562:	4602      	mov	r2, r0
 800b564:	89fb      	ldrh	r3, [r7, #14]
 800b566:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b568:	4809      	ldr	r0, [pc, #36]	@ (800b590 <mem_trim+0x208>)
 800b56a:	f00a fcf0 	bl	8015f4e <sys_mutex_unlock>
  return rmem;
 800b56e:	687b      	ldr	r3, [r7, #4]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3720      	adds	r7, #32
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	2000ba1c 	.word	0x2000ba1c
 800b57c:	2000ba20 	.word	0x2000ba20
 800b580:	0801827c 	.word	0x0801827c
 800b584:	08018408 	.word	0x08018408
 800b588:	080182c4 	.word	0x080182c4
 800b58c:	08018420 	.word	0x08018420
 800b590:	2000ba24 	.word	0x2000ba24
 800b594:	08018440 	.word	0x08018440
 800b598:	2000ba28 	.word	0x2000ba28

0800b59c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b5a6:	88fb      	ldrh	r3, [r7, #6]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <mem_malloc+0x14>
    return NULL;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	e0e2      	b.n	800b776 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	3303      	adds	r3, #3
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
 800b5ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b5bc:	8bbb      	ldrh	r3, [r7, #28]
 800b5be:	2b0b      	cmp	r3, #11
 800b5c0:	d801      	bhi.n	800b5c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b5c6:	8bbb      	ldrh	r3, [r7, #28]
 800b5c8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5cc:	d803      	bhi.n	800b5d6 <mem_malloc+0x3a>
 800b5ce:	8bba      	ldrh	r2, [r7, #28]
 800b5d0:	88fb      	ldrh	r3, [r7, #6]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d201      	bcs.n	800b5da <mem_malloc+0x3e>
    return NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e0cd      	b.n	800b776 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b5da:	4869      	ldr	r0, [pc, #420]	@ (800b780 <mem_malloc+0x1e4>)
 800b5dc:	f00a fca8 	bl	8015f30 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b5e0:	4b68      	ldr	r3, [pc, #416]	@ (800b784 <mem_malloc+0x1e8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff fcfd 	bl	800afe4 <mem_to_ptr>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	83fb      	strh	r3, [r7, #30]
 800b5ee:	e0b7      	b.n	800b760 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b5f0:	8bfb      	ldrh	r3, [r7, #30]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fce4 	bl	800afc0 <ptr_to_mem>
 800b5f8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	791b      	ldrb	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f040 80a7 	bne.w	800b752 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	8bfb      	ldrh	r3, [r7, #30]
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	f1a3 0208 	sub.w	r2, r3, #8
 800b612:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b614:	429a      	cmp	r2, r3
 800b616:	f0c0 809c 	bcc.w	800b752 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	8bfb      	ldrh	r3, [r7, #30]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	f1a3 0208 	sub.w	r2, r3, #8
 800b628:	8bbb      	ldrh	r3, [r7, #28]
 800b62a:	3314      	adds	r3, #20
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d333      	bcc.n	800b698 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b630:	8bfa      	ldrh	r2, [r7, #30]
 800b632:	8bbb      	ldrh	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	b29b      	uxth	r3, r3
 800b638:	3308      	adds	r3, #8
 800b63a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b63c:	8a7b      	ldrh	r3, [r7, #18]
 800b63e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b642:	d106      	bne.n	800b652 <mem_malloc+0xb6>
 800b644:	4b50      	ldr	r3, [pc, #320]	@ (800b788 <mem_malloc+0x1ec>)
 800b646:	f240 3287 	movw	r2, #903	@ 0x387
 800b64a:	4950      	ldr	r1, [pc, #320]	@ (800b78c <mem_malloc+0x1f0>)
 800b64c:	4850      	ldr	r0, [pc, #320]	@ (800b790 <mem_malloc+0x1f4>)
 800b64e:	f00a fdcf 	bl	80161f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b652:	8a7b      	ldrh	r3, [r7, #18]
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff fcb3 	bl	800afc0 <ptr_to_mem>
 800b65a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	881a      	ldrh	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8bfa      	ldrh	r2, [r7, #30]
 800b66e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	8a7a      	ldrh	r2, [r7, #18]
 800b674:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2201      	movs	r2, #1
 800b67a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b684:	d00b      	beq.n	800b69e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff fc98 	bl	800afc0 <ptr_to_mem>
 800b690:	4602      	mov	r2, r0
 800b692:	8a7b      	ldrh	r3, [r7, #18]
 800b694:	8053      	strh	r3, [r2, #2]
 800b696:	e002      	b.n	800b69e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2201      	movs	r2, #1
 800b69c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b69e:	4b39      	ldr	r3, [pc, #228]	@ (800b784 <mem_malloc+0x1e8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d127      	bne.n	800b6f8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b6a8:	4b36      	ldr	r3, [pc, #216]	@ (800b784 <mem_malloc+0x1e8>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b6ae:	e005      	b.n	800b6bc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff fc83 	bl	800afc0 <ptr_to_mem>
 800b6ba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	791b      	ldrb	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <mem_malloc+0x132>
 800b6c4:	4b33      	ldr	r3, [pc, #204]	@ (800b794 <mem_malloc+0x1f8>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d1f0      	bne.n	800b6b0 <mem_malloc+0x114>
          }
          lfree = cur;
 800b6ce:	4a2d      	ldr	r2, [pc, #180]	@ (800b784 <mem_malloc+0x1e8>)
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b6d4:	4b2b      	ldr	r3, [pc, #172]	@ (800b784 <mem_malloc+0x1e8>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	4b2e      	ldr	r3, [pc, #184]	@ (800b794 <mem_malloc+0x1f8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d00b      	beq.n	800b6f8 <mem_malloc+0x15c>
 800b6e0:	4b28      	ldr	r3, [pc, #160]	@ (800b784 <mem_malloc+0x1e8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	791b      	ldrb	r3, [r3, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d006      	beq.n	800b6f8 <mem_malloc+0x15c>
 800b6ea:	4b27      	ldr	r3, [pc, #156]	@ (800b788 <mem_malloc+0x1ec>)
 800b6ec:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b6f0:	4929      	ldr	r1, [pc, #164]	@ (800b798 <mem_malloc+0x1fc>)
 800b6f2:	4827      	ldr	r0, [pc, #156]	@ (800b790 <mem_malloc+0x1f4>)
 800b6f4:	f00a fd7c 	bl	80161f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b6f8:	4821      	ldr	r0, [pc, #132]	@ (800b780 <mem_malloc+0x1e4>)
 800b6fa:	f00a fc28 	bl	8015f4e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b6fe:	8bba      	ldrh	r2, [r7, #28]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	4413      	add	r3, r2
 800b704:	3308      	adds	r3, #8
 800b706:	4a23      	ldr	r2, [pc, #140]	@ (800b794 <mem_malloc+0x1f8>)
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d906      	bls.n	800b71c <mem_malloc+0x180>
 800b70e:	4b1e      	ldr	r3, [pc, #120]	@ (800b788 <mem_malloc+0x1ec>)
 800b710:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b714:	4921      	ldr	r1, [pc, #132]	@ (800b79c <mem_malloc+0x200>)
 800b716:	481e      	ldr	r0, [pc, #120]	@ (800b790 <mem_malloc+0x1f4>)
 800b718:	f00a fd6a 	bl	80161f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f003 0303 	and.w	r3, r3, #3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d006      	beq.n	800b734 <mem_malloc+0x198>
 800b726:	4b18      	ldr	r3, [pc, #96]	@ (800b788 <mem_malloc+0x1ec>)
 800b728:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b72c:	491c      	ldr	r1, [pc, #112]	@ (800b7a0 <mem_malloc+0x204>)
 800b72e:	4818      	ldr	r0, [pc, #96]	@ (800b790 <mem_malloc+0x1f4>)
 800b730:	f00a fd5e 	bl	80161f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d006      	beq.n	800b74c <mem_malloc+0x1b0>
 800b73e:	4b12      	ldr	r3, [pc, #72]	@ (800b788 <mem_malloc+0x1ec>)
 800b740:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b744:	4917      	ldr	r1, [pc, #92]	@ (800b7a4 <mem_malloc+0x208>)
 800b746:	4812      	ldr	r0, [pc, #72]	@ (800b790 <mem_malloc+0x1f4>)
 800b748:	f00a fd52 	bl	80161f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	3308      	adds	r3, #8
 800b750:	e011      	b.n	800b776 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b752:	8bfb      	ldrh	r3, [r7, #30]
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fc33 	bl	800afc0 <ptr_to_mem>
 800b75a:	4603      	mov	r3, r0
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b760:	8bfa      	ldrh	r2, [r7, #30]
 800b762:	8bbb      	ldrh	r3, [r7, #28]
 800b764:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b768:	429a      	cmp	r2, r3
 800b76a:	f4ff af41 	bcc.w	800b5f0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b76e:	4804      	ldr	r0, [pc, #16]	@ (800b780 <mem_malloc+0x1e4>)
 800b770:	f00a fbed 	bl	8015f4e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3720      	adds	r7, #32
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	2000ba24 	.word	0x2000ba24
 800b784:	2000ba28 	.word	0x2000ba28
 800b788:	0801827c 	.word	0x0801827c
 800b78c:	08018440 	.word	0x08018440
 800b790:	080182c4 	.word	0x080182c4
 800b794:	2000ba20 	.word	0x2000ba20
 800b798:	08018454 	.word	0x08018454
 800b79c:	08018470 	.word	0x08018470
 800b7a0:	080184a0 	.word	0x080184a0
 800b7a4:	080184d0 	.word	0x080184d0

0800b7a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	3303      	adds	r3, #3
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
 800b7c8:	e011      	b.n	800b7ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	60fb      	str	r3, [r7, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	885b      	ldrh	r3, [r3, #2]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	dbe7      	blt.n	800b7ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b80e:	2300      	movs	r3, #0
 800b810:	80fb      	strh	r3, [r7, #6]
 800b812:	e009      	b.n	800b828 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	4a08      	ldr	r2, [pc, #32]	@ (800b838 <memp_init+0x30>)
 800b818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7ff ffc3 	bl	800b7a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	3301      	adds	r3, #1
 800b826:	80fb      	strh	r3, [r7, #6]
 800b828:	88fb      	ldrh	r3, [r7, #6]
 800b82a:	2b0c      	cmp	r3, #12
 800b82c:	d9f2      	bls.n	800b814 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b82e:	bf00      	nop
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	0801ace8 	.word	0x0801ace8

0800b83c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b844:	f00a fbb6 	bl	8015fb4 <sys_arch_protect>
 800b848:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d015      	beq.n	800b884 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	6812      	ldr	r2, [r2, #0]
 800b860:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <do_memp_malloc_pool+0x3e>
 800b86c:	4b09      	ldr	r3, [pc, #36]	@ (800b894 <do_memp_malloc_pool+0x58>)
 800b86e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b872:	4909      	ldr	r1, [pc, #36]	@ (800b898 <do_memp_malloc_pool+0x5c>)
 800b874:	4809      	ldr	r0, [pc, #36]	@ (800b89c <do_memp_malloc_pool+0x60>)
 800b876:	f00a fcbb 	bl	80161f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f00a fba8 	bl	8015fd0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	e003      	b.n	800b88c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f00a fba3 	bl	8015fd0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	080184f4 	.word	0x080184f4
 800b898:	08018524 	.word	0x08018524
 800b89c:	08018548 	.word	0x08018548

0800b8a0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <memp_malloc_pool+0x1c>
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d8 <memp_malloc_pool+0x38>)
 800b8b0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b8b4:	4909      	ldr	r1, [pc, #36]	@ (800b8dc <memp_malloc_pool+0x3c>)
 800b8b6:	480a      	ldr	r0, [pc, #40]	@ (800b8e0 <memp_malloc_pool+0x40>)
 800b8b8:	f00a fc9a 	bl	80161f0 <iprintf>
  if (desc == NULL) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <memp_malloc_pool+0x26>
    return NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e003      	b.n	800b8ce <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff ffb8 	bl	800b83c <do_memp_malloc_pool>
 800b8cc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	080184f4 	.word	0x080184f4
 800b8dc:	08018570 	.word	0x08018570
 800b8e0:	08018548 	.word	0x08018548

0800b8e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	2b0c      	cmp	r3, #12
 800b8f2:	d908      	bls.n	800b906 <memp_malloc+0x22>
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b920 <memp_malloc+0x3c>)
 800b8f6:	f240 1257 	movw	r2, #343	@ 0x157
 800b8fa:	490a      	ldr	r1, [pc, #40]	@ (800b924 <memp_malloc+0x40>)
 800b8fc:	480a      	ldr	r0, [pc, #40]	@ (800b928 <memp_malloc+0x44>)
 800b8fe:	f00a fc77 	bl	80161f0 <iprintf>
 800b902:	2300      	movs	r3, #0
 800b904:	e008      	b.n	800b918 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	4a08      	ldr	r2, [pc, #32]	@ (800b92c <memp_malloc+0x48>)
 800b90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff ff94 	bl	800b83c <do_memp_malloc_pool>
 800b914:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	080184f4 	.word	0x080184f4
 800b924:	08018584 	.word	0x08018584
 800b928:	08018548 	.word	0x08018548
 800b92c:	0801ace8 	.word	0x0801ace8

0800b930 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	f003 0303 	and.w	r3, r3, #3
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <do_memp_free_pool+0x22>
 800b944:	4b0d      	ldr	r3, [pc, #52]	@ (800b97c <do_memp_free_pool+0x4c>)
 800b946:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b94a:	490d      	ldr	r1, [pc, #52]	@ (800b980 <do_memp_free_pool+0x50>)
 800b94c:	480d      	ldr	r0, [pc, #52]	@ (800b984 <do_memp_free_pool+0x54>)
 800b94e:	f00a fc4f 	bl	80161f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b956:	f00a fb2d 	bl	8015fb4 <sys_arch_protect>
 800b95a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b96e:	68b8      	ldr	r0, [r7, #8]
 800b970:	f00a fb2e 	bl	8015fd0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	080184f4 	.word	0x080184f4
 800b980:	080185a4 	.word	0x080185a4
 800b984:	08018548 	.word	0x08018548

0800b988 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d106      	bne.n	800b9a6 <memp_free_pool+0x1e>
 800b998:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c4 <memp_free_pool+0x3c>)
 800b99a:	f240 1295 	movw	r2, #405	@ 0x195
 800b99e:	490a      	ldr	r1, [pc, #40]	@ (800b9c8 <memp_free_pool+0x40>)
 800b9a0:	480a      	ldr	r0, [pc, #40]	@ (800b9cc <memp_free_pool+0x44>)
 800b9a2:	f00a fc25 	bl	80161f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <memp_free_pool+0x34>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d004      	beq.n	800b9bc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff ffbb 	bl	800b930 <do_memp_free_pool>
 800b9ba:	e000      	b.n	800b9be <memp_free_pool+0x36>
    return;
 800b9bc:	bf00      	nop
}
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	080184f4 	.word	0x080184f4
 800b9c8:	08018570 	.word	0x08018570
 800b9cc:	08018548 	.word	0x08018548

0800b9d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	6039      	str	r1, [r7, #0]
 800b9da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b9dc:	79fb      	ldrb	r3, [r7, #7]
 800b9de:	2b0c      	cmp	r3, #12
 800b9e0:	d907      	bls.n	800b9f2 <memp_free+0x22>
 800b9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800ba14 <memp_free+0x44>)
 800b9e4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b9e8:	490b      	ldr	r1, [pc, #44]	@ (800ba18 <memp_free+0x48>)
 800b9ea:	480c      	ldr	r0, [pc, #48]	@ (800ba1c <memp_free+0x4c>)
 800b9ec:	f00a fc00 	bl	80161f0 <iprintf>
 800b9f0:	e00c      	b.n	800ba0c <memp_free+0x3c>

  if (mem == NULL) {
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	4a09      	ldr	r2, [pc, #36]	@ (800ba20 <memp_free+0x50>)
 800b9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff ff94 	bl	800b930 <do_memp_free_pool>
 800ba08:	e000      	b.n	800ba0c <memp_free+0x3c>
    return;
 800ba0a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	080184f4 	.word	0x080184f4
 800ba18:	080185c4 	.word	0x080185c4
 800ba1c:	08018548 	.word	0x08018548
 800ba20:	0801ace8 	.word	0x0801ace8

0800ba24 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ba24:	b480      	push	{r7}
 800ba26:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ba28:	bf00      	nop
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
	...

0800ba34 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d108      	bne.n	800ba5a <netif_add+0x26>
 800ba48:	4b57      	ldr	r3, [pc, #348]	@ (800bba8 <netif_add+0x174>)
 800ba4a:	f240 1227 	movw	r2, #295	@ 0x127
 800ba4e:	4957      	ldr	r1, [pc, #348]	@ (800bbac <netif_add+0x178>)
 800ba50:	4857      	ldr	r0, [pc, #348]	@ (800bbb0 <netif_add+0x17c>)
 800ba52:	f00a fbcd 	bl	80161f0 <iprintf>
 800ba56:	2300      	movs	r3, #0
 800ba58:	e0a2      	b.n	800bba0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d108      	bne.n	800ba72 <netif_add+0x3e>
 800ba60:	4b51      	ldr	r3, [pc, #324]	@ (800bba8 <netif_add+0x174>)
 800ba62:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ba66:	4953      	ldr	r1, [pc, #332]	@ (800bbb4 <netif_add+0x180>)
 800ba68:	4851      	ldr	r0, [pc, #324]	@ (800bbb0 <netif_add+0x17c>)
 800ba6a:	f00a fbc1 	bl	80161f0 <iprintf>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e096      	b.n	800bba0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ba78:	4b4f      	ldr	r3, [pc, #316]	@ (800bbb8 <netif_add+0x184>)
 800ba7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ba82:	4b4d      	ldr	r3, [pc, #308]	@ (800bbb8 <netif_add+0x184>)
 800ba84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ba8c:	4b4a      	ldr	r3, [pc, #296]	@ (800bbb8 <netif_add+0x184>)
 800ba8e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	4a45      	ldr	r2, [pc, #276]	@ (800bbbc <netif_add+0x188>)
 800baa6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6a3a      	ldr	r2, [r7, #32]
 800bac0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bac2:	4b3f      	ldr	r3, [pc, #252]	@ (800bbc0 <netif_add+0x18c>)
 800bac4:	781a      	ldrb	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bad0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f000 f913 	bl	800bd04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	4798      	blx	r3
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <netif_add+0xba>
    return NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	e058      	b.n	800bba0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800baf4:	2bff      	cmp	r3, #255	@ 0xff
 800baf6:	d103      	bne.n	800bb00 <netif_add+0xcc>
        netif->num = 0;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bb04:	4b2f      	ldr	r3, [pc, #188]	@ (800bbc4 <netif_add+0x190>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	617b      	str	r3, [r7, #20]
 800bb0a:	e02b      	b.n	800bb64 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d106      	bne.n	800bb22 <netif_add+0xee>
 800bb14:	4b24      	ldr	r3, [pc, #144]	@ (800bba8 <netif_add+0x174>)
 800bb16:	f240 128b 	movw	r2, #395	@ 0x18b
 800bb1a:	492b      	ldr	r1, [pc, #172]	@ (800bbc8 <netif_add+0x194>)
 800bb1c:	4824      	ldr	r0, [pc, #144]	@ (800bbb0 <netif_add+0x17c>)
 800bb1e:	f00a fb67 	bl	80161f0 <iprintf>
        num_netifs++;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	3301      	adds	r3, #1
 800bb26:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2bff      	cmp	r3, #255	@ 0xff
 800bb2c:	dd06      	ble.n	800bb3c <netif_add+0x108>
 800bb2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bba8 <netif_add+0x174>)
 800bb30:	f240 128d 	movw	r2, #397	@ 0x18d
 800bb34:	4925      	ldr	r1, [pc, #148]	@ (800bbcc <netif_add+0x198>)
 800bb36:	481e      	ldr	r0, [pc, #120]	@ (800bbb0 <netif_add+0x17c>)
 800bb38:	f00a fb5a 	bl	80161f0 <iprintf>
        if (netif2->num == netif->num) {
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d108      	bne.n	800bb5e <netif_add+0x12a>
          netif->num++;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb52:	3301      	adds	r3, #1
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800bb5c:	e005      	b.n	800bb6a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	617b      	str	r3, [r7, #20]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1d0      	bne.n	800bb0c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1be      	bne.n	800baee <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb76:	2bfe      	cmp	r3, #254	@ 0xfe
 800bb78:	d103      	bne.n	800bb82 <netif_add+0x14e>
    netif_num = 0;
 800bb7a:	4b11      	ldr	r3, [pc, #68]	@ (800bbc0 <netif_add+0x18c>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	e006      	b.n	800bb90 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb88:	3301      	adds	r3, #1
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc0 <netif_add+0x18c>)
 800bb8e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bb90:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <netif_add+0x190>)
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bb98:	4a0a      	ldr	r2, [pc, #40]	@ (800bbc4 <netif_add+0x190>)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3718      	adds	r7, #24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	080185e0 	.word	0x080185e0
 800bbac:	08018674 	.word	0x08018674
 800bbb0:	08018630 	.word	0x08018630
 800bbb4:	08018690 	.word	0x08018690
 800bbb8:	0801ad5c 	.word	0x0801ad5c
 800bbbc:	0800bfdf 	.word	0x0800bfdf
 800bbc0:	2000eb38 	.word	0x2000eb38
 800bbc4:	2000eb30 	.word	0x2000eb30
 800bbc8:	080186b4 	.word	0x080186b4
 800bbcc:	080186c8 	.word	0x080186c8

0800bbd0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f002 fe7f 	bl	800e8e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f007 fd2b 	bl	8013640 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bbea:	bf00      	nop
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <netif_do_set_ipaddr+0x20>
 800bc06:	4b1d      	ldr	r3, [pc, #116]	@ (800bc7c <netif_do_set_ipaddr+0x88>)
 800bc08:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800bc0c:	491c      	ldr	r1, [pc, #112]	@ (800bc80 <netif_do_set_ipaddr+0x8c>)
 800bc0e:	481d      	ldr	r0, [pc, #116]	@ (800bc84 <netif_do_set_ipaddr+0x90>)
 800bc10:	f00a faee 	bl	80161f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <netif_do_set_ipaddr+0x34>
 800bc1a:	4b18      	ldr	r3, [pc, #96]	@ (800bc7c <netif_do_set_ipaddr+0x88>)
 800bc1c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800bc20:	4917      	ldr	r1, [pc, #92]	@ (800bc80 <netif_do_set_ipaddr+0x8c>)
 800bc22:	4818      	ldr	r0, [pc, #96]	@ (800bc84 <netif_do_set_ipaddr+0x90>)
 800bc24:	f00a fae4 	bl	80161f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d01c      	beq.n	800bc70 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bc46:	f107 0314 	add.w	r3, r7, #20
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff ffbf 	bl	800bbd0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <netif_do_set_ipaddr+0x6a>
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	e000      	b.n	800bc60 <netif_do_set_ipaddr+0x6c>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bc64:	2101      	movs	r1, #1
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f000 f8d2 	bl	800be10 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e000      	b.n	800bc72 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	080185e0 	.word	0x080185e0
 800bc80:	080186f8 	.word	0x080186f8
 800bc84:	08018630 	.word	0x08018630

0800bc88 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d00a      	beq.n	800bcb8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <netif_do_set_netmask+0x26>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	e000      	b.n	800bcb0 <netif_do_set_netmask+0x28>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e000      	b.n	800bcba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b085      	sub	sp, #20
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	330c      	adds	r3, #12
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d00a      	beq.n	800bcf6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <netif_do_set_gw+0x26>
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	e000      	b.n	800bcee <netif_do_set_gw+0x28>
 800bcec:	2300      	movs	r3, #0
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bd20:	4b1c      	ldr	r3, [pc, #112]	@ (800bd94 <netif_set_addr+0x90>)
 800bd22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bd2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bd94 <netif_set_addr+0x90>)
 800bd2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bd34:	4b17      	ldr	r3, [pc, #92]	@ (800bd94 <netif_set_addr+0x90>)
 800bd36:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <netif_set_addr+0x42>
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d101      	bne.n	800bd4a <netif_set_addr+0x46>
 800bd46:	2301      	movs	r3, #1
 800bd48:	e000      	b.n	800bd4c <netif_set_addr+0x48>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d006      	beq.n	800bd62 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bd54:	f107 0310 	add.w	r3, r7, #16
 800bd58:	461a      	mov	r2, r3
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff ff49 	bl	800bbf4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bd62:	69fa      	ldr	r2, [r7, #28]
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7ff ff8e 	bl	800bc88 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f7ff ffa8 	bl	800bcc6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d106      	bne.n	800bd8a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bd7c:	f107 0310 	add.w	r3, r7, #16
 800bd80:	461a      	mov	r2, r3
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f7ff ff35 	bl	800bbf4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bd8a:	bf00      	nop
 800bd8c:	3720      	adds	r7, #32
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0801ad5c 	.word	0x0801ad5c

0800bd98 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bda0:	4a04      	ldr	r2, [pc, #16]	@ (800bdb4 <netif_set_default+0x1c>)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	2000eb34 	.word	0x2000eb34

0800bdb8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d107      	bne.n	800bdd6 <netif_set_up+0x1e>
 800bdc6:	4b0f      	ldr	r3, [pc, #60]	@ (800be04 <netif_set_up+0x4c>)
 800bdc8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bdcc:	490e      	ldr	r1, [pc, #56]	@ (800be08 <netif_set_up+0x50>)
 800bdce:	480f      	ldr	r0, [pc, #60]	@ (800be0c <netif_set_up+0x54>)
 800bdd0:	f00a fa0e 	bl	80161f0 <iprintf>
 800bdd4:	e013      	b.n	800bdfe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10c      	bne.n	800bdfe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bdf6:	2103      	movs	r1, #3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f809 	bl	800be10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	080185e0 	.word	0x080185e0
 800be08:	08018768 	.word	0x08018768
 800be0c:	08018630 	.word	0x08018630

0800be10 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <netif_issue_reports+0x20>
 800be22:	4b18      	ldr	r3, [pc, #96]	@ (800be84 <netif_issue_reports+0x74>)
 800be24:	f240 326d 	movw	r2, #877	@ 0x36d
 800be28:	4917      	ldr	r1, [pc, #92]	@ (800be88 <netif_issue_reports+0x78>)
 800be2a:	4818      	ldr	r0, [pc, #96]	@ (800be8c <netif_issue_reports+0x7c>)
 800be2c:	f00a f9e0 	bl	80161f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be36:	f003 0304 	and.w	r3, r3, #4
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d01e      	beq.n	800be7c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be44:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d017      	beq.n	800be7c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d013      	beq.n	800be7e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3304      	adds	r3, #4
 800be5a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00e      	beq.n	800be7e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be66:	f003 0308 	and.w	r3, r3, #8
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d007      	beq.n	800be7e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3304      	adds	r3, #4
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f008 fb4d 	bl	8014514 <etharp_request>
 800be7a:	e000      	b.n	800be7e <netif_issue_reports+0x6e>
    return;
 800be7c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	080185e0 	.word	0x080185e0
 800be88:	08018784 	.word	0x08018784
 800be8c:	08018630 	.word	0x08018630

0800be90 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d107      	bne.n	800beae <netif_set_down+0x1e>
 800be9e:	4b12      	ldr	r3, [pc, #72]	@ (800bee8 <netif_set_down+0x58>)
 800bea0:	f240 329b 	movw	r2, #923	@ 0x39b
 800bea4:	4911      	ldr	r1, [pc, #68]	@ (800beec <netif_set_down+0x5c>)
 800bea6:	4812      	ldr	r0, [pc, #72]	@ (800bef0 <netif_set_down+0x60>)
 800bea8:	f00a f9a2 	bl	80161f0 <iprintf>
 800beac:	e019      	b.n	800bee2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d012      	beq.n	800bee2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bec2:	f023 0301 	bic.w	r3, r3, #1
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bed4:	f003 0308 	and.w	r3, r3, #8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f007 fed7 	bl	8013c90 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	080185e0 	.word	0x080185e0
 800beec:	080187a8 	.word	0x080187a8
 800bef0:	08018630 	.word	0x08018630

0800bef4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d107      	bne.n	800bf12 <netif_set_link_up+0x1e>
 800bf02:	4b13      	ldr	r3, [pc, #76]	@ (800bf50 <netif_set_link_up+0x5c>)
 800bf04:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bf08:	4912      	ldr	r1, [pc, #72]	@ (800bf54 <netif_set_link_up+0x60>)
 800bf0a:	4813      	ldr	r0, [pc, #76]	@ (800bf58 <netif_set_link_up+0x64>)
 800bf0c:	f00a f970 	bl	80161f0 <iprintf>
 800bf10:	e01b      	b.n	800bf4a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf18:	f003 0304 	and.w	r3, r3, #4
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d114      	bne.n	800bf4a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf26:	f043 0304 	orr.w	r3, r3, #4
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bf32:	2103      	movs	r1, #3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff ff6b 	bl	800be10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <netif_set_link_up+0x56>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	080185e0 	.word	0x080185e0
 800bf54:	080187c8 	.word	0x080187c8
 800bf58:	08018630 	.word	0x08018630

0800bf5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d107      	bne.n	800bf7a <netif_set_link_down+0x1e>
 800bf6a:	4b11      	ldr	r3, [pc, #68]	@ (800bfb0 <netif_set_link_down+0x54>)
 800bf6c:	f240 4206 	movw	r2, #1030	@ 0x406
 800bf70:	4910      	ldr	r1, [pc, #64]	@ (800bfb4 <netif_set_link_down+0x58>)
 800bf72:	4811      	ldr	r0, [pc, #68]	@ (800bfb8 <netif_set_link_down+0x5c>)
 800bf74:	f00a f93c 	bl	80161f0 <iprintf>
 800bf78:	e017      	b.n	800bfaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d010      	beq.n	800bfaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf8e:	f023 0304 	bic.w	r3, r3, #4
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <netif_set_link_down+0x4e>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	69db      	ldr	r3, [r3, #28]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	080185e0 	.word	0x080185e0
 800bfb4:	080187ec 	.word	0x080187ec
 800bfb8:	08018630 	.word	0x08018630

0800bfbc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	61da      	str	r2, [r3, #28]
  }
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bfea:	f06f 030b 	mvn.w	r3, #11
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
	...

0800bffc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d013      	beq.n	800c034 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c00c:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <netif_get_by_index+0x48>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e00c      	b.n	800c02e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c01a:	3301      	adds	r3, #1
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	79fa      	ldrb	r2, [r7, #7]
 800c020:	429a      	cmp	r2, r3
 800c022:	d101      	bne.n	800c028 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	e006      	b.n	800c036 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1ef      	bne.n	800c014 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	2000eb30 	.word	0x2000eb30

0800c048 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c04e:	f009 ffb1 	bl	8015fb4 <sys_arch_protect>
 800c052:	6038      	str	r0, [r7, #0]
 800c054:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <pbuf_free_ooseq+0x44>)
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	6838      	ldr	r0, [r7, #0]
 800c05c:	f009 ffb8 	bl	8015fd0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c060:	4b0b      	ldr	r3, [pc, #44]	@ (800c090 <pbuf_free_ooseq+0x48>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	607b      	str	r3, [r7, #4]
 800c066:	e00a      	b.n	800c07e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f002 fc73 	bl	800e95c <tcp_free_ooseq>
      return;
 800c076:	e005      	b.n	800c084 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1f1      	bne.n	800c068 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	2000eb39 	.word	0x2000eb39
 800c090:	2000eb48 	.word	0x2000eb48

0800c094 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c09c:	f7ff ffd4 	bl	800c048 <pbuf_free_ooseq>
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c0ae:	f009 ff81 	bl	8015fb4 <sys_arch_protect>
 800c0b2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c0f4 <pbuf_pool_is_empty+0x4c>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c0ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f4 <pbuf_pool_is_empty+0x4c>)
 800c0bc:	2201      	movs	r2, #1
 800c0be:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f009 ff85 	bl	8015fd0 <sys_arch_unprotect>

  if (!queued) {
 800c0c6:	78fb      	ldrb	r3, [r7, #3]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10f      	bne.n	800c0ec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	480a      	ldr	r0, [pc, #40]	@ (800c0f8 <pbuf_pool_is_empty+0x50>)
 800c0d0:	f7fe fe90 	bl	800adf4 <tcpip_try_callback>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d008      	beq.n	800c0ec <pbuf_pool_is_empty+0x44>
 800c0da:	f009 ff6b 	bl	8015fb4 <sys_arch_protect>
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	4b04      	ldr	r3, [pc, #16]	@ (800c0f4 <pbuf_pool_is_empty+0x4c>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f009 ff72 	bl	8015fd0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	2000eb39 	.word	0x2000eb39
 800c0f8:	0800c095 	.word	0x0800c095

0800c0fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4611      	mov	r1, r2
 800c108:	461a      	mov	r2, r3
 800c10a:	460b      	mov	r3, r1
 800c10c:	80fb      	strh	r3, [r7, #6]
 800c10e:	4613      	mov	r3, r2
 800c110:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	88fa      	ldrh	r2, [r7, #6]
 800c122:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	88ba      	ldrh	r2, [r7, #4]
 800c128:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c12a:	8b3b      	ldrh	r3, [r7, #24]
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	7f3a      	ldrb	r2, [r7, #28]
 800c136:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2201      	movs	r2, #1
 800c13c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	73da      	strb	r2, [r3, #15]
}
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08c      	sub	sp, #48	@ 0x30
 800c154:	af02      	add	r7, sp, #8
 800c156:	4603      	mov	r3, r0
 800c158:	71fb      	strb	r3, [r7, #7]
 800c15a:	460b      	mov	r3, r1
 800c15c:	80bb      	strh	r3, [r7, #4]
 800c15e:	4613      	mov	r3, r2
 800c160:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c166:	887b      	ldrh	r3, [r7, #2]
 800c168:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c16c:	d07f      	beq.n	800c26e <pbuf_alloc+0x11e>
 800c16e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c172:	f300 80c8 	bgt.w	800c306 <pbuf_alloc+0x1b6>
 800c176:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c17a:	d010      	beq.n	800c19e <pbuf_alloc+0x4e>
 800c17c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c180:	f300 80c1 	bgt.w	800c306 <pbuf_alloc+0x1b6>
 800c184:	2b01      	cmp	r3, #1
 800c186:	d002      	beq.n	800c18e <pbuf_alloc+0x3e>
 800c188:	2b41      	cmp	r3, #65	@ 0x41
 800c18a:	f040 80bc 	bne.w	800c306 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c18e:	887a      	ldrh	r2, [r7, #2]
 800c190:	88bb      	ldrh	r3, [r7, #4]
 800c192:	4619      	mov	r1, r3
 800c194:	2000      	movs	r0, #0
 800c196:	f000 f8d1 	bl	800c33c <pbuf_alloc_reference>
 800c19a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c19c:	e0bd      	b.n	800c31a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c1a6:	88bb      	ldrh	r3, [r7, #4]
 800c1a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c1aa:	200c      	movs	r0, #12
 800c1ac:	f7ff fb9a 	bl	800b8e4 <memp_malloc>
 800c1b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d109      	bne.n	800c1cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c1b8:	f7ff ff76 	bl	800c0a8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d002      	beq.n	800c1c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c1c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c1c4:	f000 faa8 	bl	800c718 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	e0a7      	b.n	800c31c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c1cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1ce:	3303      	adds	r3, #3
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	f023 0303 	bic.w	r3, r3, #3
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	8b7a      	ldrh	r2, [r7, #26]
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	bf28      	it	cs
 800c1e4:	4613      	movcs	r3, r2
 800c1e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c1e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1ea:	3310      	adds	r3, #16
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3303      	adds	r3, #3
 800c1f2:	f023 0303 	bic.w	r3, r3, #3
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	89f9      	ldrh	r1, [r7, #14]
 800c1fa:	8b7a      	ldrh	r2, [r7, #26]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	887b      	ldrh	r3, [r7, #2]
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	460b      	mov	r3, r1
 800c206:	4601      	mov	r1, r0
 800c208:	6938      	ldr	r0, [r7, #16]
 800c20a:	f7ff ff77 	bl	800c0fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f003 0303 	and.w	r3, r3, #3
 800c216:	2b00      	cmp	r3, #0
 800c218:	d006      	beq.n	800c228 <pbuf_alloc+0xd8>
 800c21a:	4b42      	ldr	r3, [pc, #264]	@ (800c324 <pbuf_alloc+0x1d4>)
 800c21c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c220:	4941      	ldr	r1, [pc, #260]	@ (800c328 <pbuf_alloc+0x1d8>)
 800c222:	4842      	ldr	r0, [pc, #264]	@ (800c32c <pbuf_alloc+0x1dc>)
 800c224:	f009 ffe4 	bl	80161f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c22a:	3303      	adds	r3, #3
 800c22c:	f023 0303 	bic.w	r3, r3, #3
 800c230:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c234:	d106      	bne.n	800c244 <pbuf_alloc+0xf4>
 800c236:	4b3b      	ldr	r3, [pc, #236]	@ (800c324 <pbuf_alloc+0x1d4>)
 800c238:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c23c:	493c      	ldr	r1, [pc, #240]	@ (800c330 <pbuf_alloc+0x1e0>)
 800c23e:	483b      	ldr	r0, [pc, #236]	@ (800c32c <pbuf_alloc+0x1dc>)
 800c240:	f009 ffd6 	bl	80161f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c24e:	e002      	b.n	800c256 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c25a:	8b7a      	ldrh	r2, [r7, #26]
 800c25c:	89fb      	ldrh	r3, [r7, #14]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c262:	2300      	movs	r3, #0
 800c264:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c266:	8b7b      	ldrh	r3, [r7, #26]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d19e      	bne.n	800c1aa <pbuf_alloc+0x5a>
      break;
 800c26c:	e055      	b.n	800c31a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c26e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c270:	3303      	adds	r3, #3
 800c272:	b29b      	uxth	r3, r3
 800c274:	f023 0303 	bic.w	r3, r3, #3
 800c278:	b29a      	uxth	r2, r3
 800c27a:	88bb      	ldrh	r3, [r7, #4]
 800c27c:	3303      	adds	r3, #3
 800c27e:	b29b      	uxth	r3, r3
 800c280:	f023 0303 	bic.w	r3, r3, #3
 800c284:	b29b      	uxth	r3, r3
 800c286:	4413      	add	r3, r2
 800c288:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c28a:	8b3b      	ldrh	r3, [r7, #24]
 800c28c:	3310      	adds	r3, #16
 800c28e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c290:	8b3a      	ldrh	r2, [r7, #24]
 800c292:	88bb      	ldrh	r3, [r7, #4]
 800c294:	3303      	adds	r3, #3
 800c296:	f023 0303 	bic.w	r3, r3, #3
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d306      	bcc.n	800c2ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c29e:	8afa      	ldrh	r2, [r7, #22]
 800c2a0:	88bb      	ldrh	r3, [r7, #4]
 800c2a2:	3303      	adds	r3, #3
 800c2a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d201      	bcs.n	800c2b0 <pbuf_alloc+0x160>
        return NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e035      	b.n	800c31c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c2b0:	8afb      	ldrh	r3, [r7, #22]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff f972 	bl	800b59c <mem_malloc>
 800c2b8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <pbuf_alloc+0x174>
        return NULL;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e02b      	b.n	800c31c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c2c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2c6:	3310      	adds	r3, #16
 800c2c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2ca:	4413      	add	r3, r2
 800c2cc:	3303      	adds	r3, #3
 800c2ce:	f023 0303 	bic.w	r3, r3, #3
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	88b9      	ldrh	r1, [r7, #4]
 800c2d6:	88ba      	ldrh	r2, [r7, #4]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	887b      	ldrh	r3, [r7, #2]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2e6:	f7ff ff09 	bl	800c0fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d010      	beq.n	800c318 <pbuf_alloc+0x1c8>
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c324 <pbuf_alloc+0x1d4>)
 800c2f8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c2fc:	490d      	ldr	r1, [pc, #52]	@ (800c334 <pbuf_alloc+0x1e4>)
 800c2fe:	480b      	ldr	r0, [pc, #44]	@ (800c32c <pbuf_alloc+0x1dc>)
 800c300:	f009 ff76 	bl	80161f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c304:	e008      	b.n	800c318 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c306:	4b07      	ldr	r3, [pc, #28]	@ (800c324 <pbuf_alloc+0x1d4>)
 800c308:	f240 1227 	movw	r2, #295	@ 0x127
 800c30c:	490a      	ldr	r1, [pc, #40]	@ (800c338 <pbuf_alloc+0x1e8>)
 800c30e:	4807      	ldr	r0, [pc, #28]	@ (800c32c <pbuf_alloc+0x1dc>)
 800c310:	f009 ff6e 	bl	80161f0 <iprintf>
      return NULL;
 800c314:	2300      	movs	r3, #0
 800c316:	e001      	b.n	800c31c <pbuf_alloc+0x1cc>
      break;
 800c318:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3728      	adds	r7, #40	@ 0x28
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	08018810 	.word	0x08018810
 800c328:	08018840 	.word	0x08018840
 800c32c:	08018870 	.word	0x08018870
 800c330:	08018898 	.word	0x08018898
 800c334:	080188cc 	.word	0x080188cc
 800c338:	080188f8 	.word	0x080188f8

0800c33c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af02      	add	r7, sp, #8
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	807b      	strh	r3, [r7, #2]
 800c348:	4613      	mov	r3, r2
 800c34a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c34c:	883b      	ldrh	r3, [r7, #0]
 800c34e:	2b41      	cmp	r3, #65	@ 0x41
 800c350:	d009      	beq.n	800c366 <pbuf_alloc_reference+0x2a>
 800c352:	883b      	ldrh	r3, [r7, #0]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d006      	beq.n	800c366 <pbuf_alloc_reference+0x2a>
 800c358:	4b0f      	ldr	r3, [pc, #60]	@ (800c398 <pbuf_alloc_reference+0x5c>)
 800c35a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c35e:	490f      	ldr	r1, [pc, #60]	@ (800c39c <pbuf_alloc_reference+0x60>)
 800c360:	480f      	ldr	r0, [pc, #60]	@ (800c3a0 <pbuf_alloc_reference+0x64>)
 800c362:	f009 ff45 	bl	80161f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c366:	200b      	movs	r0, #11
 800c368:	f7ff fabc 	bl	800b8e4 <memp_malloc>
 800c36c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	e00b      	b.n	800c390 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c378:	8879      	ldrh	r1, [r7, #2]
 800c37a:	887a      	ldrh	r2, [r7, #2]
 800c37c:	2300      	movs	r3, #0
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	883b      	ldrh	r3, [r7, #0]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	460b      	mov	r3, r1
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff feb7 	bl	800c0fc <pbuf_init_alloced_pbuf>
  return p;
 800c38e:	68fb      	ldr	r3, [r7, #12]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	08018810 	.word	0x08018810
 800c39c:	08018914 	.word	0x08018914
 800c3a0:	08018870 	.word	0x08018870

0800c3a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b088      	sub	sp, #32
 800c3a8:	af02      	add	r7, sp, #8
 800c3aa:	607b      	str	r3, [r7, #4]
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	81bb      	strh	r3, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c3bc:	8a7b      	ldrh	r3, [r7, #18]
 800c3be:	3303      	adds	r3, #3
 800c3c0:	f023 0203 	bic.w	r2, r3, #3
 800c3c4:	89bb      	ldrh	r3, [r7, #12]
 800c3c6:	441a      	add	r2, r3
 800c3c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d901      	bls.n	800c3d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e018      	b.n	800c404 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d007      	beq.n	800c3e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c3d8:	8a7b      	ldrh	r3, [r7, #18]
 800c3da:	3303      	adds	r3, #3
 800c3dc:	f023 0303 	bic.w	r3, r3, #3
 800c3e0:	6a3a      	ldr	r2, [r7, #32]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	e001      	b.n	800c3ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	89b9      	ldrh	r1, [r7, #12]
 800c3f0:	89ba      	ldrh	r2, [r7, #12]
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	897b      	ldrh	r3, [r7, #10]
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	6979      	ldr	r1, [r7, #20]
 800c3fe:	f7ff fe7d 	bl	800c0fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c402:	687b      	ldr	r3, [r7, #4]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	460b      	mov	r3, r1
 800c416:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <pbuf_realloc+0x20>
 800c41e:	4b3a      	ldr	r3, [pc, #232]	@ (800c508 <pbuf_realloc+0xfc>)
 800c420:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c424:	4939      	ldr	r1, [pc, #228]	@ (800c50c <pbuf_realloc+0x100>)
 800c426:	483a      	ldr	r0, [pc, #232]	@ (800c510 <pbuf_realloc+0x104>)
 800c428:	f009 fee2 	bl	80161f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	891b      	ldrh	r3, [r3, #8]
 800c430:	887a      	ldrh	r2, [r7, #2]
 800c432:	429a      	cmp	r2, r3
 800c434:	d263      	bcs.n	800c4fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	891a      	ldrh	r2, [r3, #8]
 800c43a:	887b      	ldrh	r3, [r7, #2]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c440:	887b      	ldrh	r3, [r7, #2]
 800c442:	817b      	strh	r3, [r7, #10]
  q = p;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c448:	e018      	b.n	800c47c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	895b      	ldrh	r3, [r3, #10]
 800c44e:	897a      	ldrh	r2, [r7, #10]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	891a      	ldrh	r2, [r3, #8]
 800c458:	893b      	ldrh	r3, [r7, #8]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <pbuf_realloc+0x70>
 800c46e:	4b26      	ldr	r3, [pc, #152]	@ (800c508 <pbuf_realloc+0xfc>)
 800c470:	f240 12af 	movw	r2, #431	@ 0x1af
 800c474:	4927      	ldr	r1, [pc, #156]	@ (800c514 <pbuf_realloc+0x108>)
 800c476:	4826      	ldr	r0, [pc, #152]	@ (800c510 <pbuf_realloc+0x104>)
 800c478:	f009 feba 	bl	80161f0 <iprintf>
  while (rem_len > q->len) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	895b      	ldrh	r3, [r3, #10]
 800c480:	897a      	ldrh	r2, [r7, #10]
 800c482:	429a      	cmp	r2, r3
 800c484:	d8e1      	bhi.n	800c44a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	7b1b      	ldrb	r3, [r3, #12]
 800c48a:	f003 030f 	and.w	r3, r3, #15
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d121      	bne.n	800c4d6 <pbuf_realloc+0xca>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	895b      	ldrh	r3, [r3, #10]
 800c496:	897a      	ldrh	r2, [r7, #10]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d01c      	beq.n	800c4d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	7b5b      	ldrb	r3, [r3, #13]
 800c4a0:	f003 0302 	and.w	r3, r3, #2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d116      	bne.n	800c4d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	897b      	ldrh	r3, [r7, #10]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7fe ff64 	bl	800b388 <mem_trim>
 800c4c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d106      	bne.n	800c4d6 <pbuf_realloc+0xca>
 800c4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c508 <pbuf_realloc+0xfc>)
 800c4ca:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c4ce:	4912      	ldr	r1, [pc, #72]	@ (800c518 <pbuf_realloc+0x10c>)
 800c4d0:	480f      	ldr	r0, [pc, #60]	@ (800c510 <pbuf_realloc+0x104>)
 800c4d2:	f009 fe8d 	bl	80161f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	897a      	ldrh	r2, [r7, #10]
 800c4da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	895a      	ldrh	r2, [r3, #10]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d004      	beq.n	800c4f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 f911 	bl	800c718 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	e000      	b.n	800c500 <pbuf_realloc+0xf4>
    return;
 800c4fe:	bf00      	nop

}
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	08018810 	.word	0x08018810
 800c50c:	08018928 	.word	0x08018928
 800c510:	08018870 	.word	0x08018870
 800c514:	08018940 	.word	0x08018940
 800c518:	08018958 	.word	0x08018958

0800c51c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	4613      	mov	r3, r2
 800c528:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d106      	bne.n	800c53e <pbuf_add_header_impl+0x22>
 800c530:	4b2b      	ldr	r3, [pc, #172]	@ (800c5e0 <pbuf_add_header_impl+0xc4>)
 800c532:	f240 12df 	movw	r2, #479	@ 0x1df
 800c536:	492b      	ldr	r1, [pc, #172]	@ (800c5e4 <pbuf_add_header_impl+0xc8>)
 800c538:	482b      	ldr	r0, [pc, #172]	@ (800c5e8 <pbuf_add_header_impl+0xcc>)
 800c53a:	f009 fe59 	bl	80161f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <pbuf_add_header_impl+0x30>
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c54a:	d301      	bcc.n	800c550 <pbuf_add_header_impl+0x34>
    return 1;
 800c54c:	2301      	movs	r3, #1
 800c54e:	e043      	b.n	800c5d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <pbuf_add_header_impl+0x3e>
    return 0;
 800c556:	2300      	movs	r3, #0
 800c558:	e03e      	b.n	800c5d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	891a      	ldrh	r2, [r3, #8]
 800c562:	8a7b      	ldrh	r3, [r7, #18]
 800c564:	4413      	add	r3, r2
 800c566:	b29b      	uxth	r3, r3
 800c568:	8a7a      	ldrh	r2, [r7, #18]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d901      	bls.n	800c572 <pbuf_add_header_impl+0x56>
    return 1;
 800c56e:	2301      	movs	r3, #1
 800c570:	e032      	b.n	800c5d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	7b1b      	ldrb	r3, [r3, #12]
 800c576:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c578:	8a3b      	ldrh	r3, [r7, #16]
 800c57a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00c      	beq.n	800c59c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	425b      	negs	r3, r3
 800c58a:	4413      	add	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3310      	adds	r3, #16
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	429a      	cmp	r2, r3
 800c596:	d20d      	bcs.n	800c5b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c598:	2301      	movs	r3, #1
 800c59a:	e01d      	b.n	800c5d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c59c:	79fb      	ldrb	r3, [r7, #7]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d006      	beq.n	800c5b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	425b      	negs	r3, r3
 800c5aa:	4413      	add	r3, r2
 800c5ac:	617b      	str	r3, [r7, #20]
 800c5ae:	e001      	b.n	800c5b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e011      	b.n	800c5d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	895a      	ldrh	r2, [r3, #10]
 800c5be:	8a7b      	ldrh	r3, [r7, #18]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	891a      	ldrh	r2, [r3, #8]
 800c5cc:	8a7b      	ldrh	r3, [r7, #18]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	08018810 	.word	0x08018810
 800c5e4:	08018974 	.word	0x08018974
 800c5e8:	08018870 	.word	0x08018870

0800c5ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff ff8e 	bl	800c51c <pbuf_add_header_impl>
 800c600:	4603      	mov	r3, r0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d106      	bne.n	800c62a <pbuf_remove_header+0x1e>
 800c61c:	4b20      	ldr	r3, [pc, #128]	@ (800c6a0 <pbuf_remove_header+0x94>)
 800c61e:	f240 224b 	movw	r2, #587	@ 0x24b
 800c622:	4920      	ldr	r1, [pc, #128]	@ (800c6a4 <pbuf_remove_header+0x98>)
 800c624:	4820      	ldr	r0, [pc, #128]	@ (800c6a8 <pbuf_remove_header+0x9c>)
 800c626:	f009 fde3 	bl	80161f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <pbuf_remove_header+0x2c>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c636:	d301      	bcc.n	800c63c <pbuf_remove_header+0x30>
    return 1;
 800c638:	2301      	movs	r3, #1
 800c63a:	e02c      	b.n	800c696 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d101      	bne.n	800c646 <pbuf_remove_header+0x3a>
    return 0;
 800c642:	2300      	movs	r3, #0
 800c644:	e027      	b.n	800c696 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	895b      	ldrh	r3, [r3, #10]
 800c64e:	89fa      	ldrh	r2, [r7, #14]
 800c650:	429a      	cmp	r2, r3
 800c652:	d908      	bls.n	800c666 <pbuf_remove_header+0x5a>
 800c654:	4b12      	ldr	r3, [pc, #72]	@ (800c6a0 <pbuf_remove_header+0x94>)
 800c656:	f240 2255 	movw	r2, #597	@ 0x255
 800c65a:	4914      	ldr	r1, [pc, #80]	@ (800c6ac <pbuf_remove_header+0xa0>)
 800c65c:	4812      	ldr	r0, [pc, #72]	@ (800c6a8 <pbuf_remove_header+0x9c>)
 800c65e:	f009 fdc7 	bl	80161f0 <iprintf>
 800c662:	2301      	movs	r3, #1
 800c664:	e017      	b.n	800c696 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	441a      	add	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	895a      	ldrh	r2, [r3, #10]
 800c67c:	89fb      	ldrh	r3, [r7, #14]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	b29a      	uxth	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	891a      	ldrh	r2, [r3, #8]
 800c68a:	89fb      	ldrh	r3, [r7, #14]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	b29a      	uxth	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	08018810 	.word	0x08018810
 800c6a4:	08018974 	.word	0x08018974
 800c6a8:	08018870 	.word	0x08018870
 800c6ac:	08018980 	.word	0x08018980

0800c6b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	807b      	strh	r3, [r7, #2]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c6c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	da08      	bge.n	800c6da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c6c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6cc:	425b      	negs	r3, r3
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7ff ff9b 	bl	800c60c <pbuf_remove_header>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	e007      	b.n	800c6ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c6da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6de:	787a      	ldrb	r2, [r7, #1]
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff ff1a 	bl	800c51c <pbuf_add_header_impl>
 800c6e8:	4603      	mov	r3, r0
  }
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c6fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c702:	2201      	movs	r2, #1
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff ffd2 	bl	800c6b0 <pbuf_header_impl>
 800c70c:	4603      	mov	r3, r0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b088      	sub	sp, #32
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10b      	bne.n	800c73e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d106      	bne.n	800c73a <pbuf_free+0x22>
 800c72c:	4b3b      	ldr	r3, [pc, #236]	@ (800c81c <pbuf_free+0x104>)
 800c72e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c732:	493b      	ldr	r1, [pc, #236]	@ (800c820 <pbuf_free+0x108>)
 800c734:	483b      	ldr	r0, [pc, #236]	@ (800c824 <pbuf_free+0x10c>)
 800c736:	f009 fd5b 	bl	80161f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e069      	b.n	800c812 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c742:	e062      	b.n	800c80a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c744:	f009 fc36 	bl	8015fb4 <sys_arch_protect>
 800c748:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	7b9b      	ldrb	r3, [r3, #14]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d106      	bne.n	800c760 <pbuf_free+0x48>
 800c752:	4b32      	ldr	r3, [pc, #200]	@ (800c81c <pbuf_free+0x104>)
 800c754:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c758:	4933      	ldr	r1, [pc, #204]	@ (800c828 <pbuf_free+0x110>)
 800c75a:	4832      	ldr	r0, [pc, #200]	@ (800c824 <pbuf_free+0x10c>)
 800c75c:	f009 fd48 	bl	80161f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7b9b      	ldrb	r3, [r3, #14]
 800c764:	3b01      	subs	r3, #1
 800c766:	b2da      	uxtb	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	739a      	strb	r2, [r3, #14]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7b9b      	ldrb	r3, [r3, #14]
 800c770:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c772:	69b8      	ldr	r0, [r7, #24]
 800c774:	f009 fc2c 	bl	8015fd0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c778:	7dfb      	ldrb	r3, [r7, #23]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d143      	bne.n	800c806 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7b1b      	ldrb	r3, [r3, #12]
 800c788:	f003 030f 	and.w	r3, r3, #15
 800c78c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	7b5b      	ldrb	r3, [r3, #13]
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b00      	cmp	r3, #0
 800c798:	d011      	beq.n	800c7be <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d106      	bne.n	800c7b4 <pbuf_free+0x9c>
 800c7a6:	4b1d      	ldr	r3, [pc, #116]	@ (800c81c <pbuf_free+0x104>)
 800c7a8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c7ac:	491f      	ldr	r1, [pc, #124]	@ (800c82c <pbuf_free+0x114>)
 800c7ae:	481d      	ldr	r0, [pc, #116]	@ (800c824 <pbuf_free+0x10c>)
 800c7b0:	f009 fd1e 	bl	80161f0 <iprintf>
        pc->custom_free_function(p);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	4798      	blx	r3
 800c7bc:	e01d      	b.n	800c7fa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d104      	bne.n	800c7ce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	200c      	movs	r0, #12
 800c7c8:	f7ff f902 	bl	800b9d0 <memp_free>
 800c7cc:	e015      	b.n	800c7fa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c7ce:	7bfb      	ldrb	r3, [r7, #15]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d104      	bne.n	800c7de <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c7d4:	6879      	ldr	r1, [r7, #4]
 800c7d6:	200b      	movs	r0, #11
 800c7d8:	f7ff f8fa 	bl	800b9d0 <memp_free>
 800c7dc:	e00d      	b.n	800c7fa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c7de:	7bfb      	ldrb	r3, [r7, #15]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d103      	bne.n	800c7ec <pbuf_free+0xd4>
          mem_free(p);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7fe fd3f 	bl	800b268 <mem_free>
 800c7ea:	e006      	b.n	800c7fa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c7ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c81c <pbuf_free+0x104>)
 800c7ee:	f240 320f 	movw	r2, #783	@ 0x30f
 800c7f2:	490f      	ldr	r1, [pc, #60]	@ (800c830 <pbuf_free+0x118>)
 800c7f4:	480b      	ldr	r0, [pc, #44]	@ (800c824 <pbuf_free+0x10c>)
 800c7f6:	f009 fcfb 	bl	80161f0 <iprintf>
        }
      }
      count++;
 800c7fa:	7ffb      	ldrb	r3, [r7, #31]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	607b      	str	r3, [r7, #4]
 800c804:	e001      	b.n	800c80a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c806:	2300      	movs	r3, #0
 800c808:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d199      	bne.n	800c744 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c810:	7ffb      	ldrb	r3, [r7, #31]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3720      	adds	r7, #32
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	08018810 	.word	0x08018810
 800c820:	08018974 	.word	0x08018974
 800c824:	08018870 	.word	0x08018870
 800c828:	080189a0 	.word	0x080189a0
 800c82c:	080189b8 	.word	0x080189b8
 800c830:	080189dc 	.word	0x080189dc

0800c834 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c840:	e005      	b.n	800c84e <pbuf_clen+0x1a>
    ++len;
 800c842:	89fb      	ldrh	r3, [r7, #14]
 800c844:	3301      	adds	r3, #1
 800c846:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1f6      	bne.n	800c842 <pbuf_clen+0xe>
  }
  return len;
 800c854:	89fb      	ldrh	r3, [r7, #14]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
	...

0800c864 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d016      	beq.n	800c8a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c872:	f009 fb9f 	bl	8015fb4 <sys_arch_protect>
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7b9b      	ldrb	r3, [r3, #14]
 800c87c:	3301      	adds	r3, #1
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	739a      	strb	r2, [r3, #14]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f009 fba3 	bl	8015fd0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	7b9b      	ldrb	r3, [r3, #14]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <pbuf_ref+0x3c>
 800c892:	4b05      	ldr	r3, [pc, #20]	@ (800c8a8 <pbuf_ref+0x44>)
 800c894:	f240 3242 	movw	r2, #834	@ 0x342
 800c898:	4904      	ldr	r1, [pc, #16]	@ (800c8ac <pbuf_ref+0x48>)
 800c89a:	4805      	ldr	r0, [pc, #20]	@ (800c8b0 <pbuf_ref+0x4c>)
 800c89c:	f009 fca8 	bl	80161f0 <iprintf>
  }
}
 800c8a0:	bf00      	nop
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	08018810 	.word	0x08018810
 800c8ac:	080189f0 	.word	0x080189f0
 800c8b0:	08018870 	.word	0x08018870

0800c8b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <pbuf_cat+0x16>
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d107      	bne.n	800c8da <pbuf_cat+0x26>
 800c8ca:	4b20      	ldr	r3, [pc, #128]	@ (800c94c <pbuf_cat+0x98>)
 800c8cc:	f240 3259 	movw	r2, #857	@ 0x359
 800c8d0:	491f      	ldr	r1, [pc, #124]	@ (800c950 <pbuf_cat+0x9c>)
 800c8d2:	4820      	ldr	r0, [pc, #128]	@ (800c954 <pbuf_cat+0xa0>)
 800c8d4:	f009 fc8c 	bl	80161f0 <iprintf>
 800c8d8:	e034      	b.n	800c944 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	e00a      	b.n	800c8f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	891a      	ldrh	r2, [r3, #8]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	891b      	ldrh	r3, [r3, #8]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1f0      	bne.n	800c8e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	891a      	ldrh	r2, [r3, #8]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	895b      	ldrh	r3, [r3, #10]
 800c906:	429a      	cmp	r2, r3
 800c908:	d006      	beq.n	800c918 <pbuf_cat+0x64>
 800c90a:	4b10      	ldr	r3, [pc, #64]	@ (800c94c <pbuf_cat+0x98>)
 800c90c:	f240 3262 	movw	r2, #866	@ 0x362
 800c910:	4911      	ldr	r1, [pc, #68]	@ (800c958 <pbuf_cat+0xa4>)
 800c912:	4810      	ldr	r0, [pc, #64]	@ (800c954 <pbuf_cat+0xa0>)
 800c914:	f009 fc6c 	bl	80161f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d006      	beq.n	800c92e <pbuf_cat+0x7a>
 800c920:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <pbuf_cat+0x98>)
 800c922:	f240 3263 	movw	r2, #867	@ 0x363
 800c926:	490d      	ldr	r1, [pc, #52]	@ (800c95c <pbuf_cat+0xa8>)
 800c928:	480a      	ldr	r0, [pc, #40]	@ (800c954 <pbuf_cat+0xa0>)
 800c92a:	f009 fc61 	bl	80161f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	891a      	ldrh	r2, [r3, #8]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	891b      	ldrh	r3, [r3, #8]
 800c936:	4413      	add	r3, r2
 800c938:	b29a      	uxth	r2, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08018810 	.word	0x08018810
 800c950:	08018a04 	.word	0x08018a04
 800c954:	08018870 	.word	0x08018870
 800c958:	08018a3c 	.word	0x08018a3c
 800c95c:	08018a6c 	.word	0x08018a6c

0800c960 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
 800c96e:	2300      	movs	r3, #0
 800c970:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d008      	beq.n	800c98a <pbuf_copy+0x2a>
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d005      	beq.n	800c98a <pbuf_copy+0x2a>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	891a      	ldrh	r2, [r3, #8]
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	891b      	ldrh	r3, [r3, #8]
 800c986:	429a      	cmp	r2, r3
 800c988:	d209      	bcs.n	800c99e <pbuf_copy+0x3e>
 800c98a:	4b57      	ldr	r3, [pc, #348]	@ (800cae8 <pbuf_copy+0x188>)
 800c98c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c990:	4956      	ldr	r1, [pc, #344]	@ (800caec <pbuf_copy+0x18c>)
 800c992:	4857      	ldr	r0, [pc, #348]	@ (800caf0 <pbuf_copy+0x190>)
 800c994:	f009 fc2c 	bl	80161f0 <iprintf>
 800c998:	f06f 030f 	mvn.w	r3, #15
 800c99c:	e09f      	b.n	800cade <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	895b      	ldrh	r3, [r3, #10]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	1ad2      	subs	r2, r2, r3
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	895b      	ldrh	r3, [r3, #10]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	1acb      	subs	r3, r1, r3
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d306      	bcc.n	800c9c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	895b      	ldrh	r3, [r3, #10]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	60fb      	str	r3, [r7, #12]
 800c9c2:	e005      	b.n	800c9d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	895b      	ldrh	r3, [r3, #10]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	18d0      	adds	r0, r2, r3
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	4413      	add	r3, r2
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	f009 fd6f 	bl	80164c6 <memcpy>
    offset_to += len;
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	895b      	ldrh	r3, [r3, #10]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d906      	bls.n	800ca12 <pbuf_copy+0xb2>
 800ca04:	4b38      	ldr	r3, [pc, #224]	@ (800cae8 <pbuf_copy+0x188>)
 800ca06:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ca0a:	493a      	ldr	r1, [pc, #232]	@ (800caf4 <pbuf_copy+0x194>)
 800ca0c:	4838      	ldr	r0, [pc, #224]	@ (800caf0 <pbuf_copy+0x190>)
 800ca0e:	f009 fbef 	bl	80161f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	895b      	ldrh	r3, [r3, #10]
 800ca16:	461a      	mov	r2, r3
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d906      	bls.n	800ca2c <pbuf_copy+0xcc>
 800ca1e:	4b32      	ldr	r3, [pc, #200]	@ (800cae8 <pbuf_copy+0x188>)
 800ca20:	f240 32da 	movw	r2, #986	@ 0x3da
 800ca24:	4934      	ldr	r1, [pc, #208]	@ (800caf8 <pbuf_copy+0x198>)
 800ca26:	4832      	ldr	r0, [pc, #200]	@ (800caf0 <pbuf_copy+0x190>)
 800ca28:	f009 fbe2 	bl	80161f0 <iprintf>
    if (offset_from >= p_from->len) {
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	895b      	ldrh	r3, [r3, #10]
 800ca30:	461a      	mov	r2, r3
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d304      	bcc.n	800ca42 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	895b      	ldrh	r3, [r3, #10]
 800ca46:	461a      	mov	r2, r3
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d114      	bne.n	800ca78 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10c      	bne.n	800ca78 <pbuf_copy+0x118>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d009      	beq.n	800ca78 <pbuf_copy+0x118>
 800ca64:	4b20      	ldr	r3, [pc, #128]	@ (800cae8 <pbuf_copy+0x188>)
 800ca66:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800ca6a:	4924      	ldr	r1, [pc, #144]	@ (800cafc <pbuf_copy+0x19c>)
 800ca6c:	4820      	ldr	r0, [pc, #128]	@ (800caf0 <pbuf_copy+0x190>)
 800ca6e:	f009 fbbf 	bl	80161f0 <iprintf>
 800ca72:	f06f 030f 	mvn.w	r3, #15
 800ca76:	e032      	b.n	800cade <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d013      	beq.n	800caa6 <pbuf_copy+0x146>
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	895a      	ldrh	r2, [r3, #10]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	891b      	ldrh	r3, [r3, #8]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d10d      	bne.n	800caa6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d009      	beq.n	800caa6 <pbuf_copy+0x146>
 800ca92:	4b15      	ldr	r3, [pc, #84]	@ (800cae8 <pbuf_copy+0x188>)
 800ca94:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800ca98:	4919      	ldr	r1, [pc, #100]	@ (800cb00 <pbuf_copy+0x1a0>)
 800ca9a:	4815      	ldr	r0, [pc, #84]	@ (800caf0 <pbuf_copy+0x190>)
 800ca9c:	f009 fba8 	bl	80161f0 <iprintf>
 800caa0:	f06f 0305 	mvn.w	r3, #5
 800caa4:	e01b      	b.n	800cade <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d013      	beq.n	800cad4 <pbuf_copy+0x174>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	895a      	ldrh	r2, [r3, #10]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	891b      	ldrh	r3, [r3, #8]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d10d      	bne.n	800cad4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d009      	beq.n	800cad4 <pbuf_copy+0x174>
 800cac0:	4b09      	ldr	r3, [pc, #36]	@ (800cae8 <pbuf_copy+0x188>)
 800cac2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cac6:	490e      	ldr	r1, [pc, #56]	@ (800cb00 <pbuf_copy+0x1a0>)
 800cac8:	4809      	ldr	r0, [pc, #36]	@ (800caf0 <pbuf_copy+0x190>)
 800caca:	f009 fb91 	bl	80161f0 <iprintf>
 800cace:	f06f 0305 	mvn.w	r3, #5
 800cad2:	e004      	b.n	800cade <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f47f af61 	bne.w	800c99e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	08018810 	.word	0x08018810
 800caec:	08018ab8 	.word	0x08018ab8
 800caf0:	08018870 	.word	0x08018870
 800caf4:	08018ae8 	.word	0x08018ae8
 800caf8:	08018b00 	.word	0x08018b00
 800cafc:	08018b1c 	.word	0x08018b1c
 800cb00:	08018b2c 	.word	0x08018b2c

0800cb04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	461a      	mov	r2, r3
 800cb12:	460b      	mov	r3, r1
 800cb14:	80fb      	strh	r3, [r7, #6]
 800cb16:	4613      	mov	r3, r2
 800cb18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d108      	bne.n	800cb3a <pbuf_copy_partial+0x36>
 800cb28:	4b2b      	ldr	r3, [pc, #172]	@ (800cbd8 <pbuf_copy_partial+0xd4>)
 800cb2a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cb2e:	492b      	ldr	r1, [pc, #172]	@ (800cbdc <pbuf_copy_partial+0xd8>)
 800cb30:	482b      	ldr	r0, [pc, #172]	@ (800cbe0 <pbuf_copy_partial+0xdc>)
 800cb32:	f009 fb5d 	bl	80161f0 <iprintf>
 800cb36:	2300      	movs	r3, #0
 800cb38:	e04a      	b.n	800cbd0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d108      	bne.n	800cb52 <pbuf_copy_partial+0x4e>
 800cb40:	4b25      	ldr	r3, [pc, #148]	@ (800cbd8 <pbuf_copy_partial+0xd4>)
 800cb42:	f240 420b 	movw	r2, #1035	@ 0x40b
 800cb46:	4927      	ldr	r1, [pc, #156]	@ (800cbe4 <pbuf_copy_partial+0xe0>)
 800cb48:	4825      	ldr	r0, [pc, #148]	@ (800cbe0 <pbuf_copy_partial+0xdc>)
 800cb4a:	f009 fb51 	bl	80161f0 <iprintf>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e03e      	b.n	800cbd0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	61fb      	str	r3, [r7, #28]
 800cb56:	e034      	b.n	800cbc2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cb58:	88bb      	ldrh	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <pbuf_copy_partial+0x70>
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	895b      	ldrh	r3, [r3, #10]
 800cb62:	88ba      	ldrh	r2, [r7, #4]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d305      	bcc.n	800cb74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	895b      	ldrh	r3, [r3, #10]
 800cb6c:	88ba      	ldrh	r2, [r7, #4]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	80bb      	strh	r3, [r7, #4]
 800cb72:	e023      	b.n	800cbbc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	895a      	ldrh	r2, [r3, #10]
 800cb78:	88bb      	ldrh	r3, [r7, #4]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cb7e:	8b3a      	ldrh	r2, [r7, #24]
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d901      	bls.n	800cb8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cb86:	88fb      	ldrh	r3, [r7, #6]
 800cb88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cb8a:	8b7b      	ldrh	r3, [r7, #26]
 800cb8c:	68ba      	ldr	r2, [r7, #8]
 800cb8e:	18d0      	adds	r0, r2, r3
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	88bb      	ldrh	r3, [r7, #4]
 800cb96:	4413      	add	r3, r2
 800cb98:	8b3a      	ldrh	r2, [r7, #24]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	f009 fc93 	bl	80164c6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cba0:	8afa      	ldrh	r2, [r7, #22]
 800cba2:	8b3b      	ldrh	r3, [r7, #24]
 800cba4:	4413      	add	r3, r2
 800cba6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cba8:	8b7a      	ldrh	r2, [r7, #26]
 800cbaa:	8b3b      	ldrh	r3, [r7, #24]
 800cbac:	4413      	add	r3, r2
 800cbae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cbb0:	88fa      	ldrh	r2, [r7, #6]
 800cbb2:	8b3b      	ldrh	r3, [r7, #24]
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	61fb      	str	r3, [r7, #28]
 800cbc2:	88fb      	ldrh	r3, [r7, #6]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d002      	beq.n	800cbce <pbuf_copy_partial+0xca>
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1c4      	bne.n	800cb58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cbce:	8afb      	ldrh	r3, [r7, #22]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	08018810 	.word	0x08018810
 800cbdc:	08018b58 	.word	0x08018b58
 800cbe0:	08018870 	.word	0x08018870
 800cbe4:	08018b78 	.word	0x08018b78

0800cbe8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	603a      	str	r2, [r7, #0]
 800cbf2:	71fb      	strb	r3, [r7, #7]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	8919      	ldrh	r1, [r3, #8]
 800cbfc:	88ba      	ldrh	r2, [r7, #4]
 800cbfe:	79fb      	ldrb	r3, [r7, #7]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff faa5 	bl	800c150 <pbuf_alloc>
 800cc06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <pbuf_clone+0x2a>
    return NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	e011      	b.n	800cc36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fea3 	bl	800c960 <pbuf_copy>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cc1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d006      	beq.n	800cc34 <pbuf_clone+0x4c>
 800cc26:	4b06      	ldr	r3, [pc, #24]	@ (800cc40 <pbuf_clone+0x58>)
 800cc28:	f240 5224 	movw	r2, #1316	@ 0x524
 800cc2c:	4905      	ldr	r1, [pc, #20]	@ (800cc44 <pbuf_clone+0x5c>)
 800cc2e:	4806      	ldr	r0, [pc, #24]	@ (800cc48 <pbuf_clone+0x60>)
 800cc30:	f009 fade 	bl	80161f0 <iprintf>
  return q;
 800cc34:	68fb      	ldr	r3, [r7, #12]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	08018810 	.word	0x08018810
 800cc44:	08018c84 	.word	0x08018c84
 800cc48:	08018870 	.word	0x08018870

0800cc4c <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  if (ms > 0) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d016      	beq.n	800cc88 <sys_msleep+0x3c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	2100      	movs	r1, #0
 800cc60:	4618      	mov	r0, r3
 800cc62:	f009 f8aa 	bl	8015dba <sys_sem_new>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10a      	bne.n	800cc88 <sys_msleep+0x3c>
      sys_arch_sem_wait(&delaysem, ms);
 800cc72:	f107 0308 	add.w	r3, r7, #8
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f009 f8c6 	bl	8015e0a <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 800cc7e:	f107 0308 	add.w	r3, r7, #8
 800cc82:	4618      	mov	r0, r3
 800cc84:	f009 f8ff 	bl	8015e86 <sys_sem_free>
    }
  }
}
 800cc88:	bf00      	nop
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cc94:	f009 f9ac 	bl	8015ff0 <rand>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	4b01      	ldr	r3, [pc, #4]	@ (800ccb0 <tcp_init+0x20>)
 800ccaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ccac:	bf00      	nop
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20000124 	.word	0x20000124

0800ccb4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7d1b      	ldrb	r3, [r3, #20]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d105      	bne.n	800ccd0 <tcp_free+0x1c>
 800ccc4:	4b06      	ldr	r3, [pc, #24]	@ (800cce0 <tcp_free+0x2c>)
 800ccc6:	22d4      	movs	r2, #212	@ 0xd4
 800ccc8:	4906      	ldr	r1, [pc, #24]	@ (800cce4 <tcp_free+0x30>)
 800ccca:	4807      	ldr	r0, [pc, #28]	@ (800cce8 <tcp_free+0x34>)
 800cccc:	f009 fa90 	bl	80161f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	2001      	movs	r0, #1
 800ccd4:	f7fe fe7c 	bl	800b9d0 <memp_free>
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	08018d10 	.word	0x08018d10
 800cce4:	08018d40 	.word	0x08018d40
 800cce8:	08018d54 	.word	0x08018d54

0800ccec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	7d1b      	ldrb	r3, [r3, #20]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d105      	bne.n	800cd08 <tcp_free_listen+0x1c>
 800ccfc:	4b06      	ldr	r3, [pc, #24]	@ (800cd18 <tcp_free_listen+0x2c>)
 800ccfe:	22df      	movs	r2, #223	@ 0xdf
 800cd00:	4906      	ldr	r1, [pc, #24]	@ (800cd1c <tcp_free_listen+0x30>)
 800cd02:	4807      	ldr	r0, [pc, #28]	@ (800cd20 <tcp_free_listen+0x34>)
 800cd04:	f009 fa74 	bl	80161f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	2002      	movs	r0, #2
 800cd0c:	f7fe fe60 	bl	800b9d0 <memp_free>
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	08018d10 	.word	0x08018d10
 800cd1c:	08018d7c 	.word	0x08018d7c
 800cd20:	08018d54 	.word	0x08018d54

0800cd24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cd28:	f001 f8ac 	bl	800de84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cd2c:	4b07      	ldr	r3, [pc, #28]	@ (800cd4c <tcp_tmr+0x28>)
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	3301      	adds	r3, #1
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	4b05      	ldr	r3, [pc, #20]	@ (800cd4c <tcp_tmr+0x28>)
 800cd36:	701a      	strb	r2, [r3, #0]
 800cd38:	4b04      	ldr	r3, [pc, #16]	@ (800cd4c <tcp_tmr+0x28>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cd44:	f000 fd58 	bl	800d7f8 <tcp_slowtmr>
  }
}
 800cd48:	bf00      	nop
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	2000eb51 	.word	0x2000eb51

0800cd50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d105      	bne.n	800cd6c <tcp_remove_listener+0x1c>
 800cd60:	4b0d      	ldr	r3, [pc, #52]	@ (800cd98 <tcp_remove_listener+0x48>)
 800cd62:	22ff      	movs	r2, #255	@ 0xff
 800cd64:	490d      	ldr	r1, [pc, #52]	@ (800cd9c <tcp_remove_listener+0x4c>)
 800cd66:	480e      	ldr	r0, [pc, #56]	@ (800cda0 <tcp_remove_listener+0x50>)
 800cd68:	f009 fa42 	bl	80161f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	e00a      	b.n	800cd88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d102      	bne.n	800cd82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1f1      	bne.n	800cd72 <tcp_remove_listener+0x22>
    }
  }
}
 800cd8e:	bf00      	nop
 800cd90:	bf00      	nop
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	08018d10 	.word	0x08018d10
 800cd9c:	08018d98 	.word	0x08018d98
 800cda0:	08018d54 	.word	0x08018d54

0800cda4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <tcp_listen_closed+0x1c>
 800cdb2:	4b14      	ldr	r3, [pc, #80]	@ (800ce04 <tcp_listen_closed+0x60>)
 800cdb4:	f240 1211 	movw	r2, #273	@ 0x111
 800cdb8:	4913      	ldr	r1, [pc, #76]	@ (800ce08 <tcp_listen_closed+0x64>)
 800cdba:	4814      	ldr	r0, [pc, #80]	@ (800ce0c <tcp_listen_closed+0x68>)
 800cdbc:	f009 fa18 	bl	80161f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7d1b      	ldrb	r3, [r3, #20]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d006      	beq.n	800cdd6 <tcp_listen_closed+0x32>
 800cdc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ce04 <tcp_listen_closed+0x60>)
 800cdca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800cdce:	4910      	ldr	r1, [pc, #64]	@ (800ce10 <tcp_listen_closed+0x6c>)
 800cdd0:	480e      	ldr	r0, [pc, #56]	@ (800ce0c <tcp_listen_closed+0x68>)
 800cdd2:	f009 fa0d 	bl	80161f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e00b      	b.n	800cdf4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cddc:	4a0d      	ldr	r2, [pc, #52]	@ (800ce14 <tcp_listen_closed+0x70>)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	6879      	ldr	r1, [r7, #4]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7ff ffb1 	bl	800cd50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	60fb      	str	r3, [r7, #12]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d9f0      	bls.n	800cddc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	08018d10 	.word	0x08018d10
 800ce08:	08018dc0 	.word	0x08018dc0
 800ce0c:	08018d54 	.word	0x08018d54
 800ce10:	08018dcc 	.word	0x08018dcc
 800ce14:	0801ad34 	.word	0x0801ad34

0800ce18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ce18:	b5b0      	push	{r4, r5, r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af04      	add	r7, sp, #16
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d106      	bne.n	800ce38 <tcp_close_shutdown+0x20>
 800ce2a:	4b63      	ldr	r3, [pc, #396]	@ (800cfb8 <tcp_close_shutdown+0x1a0>)
 800ce2c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ce30:	4962      	ldr	r1, [pc, #392]	@ (800cfbc <tcp_close_shutdown+0x1a4>)
 800ce32:	4863      	ldr	r0, [pc, #396]	@ (800cfc0 <tcp_close_shutdown+0x1a8>)
 800ce34:	f009 f9dc 	bl	80161f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d066      	beq.n	800cf0c <tcp_close_shutdown+0xf4>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7d1b      	ldrb	r3, [r3, #20]
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	d003      	beq.n	800ce4e <tcp_close_shutdown+0x36>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7d1b      	ldrb	r3, [r3, #20]
 800ce4a:	2b07      	cmp	r3, #7
 800ce4c:	d15e      	bne.n	800cf0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d104      	bne.n	800ce60 <tcp_close_shutdown+0x48>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ce5e:	d055      	beq.n	800cf0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	8b5b      	ldrh	r3, [r3, #26]
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d106      	bne.n	800ce7a <tcp_close_shutdown+0x62>
 800ce6c:	4b52      	ldr	r3, [pc, #328]	@ (800cfb8 <tcp_close_shutdown+0x1a0>)
 800ce6e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ce72:	4954      	ldr	r1, [pc, #336]	@ (800cfc4 <tcp_close_shutdown+0x1ac>)
 800ce74:	4852      	ldr	r0, [pc, #328]	@ (800cfc0 <tcp_close_shutdown+0x1a8>)
 800ce76:	f009 f9bb 	bl	80161f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ce82:	687d      	ldr	r5, [r7, #4]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3304      	adds	r3, #4
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	8ad2      	ldrh	r2, [r2, #22]
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	8b09      	ldrh	r1, [r1, #24]
 800ce90:	9102      	str	r1, [sp, #8]
 800ce92:	9201      	str	r2, [sp, #4]
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	462b      	mov	r3, r5
 800ce98:	4622      	mov	r2, r4
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f005 fdc3 	bl	8012a28 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f001 fba6 	bl	800e5f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cea8:	4b47      	ldr	r3, [pc, #284]	@ (800cfc8 <tcp_close_shutdown+0x1b0>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d105      	bne.n	800cebe <tcp_close_shutdown+0xa6>
 800ceb2:	4b45      	ldr	r3, [pc, #276]	@ (800cfc8 <tcp_close_shutdown+0x1b0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	4a43      	ldr	r2, [pc, #268]	@ (800cfc8 <tcp_close_shutdown+0x1b0>)
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	e013      	b.n	800cee6 <tcp_close_shutdown+0xce>
 800cebe:	4b42      	ldr	r3, [pc, #264]	@ (800cfc8 <tcp_close_shutdown+0x1b0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e00c      	b.n	800cee0 <tcp_close_shutdown+0xc8>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d104      	bne.n	800ceda <tcp_close_shutdown+0xc2>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68da      	ldr	r2, [r3, #12]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	60da      	str	r2, [r3, #12]
 800ced8:	e005      	b.n	800cee6 <tcp_close_shutdown+0xce>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1ef      	bne.n	800cec6 <tcp_close_shutdown+0xae>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	60da      	str	r2, [r3, #12]
 800ceec:	4b37      	ldr	r3, [pc, #220]	@ (800cfcc <tcp_close_shutdown+0x1b4>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cef2:	4b37      	ldr	r3, [pc, #220]	@ (800cfd0 <tcp_close_shutdown+0x1b8>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d102      	bne.n	800cf02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cefc:	f004 f83a 	bl	8010f74 <tcp_trigger_input_pcb_close>
 800cf00:	e002      	b.n	800cf08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff fed6 	bl	800ccb4 <tcp_free>
      }
      return ERR_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	e050      	b.n	800cfae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	7d1b      	ldrb	r3, [r3, #20]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d03b      	beq.n	800cf8c <tcp_close_shutdown+0x174>
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	dc44      	bgt.n	800cfa2 <tcp_close_shutdown+0x18a>
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <tcp_close_shutdown+0x10a>
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d02a      	beq.n	800cf76 <tcp_close_shutdown+0x15e>
 800cf20:	e03f      	b.n	800cfa2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	8adb      	ldrh	r3, [r3, #22]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d021      	beq.n	800cf6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf2a:	4b2a      	ldr	r3, [pc, #168]	@ (800cfd4 <tcp_close_shutdown+0x1bc>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d105      	bne.n	800cf40 <tcp_close_shutdown+0x128>
 800cf34:	4b27      	ldr	r3, [pc, #156]	@ (800cfd4 <tcp_close_shutdown+0x1bc>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	4a26      	ldr	r2, [pc, #152]	@ (800cfd4 <tcp_close_shutdown+0x1bc>)
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	e013      	b.n	800cf68 <tcp_close_shutdown+0x150>
 800cf40:	4b24      	ldr	r3, [pc, #144]	@ (800cfd4 <tcp_close_shutdown+0x1bc>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	60bb      	str	r3, [r7, #8]
 800cf46:	e00c      	b.n	800cf62 <tcp_close_shutdown+0x14a>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d104      	bne.n	800cf5c <tcp_close_shutdown+0x144>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	60da      	str	r2, [r3, #12]
 800cf5a:	e005      	b.n	800cf68 <tcp_close_shutdown+0x150>
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	60bb      	str	r3, [r7, #8]
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1ef      	bne.n	800cf48 <tcp_close_shutdown+0x130>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7ff fea0 	bl	800ccb4 <tcp_free>
      break;
 800cf74:	e01a      	b.n	800cfac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff ff14 	bl	800cda4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	4816      	ldr	r0, [pc, #88]	@ (800cfd8 <tcp_close_shutdown+0x1c0>)
 800cf80:	f001 fb88 	bl	800e694 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff feb1 	bl	800ccec <tcp_free_listen>
      break;
 800cf8a:	e00f      	b.n	800cfac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	480e      	ldr	r0, [pc, #56]	@ (800cfc8 <tcp_close_shutdown+0x1b0>)
 800cf90:	f001 fb80 	bl	800e694 <tcp_pcb_remove>
 800cf94:	4b0d      	ldr	r3, [pc, #52]	@ (800cfcc <tcp_close_shutdown+0x1b4>)
 800cf96:	2201      	movs	r2, #1
 800cf98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff fe8a 	bl	800ccb4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cfa0:	e004      	b.n	800cfac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f81a 	bl	800cfdc <tcp_close_shutdown_fin>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	e000      	b.n	800cfae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bdb0      	pop	{r4, r5, r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	08018d10 	.word	0x08018d10
 800cfbc:	08018de4 	.word	0x08018de4
 800cfc0:	08018d54 	.word	0x08018d54
 800cfc4:	08018e04 	.word	0x08018e04
 800cfc8:	2000eb48 	.word	0x2000eb48
 800cfcc:	2000eb50 	.word	0x2000eb50
 800cfd0:	2000eb88 	.word	0x2000eb88
 800cfd4:	2000eb40 	.word	0x2000eb40
 800cfd8:	2000eb44 	.word	0x2000eb44

0800cfdc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <tcp_close_shutdown_fin+0x1c>
 800cfea:	4b2e      	ldr	r3, [pc, #184]	@ (800d0a4 <tcp_close_shutdown_fin+0xc8>)
 800cfec:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cff0:	492d      	ldr	r1, [pc, #180]	@ (800d0a8 <tcp_close_shutdown_fin+0xcc>)
 800cff2:	482e      	ldr	r0, [pc, #184]	@ (800d0ac <tcp_close_shutdown_fin+0xd0>)
 800cff4:	f009 f8fc 	bl	80161f0 <iprintf>

  switch (pcb->state) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7d1b      	ldrb	r3, [r3, #20]
 800cffc:	2b07      	cmp	r3, #7
 800cffe:	d020      	beq.n	800d042 <tcp_close_shutdown_fin+0x66>
 800d000:	2b07      	cmp	r3, #7
 800d002:	dc2b      	bgt.n	800d05c <tcp_close_shutdown_fin+0x80>
 800d004:	2b03      	cmp	r3, #3
 800d006:	d002      	beq.n	800d00e <tcp_close_shutdown_fin+0x32>
 800d008:	2b04      	cmp	r3, #4
 800d00a:	d00d      	beq.n	800d028 <tcp_close_shutdown_fin+0x4c>
 800d00c:	e026      	b.n	800d05c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f004 fe18 	bl	8011c44 <tcp_send_fin>
 800d014:	4603      	mov	r3, r0
 800d016:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d11f      	bne.n	800d060 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2205      	movs	r2, #5
 800d024:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d026:	e01b      	b.n	800d060 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f004 fe0b 	bl	8011c44 <tcp_send_fin>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d114      	bne.n	800d064 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2205      	movs	r2, #5
 800d03e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d040:	e010      	b.n	800d064 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f004 fdfe 	bl	8011c44 <tcp_send_fin>
 800d048:	4603      	mov	r3, r0
 800d04a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d109      	bne.n	800d068 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2209      	movs	r2, #9
 800d058:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d05a:	e005      	b.n	800d068 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	e01c      	b.n	800d09a <tcp_close_shutdown_fin+0xbe>
      break;
 800d060:	bf00      	nop
 800d062:	e002      	b.n	800d06a <tcp_close_shutdown_fin+0x8e>
      break;
 800d064:	bf00      	nop
 800d066:	e000      	b.n	800d06a <tcp_close_shutdown_fin+0x8e>
      break;
 800d068:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f004 ff24 	bl	8011ec0 <tcp_output>
 800d078:	e00d      	b.n	800d096 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d082:	d108      	bne.n	800d096 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	8b5b      	ldrh	r3, [r3, #26]
 800d088:	f043 0308 	orr.w	r3, r3, #8
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	e001      	b.n	800d09a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d096:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	08018d10 	.word	0x08018d10
 800d0a8:	08018dc0 	.word	0x08018dc0
 800d0ac:	08018d54 	.word	0x08018d54

0800d0b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d109      	bne.n	800d0d2 <tcp_close+0x22>
 800d0be:	4b0f      	ldr	r3, [pc, #60]	@ (800d0fc <tcp_close+0x4c>)
 800d0c0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d0c4:	490e      	ldr	r1, [pc, #56]	@ (800d100 <tcp_close+0x50>)
 800d0c6:	480f      	ldr	r0, [pc, #60]	@ (800d104 <tcp_close+0x54>)
 800d0c8:	f009 f892 	bl	80161f0 <iprintf>
 800d0cc:	f06f 030f 	mvn.w	r3, #15
 800d0d0:	e00f      	b.n	800d0f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7d1b      	ldrb	r3, [r3, #20]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d006      	beq.n	800d0e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	8b5b      	ldrh	r3, [r3, #26]
 800d0de:	f043 0310 	orr.w	r3, r3, #16
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fe94 	bl	800ce18 <tcp_close_shutdown>
 800d0f0:	4603      	mov	r3, r0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	08018d10 	.word	0x08018d10
 800d100:	08018e20 	.word	0x08018e20
 800d104:	08018d54 	.word	0x08018d54

0800d108 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d109      	bne.n	800d12e <tcp_shutdown+0x26>
 800d11a:	4b26      	ldr	r3, [pc, #152]	@ (800d1b4 <tcp_shutdown+0xac>)
 800d11c:	f240 2207 	movw	r2, #519	@ 0x207
 800d120:	4925      	ldr	r1, [pc, #148]	@ (800d1b8 <tcp_shutdown+0xb0>)
 800d122:	4826      	ldr	r0, [pc, #152]	@ (800d1bc <tcp_shutdown+0xb4>)
 800d124:	f009 f864 	bl	80161f0 <iprintf>
 800d128:	f06f 030f 	mvn.w	r3, #15
 800d12c:	e03d      	b.n	800d1aa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	7d1b      	ldrb	r3, [r3, #20]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d102      	bne.n	800d13c <tcp_shutdown+0x34>
    return ERR_CONN;
 800d136:	f06f 030a 	mvn.w	r3, #10
 800d13a:	e036      	b.n	800d1aa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d01b      	beq.n	800d17a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	8b5b      	ldrh	r3, [r3, #26]
 800d146:	f043 0310 	orr.w	r3, r3, #16
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d005      	beq.n	800d162 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d156:	2101      	movs	r1, #1
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7ff fe5d 	bl	800ce18 <tcp_close_shutdown>
 800d15e:	4603      	mov	r3, r0
 800d160:	e023      	b.n	800d1aa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d166:	2b00      	cmp	r3, #0
 800d168:	d007      	beq.n	800d17a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff fad2 	bl	800c718 <pbuf_free>
      pcb->refused_data = NULL;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d013      	beq.n	800d1a8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	7d1b      	ldrb	r3, [r3, #20]
 800d184:	2b04      	cmp	r3, #4
 800d186:	dc02      	bgt.n	800d18e <tcp_shutdown+0x86>
 800d188:	2b03      	cmp	r3, #3
 800d18a:	da02      	bge.n	800d192 <tcp_shutdown+0x8a>
 800d18c:	e009      	b.n	800d1a2 <tcp_shutdown+0x9a>
 800d18e:	2b07      	cmp	r3, #7
 800d190:	d107      	bne.n	800d1a2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	b2db      	uxtb	r3, r3
 800d196:	4619      	mov	r1, r3
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f7ff fe3d 	bl	800ce18 <tcp_close_shutdown>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	e003      	b.n	800d1aa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d1a2:	f06f 030a 	mvn.w	r3, #10
 800d1a6:	e000      	b.n	800d1aa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	08018d10 	.word	0x08018d10
 800d1b8:	08018e38 	.word	0x08018e38
 800d1bc:	08018d54 	.word	0x08018d54

0800d1c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b08e      	sub	sp, #56	@ 0x38
 800d1c4:	af04      	add	r7, sp, #16
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d107      	bne.n	800d1e0 <tcp_abandon+0x20>
 800d1d0:	4b52      	ldr	r3, [pc, #328]	@ (800d31c <tcp_abandon+0x15c>)
 800d1d2:	f240 223d 	movw	r2, #573	@ 0x23d
 800d1d6:	4952      	ldr	r1, [pc, #328]	@ (800d320 <tcp_abandon+0x160>)
 800d1d8:	4852      	ldr	r0, [pc, #328]	@ (800d324 <tcp_abandon+0x164>)
 800d1da:	f009 f809 	bl	80161f0 <iprintf>
 800d1de:	e099      	b.n	800d314 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	7d1b      	ldrb	r3, [r3, #20]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d106      	bne.n	800d1f6 <tcp_abandon+0x36>
 800d1e8:	4b4c      	ldr	r3, [pc, #304]	@ (800d31c <tcp_abandon+0x15c>)
 800d1ea:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d1ee:	494e      	ldr	r1, [pc, #312]	@ (800d328 <tcp_abandon+0x168>)
 800d1f0:	484c      	ldr	r0, [pc, #304]	@ (800d324 <tcp_abandon+0x164>)
 800d1f2:	f008 fffd 	bl	80161f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7d1b      	ldrb	r3, [r3, #20]
 800d1fa:	2b0a      	cmp	r3, #10
 800d1fc:	d107      	bne.n	800d20e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	484a      	ldr	r0, [pc, #296]	@ (800d32c <tcp_abandon+0x16c>)
 800d202:	f001 fa47 	bl	800e694 <tcp_pcb_remove>
    tcp_free(pcb);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff fd54 	bl	800ccb4 <tcp_free>
 800d20c:	e082      	b.n	800d314 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d21a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d220:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d228:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	7d1b      	ldrb	r3, [r3, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d126      	bne.n	800d286 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	8adb      	ldrh	r3, [r3, #22]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d02e      	beq.n	800d29e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d240:	4b3b      	ldr	r3, [pc, #236]	@ (800d330 <tcp_abandon+0x170>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	429a      	cmp	r2, r3
 800d248:	d105      	bne.n	800d256 <tcp_abandon+0x96>
 800d24a:	4b39      	ldr	r3, [pc, #228]	@ (800d330 <tcp_abandon+0x170>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	4a37      	ldr	r2, [pc, #220]	@ (800d330 <tcp_abandon+0x170>)
 800d252:	6013      	str	r3, [r2, #0]
 800d254:	e013      	b.n	800d27e <tcp_abandon+0xbe>
 800d256:	4b36      	ldr	r3, [pc, #216]	@ (800d330 <tcp_abandon+0x170>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	61fb      	str	r3, [r7, #28]
 800d25c:	e00c      	b.n	800d278 <tcp_abandon+0xb8>
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	429a      	cmp	r2, r3
 800d266:	d104      	bne.n	800d272 <tcp_abandon+0xb2>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68da      	ldr	r2, [r3, #12]
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	60da      	str	r2, [r3, #12]
 800d270:	e005      	b.n	800d27e <tcp_abandon+0xbe>
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	61fb      	str	r3, [r7, #28]
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1ef      	bne.n	800d25e <tcp_abandon+0x9e>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	60da      	str	r2, [r3, #12]
 800d284:	e00b      	b.n	800d29e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	8adb      	ldrh	r3, [r3, #22]
 800d28e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d290:	6879      	ldr	r1, [r7, #4]
 800d292:	4828      	ldr	r0, [pc, #160]	@ (800d334 <tcp_abandon+0x174>)
 800d294:	f001 f9fe 	bl	800e694 <tcp_pcb_remove>
 800d298:	4b27      	ldr	r3, [pc, #156]	@ (800d338 <tcp_abandon+0x178>)
 800d29a:	2201      	movs	r2, #1
 800d29c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d004      	beq.n	800d2b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 feca 	bl	800e044 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 fec1 	bl	800e044 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d004      	beq.n	800d2d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 feb8 	bl	800e044 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00e      	beq.n	800d2f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	8b12      	ldrh	r2, [r2, #24]
 800d2e4:	9202      	str	r2, [sp, #8]
 800d2e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d2e8:	9201      	str	r2, [sp, #4]
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	69b9      	ldr	r1, [r7, #24]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f005 fb98 	bl	8012a28 <tcp_rst>
    }
    last_state = pcb->state;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	7d1b      	ldrb	r3, [r3, #20]
 800d2fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff fcd8 	bl	800ccb4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d004      	beq.n	800d314 <tcp_abandon+0x154>
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f06f 010c 	mvn.w	r1, #12
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	4798      	blx	r3
  }
}
 800d314:	3728      	adds	r7, #40	@ 0x28
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	08018d10 	.word	0x08018d10
 800d320:	08018e54 	.word	0x08018e54
 800d324:	08018d54 	.word	0x08018d54
 800d328:	08018e70 	.word	0x08018e70
 800d32c:	2000eb4c 	.word	0x2000eb4c
 800d330:	2000eb40 	.word	0x2000eb40
 800d334:	2000eb48 	.word	0x2000eb48
 800d338:	2000eb50 	.word	0x2000eb50

0800d33c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d344:	2101      	movs	r1, #1
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7ff ff3a 	bl	800d1c0 <tcp_abandon>
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b088      	sub	sp, #32
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	4613      	mov	r3, r2
 800d360:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d362:	2304      	movs	r3, #4
 800d364:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d36c:	4b3e      	ldr	r3, [pc, #248]	@ (800d468 <tcp_bind+0x114>)
 800d36e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d109      	bne.n	800d38a <tcp_bind+0x36>
 800d376:	4b3d      	ldr	r3, [pc, #244]	@ (800d46c <tcp_bind+0x118>)
 800d378:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800d37c:	493c      	ldr	r1, [pc, #240]	@ (800d470 <tcp_bind+0x11c>)
 800d37e:	483d      	ldr	r0, [pc, #244]	@ (800d474 <tcp_bind+0x120>)
 800d380:	f008 ff36 	bl	80161f0 <iprintf>
 800d384:	f06f 030f 	mvn.w	r3, #15
 800d388:	e06a      	b.n	800d460 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7d1b      	ldrb	r3, [r3, #20]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d009      	beq.n	800d3a6 <tcp_bind+0x52>
 800d392:	4b36      	ldr	r3, [pc, #216]	@ (800d46c <tcp_bind+0x118>)
 800d394:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d398:	4937      	ldr	r1, [pc, #220]	@ (800d478 <tcp_bind+0x124>)
 800d39a:	4836      	ldr	r0, [pc, #216]	@ (800d474 <tcp_bind+0x120>)
 800d39c:	f008 ff28 	bl	80161f0 <iprintf>
 800d3a0:	f06f 0305 	mvn.w	r3, #5
 800d3a4:	e05c      	b.n	800d460 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d3a6:	88fb      	ldrh	r3, [r7, #6]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d109      	bne.n	800d3c0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d3ac:	f000 f9de 	bl	800d76c <tcp_new_port>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d3b4:	88fb      	ldrh	r3, [r7, #6]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d135      	bne.n	800d426 <tcp_bind+0xd2>
      return ERR_BUF;
 800d3ba:	f06f 0301 	mvn.w	r3, #1
 800d3be:	e04f      	b.n	800d460 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e02b      	b.n	800d41e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d3c6:	4a2d      	ldr	r2, [pc, #180]	@ (800d47c <tcp_bind+0x128>)
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	61bb      	str	r3, [r7, #24]
 800d3d2:	e01e      	b.n	800d412 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	8adb      	ldrh	r3, [r3, #22]
 800d3d8:	88fa      	ldrh	r2, [r7, #6]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d116      	bne.n	800d40c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d3de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d010      	beq.n	800d406 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00c      	beq.n	800d406 <tcp_bind+0xb2>
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d009      	beq.n	800d406 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d005      	beq.n	800d406 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d402:	429a      	cmp	r2, r3
 800d404:	d102      	bne.n	800d40c <tcp_bind+0xb8>
              return ERR_USE;
 800d406:	f06f 0307 	mvn.w	r3, #7
 800d40a:	e029      	b.n	800d460 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	61bb      	str	r3, [r7, #24]
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1dd      	bne.n	800d3d4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	3301      	adds	r3, #1
 800d41c:	61fb      	str	r3, [r7, #28]
 800d41e:	69fa      	ldr	r2, [r7, #28]
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	429a      	cmp	r2, r3
 800d424:	dbcf      	blt.n	800d3c6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00c      	beq.n	800d446 <tcp_bind+0xf2>
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d008      	beq.n	800d446 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <tcp_bind+0xec>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	e000      	b.n	800d442 <tcp_bind+0xee>
 800d440:	2300      	movs	r3, #0
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	88fa      	ldrh	r2, [r7, #6]
 800d44a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d44c:	4b0c      	ldr	r3, [pc, #48]	@ (800d480 <tcp_bind+0x12c>)
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	60da      	str	r2, [r3, #12]
 800d454:	4a0a      	ldr	r2, [pc, #40]	@ (800d480 <tcp_bind+0x12c>)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6013      	str	r3, [r2, #0]
 800d45a:	f005 fca7 	bl	8012dac <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	3720      	adds	r7, #32
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	0801ad5c 	.word	0x0801ad5c
 800d46c:	08018d10 	.word	0x08018d10
 800d470:	08018ea4 	.word	0x08018ea4
 800d474:	08018d54 	.word	0x08018d54
 800d478:	08018ebc 	.word	0x08018ebc
 800d47c:	0801ad34 	.word	0x0801ad34
 800d480:	2000eb40 	.word	0x2000eb40

0800d484 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d106      	bne.n	800d4a6 <tcp_accept_null+0x22>
 800d498:	4b07      	ldr	r3, [pc, #28]	@ (800d4b8 <tcp_accept_null+0x34>)
 800d49a:	f240 320f 	movw	r2, #783	@ 0x30f
 800d49e:	4907      	ldr	r1, [pc, #28]	@ (800d4bc <tcp_accept_null+0x38>)
 800d4a0:	4807      	ldr	r0, [pc, #28]	@ (800d4c0 <tcp_accept_null+0x3c>)
 800d4a2:	f008 fea5 	bl	80161f0 <iprintf>

  tcp_abort(pcb);
 800d4a6:	68b8      	ldr	r0, [r7, #8]
 800d4a8:	f7ff ff48 	bl	800d33c <tcp_abort>

  return ERR_ABRT;
 800d4ac:	f06f 030c 	mvn.w	r3, #12
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	08018d10 	.word	0x08018d10
 800d4bc:	08018ee4 	.word	0x08018ee4
 800d4c0:	08018d54 	.word	0x08018d54

0800d4c4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b088      	sub	sp, #32
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d109      	bne.n	800d4f0 <tcp_listen_with_backlog_and_err+0x2c>
 800d4dc:	4b47      	ldr	r3, [pc, #284]	@ (800d5fc <tcp_listen_with_backlog_and_err+0x138>)
 800d4de:	f240 3259 	movw	r2, #857	@ 0x359
 800d4e2:	4947      	ldr	r1, [pc, #284]	@ (800d600 <tcp_listen_with_backlog_and_err+0x13c>)
 800d4e4:	4847      	ldr	r0, [pc, #284]	@ (800d604 <tcp_listen_with_backlog_and_err+0x140>)
 800d4e6:	f008 fe83 	bl	80161f0 <iprintf>
 800d4ea:	23f0      	movs	r3, #240	@ 0xf0
 800d4ec:	76fb      	strb	r3, [r7, #27]
 800d4ee:	e079      	b.n	800d5e4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	7d1b      	ldrb	r3, [r3, #20]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <tcp_listen_with_backlog_and_err+0x48>
 800d4f8:	4b40      	ldr	r3, [pc, #256]	@ (800d5fc <tcp_listen_with_backlog_and_err+0x138>)
 800d4fa:	f240 325a 	movw	r2, #858	@ 0x35a
 800d4fe:	4942      	ldr	r1, [pc, #264]	@ (800d608 <tcp_listen_with_backlog_and_err+0x144>)
 800d500:	4840      	ldr	r0, [pc, #256]	@ (800d604 <tcp_listen_with_backlog_and_err+0x140>)
 800d502:	f008 fe75 	bl	80161f0 <iprintf>
 800d506:	23f1      	movs	r3, #241	@ 0xf1
 800d508:	76fb      	strb	r3, [r7, #27]
 800d50a:	e06b      	b.n	800d5e4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	7d1b      	ldrb	r3, [r3, #20]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d104      	bne.n	800d51e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d518:	23f7      	movs	r3, #247	@ 0xf7
 800d51a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d51c:	e062      	b.n	800d5e4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d51e:	2002      	movs	r0, #2
 800d520:	f7fe f9e0 	bl	800b8e4 <memp_malloc>
 800d524:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d102      	bne.n	800d532 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d52c:	23ff      	movs	r3, #255	@ 0xff
 800d52e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d530:	e058      	b.n	800d5e4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	8ada      	ldrh	r2, [r3, #22]
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	2201      	movs	r2, #1
 800d546:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	7d5a      	ldrb	r2, [r3, #21]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	7a5a      	ldrb	r2, [r3, #9]
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	2200      	movs	r2, #0
 800d55c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	7ada      	ldrb	r2, [r3, #11]
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	7a9a      	ldrb	r2, [r3, #10]
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	8adb      	ldrh	r3, [r3, #22]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d021      	beq.n	800d5c2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d57e:	4b23      	ldr	r3, [pc, #140]	@ (800d60c <tcp_listen_with_backlog_and_err+0x148>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	429a      	cmp	r2, r3
 800d586:	d105      	bne.n	800d594 <tcp_listen_with_backlog_and_err+0xd0>
 800d588:	4b20      	ldr	r3, [pc, #128]	@ (800d60c <tcp_listen_with_backlog_and_err+0x148>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	4a1f      	ldr	r2, [pc, #124]	@ (800d60c <tcp_listen_with_backlog_and_err+0x148>)
 800d590:	6013      	str	r3, [r2, #0]
 800d592:	e013      	b.n	800d5bc <tcp_listen_with_backlog_and_err+0xf8>
 800d594:	4b1d      	ldr	r3, [pc, #116]	@ (800d60c <tcp_listen_with_backlog_and_err+0x148>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	617b      	str	r3, [r7, #20]
 800d59a:	e00c      	b.n	800d5b6 <tcp_listen_with_backlog_and_err+0xf2>
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d104      	bne.n	800d5b0 <tcp_listen_with_backlog_and_err+0xec>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	68da      	ldr	r2, [r3, #12]
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	60da      	str	r2, [r3, #12]
 800d5ae:	e005      	b.n	800d5bc <tcp_listen_with_backlog_and_err+0xf8>
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	617b      	str	r3, [r7, #20]
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1ef      	bne.n	800d59c <tcp_listen_with_backlog_and_err+0xd8>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f7ff fb76 	bl	800ccb4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	4a11      	ldr	r2, [pc, #68]	@ (800d610 <tcp_listen_with_backlog_and_err+0x14c>)
 800d5cc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d5ce:	4b11      	ldr	r3, [pc, #68]	@ (800d614 <tcp_listen_with_backlog_and_err+0x150>)
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	60da      	str	r2, [r3, #12]
 800d5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800d614 <tcp_listen_with_backlog_and_err+0x150>)
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	f005 fbe6 	bl	8012dac <tcp_timer_needed>
  res = ERR_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d002      	beq.n	800d5f0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7efa      	ldrb	r2, [r7, #27]
 800d5ee:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d5f0:	69fb      	ldr	r3, [r7, #28]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3720      	adds	r7, #32
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	08018d10 	.word	0x08018d10
 800d600:	08018f04 	.word	0x08018f04
 800d604:	08018d54 	.word	0x08018d54
 800d608:	08018f34 	.word	0x08018f34
 800d60c:	2000eb40 	.word	0x2000eb40
 800d610:	0800d485 	.word	0x0800d485
 800d614:	2000eb44 	.word	0x2000eb44

0800d618 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <tcp_update_rcv_ann_wnd+0x1c>
 800d626:	4b25      	ldr	r3, [pc, #148]	@ (800d6bc <tcp_update_rcv_ann_wnd+0xa4>)
 800d628:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d62c:	4924      	ldr	r1, [pc, #144]	@ (800d6c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800d62e:	4825      	ldr	r0, [pc, #148]	@ (800d6c4 <tcp_update_rcv_ann_wnd+0xac>)
 800d630:	f008 fdde 	bl	80161f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d63c:	4413      	add	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d648:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d64c:	bf28      	it	cs
 800d64e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d652:	b292      	uxth	r2, r2
 800d654:	4413      	add	r3, r2
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	db08      	blt.n	800d670 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	e020      	b.n	800d6b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dd03      	ble.n	800d686 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d684:	e014      	b.n	800d6b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d698:	d306      	bcc.n	800d6a8 <tcp_update_rcv_ann_wnd+0x90>
 800d69a:	4b08      	ldr	r3, [pc, #32]	@ (800d6bc <tcp_update_rcv_ann_wnd+0xa4>)
 800d69c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d6a0:	4909      	ldr	r1, [pc, #36]	@ (800d6c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800d6a2:	4808      	ldr	r0, [pc, #32]	@ (800d6c4 <tcp_update_rcv_ann_wnd+0xac>)
 800d6a4:	f008 fda4 	bl	80161f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d6b0:	2300      	movs	r3, #0
  }
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	08018d10 	.word	0x08018d10
 800d6c0:	08018f6c 	.word	0x08018f6c
 800d6c4:	08018d54 	.word	0x08018d54
 800d6c8:	08018f90 	.word	0x08018f90

0800d6cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d107      	bne.n	800d6ee <tcp_recved+0x22>
 800d6de:	4b1f      	ldr	r3, [pc, #124]	@ (800d75c <tcp_recved+0x90>)
 800d6e0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d6e4:	491e      	ldr	r1, [pc, #120]	@ (800d760 <tcp_recved+0x94>)
 800d6e6:	481f      	ldr	r0, [pc, #124]	@ (800d764 <tcp_recved+0x98>)
 800d6e8:	f008 fd82 	bl	80161f0 <iprintf>
 800d6ec:	e032      	b.n	800d754 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7d1b      	ldrb	r3, [r3, #20]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d106      	bne.n	800d704 <tcp_recved+0x38>
 800d6f6:	4b19      	ldr	r3, [pc, #100]	@ (800d75c <tcp_recved+0x90>)
 800d6f8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d6fc:	491a      	ldr	r1, [pc, #104]	@ (800d768 <tcp_recved+0x9c>)
 800d6fe:	4819      	ldr	r0, [pc, #100]	@ (800d764 <tcp_recved+0x98>)
 800d700:	f008 fd76 	bl	80161f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d708:	887b      	ldrh	r3, [r7, #2]
 800d70a:	4413      	add	r3, r2
 800d70c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d70e:	89fb      	ldrh	r3, [r7, #14]
 800d710:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d714:	d804      	bhi.n	800d720 <tcp_recved+0x54>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d71a:	89fa      	ldrh	r2, [r7, #14]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d204      	bcs.n	800d72a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d726:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d728:	e002      	b.n	800d730 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	89fa      	ldrh	r2, [r7, #14]
 800d72e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7ff ff71 	bl	800d618 <tcp_update_rcv_ann_wnd>
 800d736:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d73e:	d309      	bcc.n	800d754 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	8b5b      	ldrh	r3, [r3, #26]
 800d744:	f043 0302 	orr.w	r3, r3, #2
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f004 fbb6 	bl	8011ec0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	08018d10 	.word	0x08018d10
 800d760:	08018fac 	.word	0x08018fac
 800d764:	08018d54 	.word	0x08018d54
 800d768:	08018fc4 	.word	0x08018fc4

0800d76c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d776:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f0 <tcp_new_port+0x84>)
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	4b1c      	ldr	r3, [pc, #112]	@ (800d7f0 <tcp_new_port+0x84>)
 800d780:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d782:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f0 <tcp_new_port+0x84>)
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d103      	bne.n	800d796 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d78e:	4b18      	ldr	r3, [pc, #96]	@ (800d7f0 <tcp_new_port+0x84>)
 800d790:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d794:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d796:	2300      	movs	r3, #0
 800d798:	71fb      	strb	r3, [r7, #7]
 800d79a:	e01e      	b.n	800d7da <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d79c:	79fb      	ldrb	r3, [r7, #7]
 800d79e:	4a15      	ldr	r2, [pc, #84]	@ (800d7f4 <tcp_new_port+0x88>)
 800d7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	603b      	str	r3, [r7, #0]
 800d7a8:	e011      	b.n	800d7ce <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	8ada      	ldrh	r2, [r3, #22]
 800d7ae:	4b10      	ldr	r3, [pc, #64]	@ (800d7f0 <tcp_new_port+0x84>)
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d108      	bne.n	800d7c8 <tcp_new_port+0x5c>
        n++;
 800d7b6:	88bb      	ldrh	r3, [r7, #4]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d7bc:	88bb      	ldrh	r3, [r7, #4]
 800d7be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d7c2:	d3d8      	bcc.n	800d776 <tcp_new_port+0xa>
          return 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	e00d      	b.n	800d7e4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	603b      	str	r3, [r7, #0]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1ea      	bne.n	800d7aa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	71fb      	strb	r3, [r7, #7]
 800d7da:	79fb      	ldrb	r3, [r7, #7]
 800d7dc:	2b03      	cmp	r3, #3
 800d7de:	d9dd      	bls.n	800d79c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d7e0:	4b03      	ldr	r3, [pc, #12]	@ (800d7f0 <tcp_new_port+0x84>)
 800d7e2:	881b      	ldrh	r3, [r3, #0]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	20000124 	.word	0x20000124
 800d7f4:	0801ad34 	.word	0x0801ad34

0800d7f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d7f8:	b5b0      	push	{r4, r5, r7, lr}
 800d7fa:	b090      	sub	sp, #64	@ 0x40
 800d7fc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d804:	4b95      	ldr	r3, [pc, #596]	@ (800da5c <tcp_slowtmr+0x264>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	4a94      	ldr	r2, [pc, #592]	@ (800da5c <tcp_slowtmr+0x264>)
 800d80c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d80e:	4b94      	ldr	r3, [pc, #592]	@ (800da60 <tcp_slowtmr+0x268>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	b2da      	uxtb	r2, r3
 800d816:	4b92      	ldr	r3, [pc, #584]	@ (800da60 <tcp_slowtmr+0x268>)
 800d818:	701a      	strb	r2, [r3, #0]
 800d81a:	e000      	b.n	800d81e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d81c:	bf00      	nop
  prev = NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d822:	4b90      	ldr	r3, [pc, #576]	@ (800da64 <tcp_slowtmr+0x26c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d828:	e2b7      	b.n	800dd9a <tcp_slowtmr+0x5a2>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82c:	7d1b      	ldrb	r3, [r3, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d106      	bne.n	800d840 <tcp_slowtmr+0x48>
 800d832:	4b8d      	ldr	r3, [pc, #564]	@ (800da68 <tcp_slowtmr+0x270>)
 800d834:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d838:	498c      	ldr	r1, [pc, #560]	@ (800da6c <tcp_slowtmr+0x274>)
 800d83a:	488d      	ldr	r0, [pc, #564]	@ (800da70 <tcp_slowtmr+0x278>)
 800d83c:	f008 fcd8 	bl	80161f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d842:	7d1b      	ldrb	r3, [r3, #20]
 800d844:	2b01      	cmp	r3, #1
 800d846:	d106      	bne.n	800d856 <tcp_slowtmr+0x5e>
 800d848:	4b87      	ldr	r3, [pc, #540]	@ (800da68 <tcp_slowtmr+0x270>)
 800d84a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d84e:	4989      	ldr	r1, [pc, #548]	@ (800da74 <tcp_slowtmr+0x27c>)
 800d850:	4887      	ldr	r0, [pc, #540]	@ (800da70 <tcp_slowtmr+0x278>)
 800d852:	f008 fccd 	bl	80161f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d858:	7d1b      	ldrb	r3, [r3, #20]
 800d85a:	2b0a      	cmp	r3, #10
 800d85c:	d106      	bne.n	800d86c <tcp_slowtmr+0x74>
 800d85e:	4b82      	ldr	r3, [pc, #520]	@ (800da68 <tcp_slowtmr+0x270>)
 800d860:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d864:	4984      	ldr	r1, [pc, #528]	@ (800da78 <tcp_slowtmr+0x280>)
 800d866:	4882      	ldr	r0, [pc, #520]	@ (800da70 <tcp_slowtmr+0x278>)
 800d868:	f008 fcc2 	bl	80161f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86e:	7f9a      	ldrb	r2, [r3, #30]
 800d870:	4b7b      	ldr	r3, [pc, #492]	@ (800da60 <tcp_slowtmr+0x268>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d105      	bne.n	800d884 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d882:	e28a      	b.n	800dd9a <tcp_slowtmr+0x5a2>
    pcb->last_timer = tcp_timer_ctr;
 800d884:	4b76      	ldr	r3, [pc, #472]	@ (800da60 <tcp_slowtmr+0x268>)
 800d886:	781a      	ldrb	r2, [r3, #0]
 800d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d10a      	bne.n	800d8b6 <tcp_slowtmr+0xbe>
 800d8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d8a6:	2b05      	cmp	r3, #5
 800d8a8:	d905      	bls.n	800d8b6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8b4:	e11e      	b.n	800daf4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d8bc:	2b0b      	cmp	r3, #11
 800d8be:	d905      	bls.n	800d8cc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8ca:	e113      	b.n	800daf4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ce:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d075      	beq.n	800d9c2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d006      	beq.n	800d8ec <tcp_slowtmr+0xf4>
 800d8de:	4b62      	ldr	r3, [pc, #392]	@ (800da68 <tcp_slowtmr+0x270>)
 800d8e0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d8e4:	4965      	ldr	r1, [pc, #404]	@ (800da7c <tcp_slowtmr+0x284>)
 800d8e6:	4862      	ldr	r0, [pc, #392]	@ (800da70 <tcp_slowtmr+0x278>)
 800d8e8:	f008 fc82 	bl	80161f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d106      	bne.n	800d902 <tcp_slowtmr+0x10a>
 800d8f4:	4b5c      	ldr	r3, [pc, #368]	@ (800da68 <tcp_slowtmr+0x270>)
 800d8f6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d8fa:	4961      	ldr	r1, [pc, #388]	@ (800da80 <tcp_slowtmr+0x288>)
 800d8fc:	485c      	ldr	r0, [pc, #368]	@ (800da70 <tcp_slowtmr+0x278>)
 800d8fe:	f008 fc77 	bl	80161f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d904:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800d908:	2b0b      	cmp	r3, #11
 800d90a:	d905      	bls.n	800d918 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d910:	3301      	adds	r3, #1
 800d912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d916:	e0ed      	b.n	800daf4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d91e:	3b01      	subs	r3, #1
 800d920:	4a58      	ldr	r2, [pc, #352]	@ (800da84 <tcp_slowtmr+0x28c>)
 800d922:	5cd3      	ldrb	r3, [r2, r3]
 800d924:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d928:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800d92c:	7c7a      	ldrb	r2, [r7, #17]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d907      	bls.n	800d942 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d934:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800d938:	3301      	adds	r3, #1
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 800d942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d944:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800d948:	7c7a      	ldrb	r2, [r7, #17]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	f200 80d2 	bhi.w	800daf4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d950:	2301      	movs	r3, #1
 800d952:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d108      	bne.n	800d970 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d95e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d960:	f005 f956 	bl	8012c10 <tcp_zero_window_probe>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d014      	beq.n	800d994 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d96a:	2300      	movs	r3, #0
 800d96c:	623b      	str	r3, [r7, #32]
 800d96e:	e011      	b.n	800d994 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d976:	4619      	mov	r1, r3
 800d978:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d97a:	f004 f81b 	bl	80119b4 <tcp_split_unsent_seg>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d107      	bne.n	800d994 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d986:	f004 fa9b 	bl	8011ec0 <tcp_output>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d990:	2300      	movs	r3, #0
 800d992:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	2b00      	cmp	r3, #0
 800d998:	f000 80ac 	beq.w	800daf4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d9aa:	2b06      	cmp	r3, #6
 800d9ac:	f200 80a2 	bhi.w	800daf4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800d9c0:	e098      	b.n	800daf4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	db0f      	blt.n	800d9ec <tcp_slowtmr+0x1f4>
 800d9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d9d2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d008      	beq.n	800d9ec <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	b21a      	sxth	r2, r3
 800d9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ea:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	db7b      	blt.n	800daf4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d9fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9fe:	f004 fd53 	bl	80124a8 <tcp_rexmit_rto_prepare>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d007      	beq.n	800da18 <tcp_slowtmr+0x220>
 800da08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d171      	bne.n	800daf4 <tcp_slowtmr+0x2fc>
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da14:	2b00      	cmp	r3, #0
 800da16:	d06d      	beq.n	800daf4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800da18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d03a      	beq.n	800da96 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800da20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800da26:	2b0c      	cmp	r3, #12
 800da28:	bf28      	it	cs
 800da2a:	230c      	movcs	r3, #12
 800da2c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800da2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800da34:	10db      	asrs	r3, r3, #3
 800da36:	b21b      	sxth	r3, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800da40:	4413      	add	r3, r2
 800da42:	7efa      	ldrb	r2, [r7, #27]
 800da44:	4910      	ldr	r1, [pc, #64]	@ (800da88 <tcp_slowtmr+0x290>)
 800da46:	5c8a      	ldrb	r2, [r1, r2]
 800da48:	4093      	lsls	r3, r2
 800da4a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800da52:	4293      	cmp	r3, r2
 800da54:	dc1a      	bgt.n	800da8c <tcp_slowtmr+0x294>
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	b21a      	sxth	r2, r3
 800da5a:	e019      	b.n	800da90 <tcp_slowtmr+0x298>
 800da5c:	2000eb3c 	.word	0x2000eb3c
 800da60:	2000eb52 	.word	0x2000eb52
 800da64:	2000eb48 	.word	0x2000eb48
 800da68:	08018d10 	.word	0x08018d10
 800da6c:	08019054 	.word	0x08019054
 800da70:	08018d54 	.word	0x08018d54
 800da74:	08019080 	.word	0x08019080
 800da78:	080190ac 	.word	0x080190ac
 800da7c:	080190dc 	.word	0x080190dc
 800da80:	08019110 	.word	0x08019110
 800da84:	0801ad2c 	.word	0x0801ad2c
 800da88:	0801ad1c 	.word	0x0801ad1c
 800da8c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800da90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800da96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da98:	2200      	movs	r2, #0
 800da9a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800da9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800daa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800daa8:	4293      	cmp	r3, r2
 800daaa:	bf28      	it	cs
 800daac:	4613      	movcs	r3, r2
 800daae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dab0:	8a7b      	ldrh	r3, [r7, #18]
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800dac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	b29b      	uxth	r3, r3
 800daca:	429a      	cmp	r2, r3
 800dacc:	d206      	bcs.n	800dadc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800dadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dade:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800dae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800dae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae8:	2200      	movs	r2, #0
 800daea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800daee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800daf0:	f004 fd4a 	bl	8012588 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800daf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	2b06      	cmp	r3, #6
 800dafa:	d111      	bne.n	800db20 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800dafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafe:	8b5b      	ldrh	r3, [r3, #26]
 800db00:	f003 0310 	and.w	r3, r3, #16
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db08:	4b94      	ldr	r3, [pc, #592]	@ (800dd5c <tcp_slowtmr+0x564>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	2b28      	cmp	r3, #40	@ 0x28
 800db14:	d904      	bls.n	800db20 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800db16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db1a:	3301      	adds	r3, #1
 800db1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800db20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db22:	7a5b      	ldrb	r3, [r3, #9]
 800db24:	f003 0308 	and.w	r3, r3, #8
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d053      	beq.n	800dbd4 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 800db2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800db30:	2b04      	cmp	r3, #4
 800db32:	d003      	beq.n	800db3c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800db34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db36:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800db38:	2b07      	cmp	r3, #7
 800db3a:	d14b      	bne.n	800dbd4 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db3c:	4b87      	ldr	r3, [pc, #540]	@ (800dd5c <tcp_slowtmr+0x564>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db42:	6a1b      	ldr	r3, [r3, #32]
 800db44:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800db4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800db52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db54:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 800db58:	fb00 f303 	mul.w	r3, r0, r3
 800db5c:	440b      	add	r3, r1
 800db5e:	4980      	ldr	r1, [pc, #512]	@ (800dd60 <tcp_slowtmr+0x568>)
 800db60:	fba1 1303 	umull	r1, r3, r1, r3
 800db64:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db66:	429a      	cmp	r2, r3
 800db68:	d90a      	bls.n	800db80 <tcp_slowtmr+0x388>
        ++pcb_remove;
 800db6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db6e:	3301      	adds	r3, #1
 800db70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800db74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db78:	3301      	adds	r3, #1
 800db7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800db7e:	e029      	b.n	800dbd4 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800db80:	4b76      	ldr	r3, [pc, #472]	@ (800dd5c <tcp_slowtmr+0x564>)
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db86:	6a1b      	ldr	r3, [r3, #32]
 800db88:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800db8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800db90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db92:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800db96:	4618      	mov	r0, r3
 800db98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db9e:	fb00 f303 	mul.w	r3, r0, r3
 800dba2:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dba4:	496e      	ldr	r1, [pc, #440]	@ (800dd60 <tcp_slowtmr+0x568>)
 800dba6:	fba1 1303 	umull	r1, r3, r1, r3
 800dbaa:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d911      	bls.n	800dbd4 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 800dbb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbb2:	f004 ffed 	bl	8012b90 <tcp_keepalive>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800dbbc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d107      	bne.n	800dbd4 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 800dbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800dbca:	3301      	adds	r3, #1
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 800dbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d011      	beq.n	800dc00 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dbdc:	4b5f      	ldr	r3, [pc, #380]	@ (800dd5c <tcp_slowtmr+0x564>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	1ad2      	subs	r2, r2, r3
 800dbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800dbec:	4619      	mov	r1, r3
 800dbee:	460b      	mov	r3, r1
 800dbf0:	005b      	lsls	r3, r3, #1
 800dbf2:	440b      	add	r3, r1
 800dbf4:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d302      	bcc.n	800dc00 <tcp_slowtmr+0x408>
      tcp_free_ooseq(pcb);
 800dbfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbfc:	f000 feae 	bl	800e95c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800dc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d10b      	bne.n	800dc20 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc08:	4b54      	ldr	r3, [pc, #336]	@ (800dd5c <tcp_slowtmr+0x564>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	2b28      	cmp	r3, #40	@ 0x28
 800dc14:	d904      	bls.n	800dc20 <tcp_slowtmr+0x428>
        ++pcb_remove;
 800dc16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800dc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc22:	7d1b      	ldrb	r3, [r3, #20]
 800dc24:	2b09      	cmp	r3, #9
 800dc26:	d10b      	bne.n	800dc40 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc28:	4b4c      	ldr	r3, [pc, #304]	@ (800dd5c <tcp_slowtmr+0x564>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	2bf0      	cmp	r3, #240	@ 0xf0
 800dc34:	d904      	bls.n	800dc40 <tcp_slowtmr+0x448>
        ++pcb_remove;
 800dc36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800dc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d060      	beq.n	800dd0a <tcp_slowtmr+0x512>
      tcp_err_fn err_fn = pcb->errf;
 800dc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc4e:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800dc50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc52:	f000 fccf 	bl	800e5f4 <tcp_pcb_purge>
      if (prev != NULL) {
 800dc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d010      	beq.n	800dc7e <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dc5c:	4b41      	ldr	r3, [pc, #260]	@ (800dd64 <tcp_slowtmr+0x56c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d106      	bne.n	800dc74 <tcp_slowtmr+0x47c>
 800dc66:	4b40      	ldr	r3, [pc, #256]	@ (800dd68 <tcp_slowtmr+0x570>)
 800dc68:	f240 526d 	movw	r2, #1389	@ 0x56d
 800dc6c:	493f      	ldr	r1, [pc, #252]	@ (800dd6c <tcp_slowtmr+0x574>)
 800dc6e:	4840      	ldr	r0, [pc, #256]	@ (800dd70 <tcp_slowtmr+0x578>)
 800dc70:	f008 fabe 	bl	80161f0 <iprintf>
        prev->next = pcb->next;
 800dc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc76:	68da      	ldr	r2, [r3, #12]
 800dc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7a:	60da      	str	r2, [r3, #12]
 800dc7c:	e00f      	b.n	800dc9e <tcp_slowtmr+0x4a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dc7e:	4b39      	ldr	r3, [pc, #228]	@ (800dd64 <tcp_slowtmr+0x56c>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d006      	beq.n	800dc96 <tcp_slowtmr+0x49e>
 800dc88:	4b37      	ldr	r3, [pc, #220]	@ (800dd68 <tcp_slowtmr+0x570>)
 800dc8a:	f240 5271 	movw	r2, #1393	@ 0x571
 800dc8e:	4939      	ldr	r1, [pc, #228]	@ (800dd74 <tcp_slowtmr+0x57c>)
 800dc90:	4837      	ldr	r0, [pc, #220]	@ (800dd70 <tcp_slowtmr+0x578>)
 800dc92:	f008 faad 	bl	80161f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	4a32      	ldr	r2, [pc, #200]	@ (800dd64 <tcp_slowtmr+0x56c>)
 800dc9c:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800dc9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d013      	beq.n	800dcce <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800dcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800dcae:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800dcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcb6:	8ad2      	ldrh	r2, [r2, #22]
 800dcb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dcba:	8b09      	ldrh	r1, [r1, #24]
 800dcbc:	9102      	str	r1, [sp, #8]
 800dcbe:	9201      	str	r2, [sp, #4]
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	462b      	mov	r3, r5
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcca:	f004 fead 	bl	8012a28 <tcp_rst>
      err_arg = pcb->callback_arg;
 800dcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd6:	7d1b      	ldrb	r3, [r3, #20]
 800dcd8:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcdc:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800dce4:	6838      	ldr	r0, [r7, #0]
 800dce6:	f7fe ffe5 	bl	800ccb4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800dcea:	4b23      	ldr	r3, [pc, #140]	@ (800dd78 <tcp_slowtmr+0x580>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d004      	beq.n	800dd00 <tcp_slowtmr+0x508>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f06f 010c 	mvn.w	r1, #12
 800dcfc:	68b8      	ldr	r0, [r7, #8]
 800dcfe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dd00:	4b1d      	ldr	r3, [pc, #116]	@ (800dd78 <tcp_slowtmr+0x580>)
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d048      	beq.n	800dd9a <tcp_slowtmr+0x5a2>
        goto tcp_slowtmr_start;
 800dd08:	e589      	b.n	800d81e <tcp_slowtmr+0x26>
      prev = pcb;
 800dd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800dd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd16:	7f1b      	ldrb	r3, [r3, #28]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1e:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd22:	7f1a      	ldrb	r2, [r3, #28]
 800dd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd26:	7f5b      	ldrb	r3, [r3, #29]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d336      	bcc.n	800dd9a <tcp_slowtmr+0x5a2>
        prev->polltmr = 0;
 800dd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2e:	2200      	movs	r2, #0
 800dd30:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800dd32:	4b11      	ldr	r3, [pc, #68]	@ (800dd78 <tcp_slowtmr+0x580>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01c      	beq.n	800dd7c <tcp_slowtmr+0x584>
 800dd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd4a:	6912      	ldr	r2, [r2, #16]
 800dd4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd4e:	4610      	mov	r0, r2
 800dd50:	4798      	blx	r3
 800dd52:	4603      	mov	r3, r0
 800dd54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800dd58:	e013      	b.n	800dd82 <tcp_slowtmr+0x58a>
 800dd5a:	bf00      	nop
 800dd5c:	2000eb3c 	.word	0x2000eb3c
 800dd60:	10624dd3 	.word	0x10624dd3
 800dd64:	2000eb48 	.word	0x2000eb48
 800dd68:	08018d10 	.word	0x08018d10
 800dd6c:	08019148 	.word	0x08019148
 800dd70:	08018d54 	.word	0x08018d54
 800dd74:	08019174 	.word	0x08019174
 800dd78:	2000eb50 	.word	0x2000eb50
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800dd82:	4b38      	ldr	r3, [pc, #224]	@ (800de64 <tcp_slowtmr+0x66c>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f47f ad48 	bne.w	800d81c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dd8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <tcp_slowtmr+0x5a2>
          tcp_output(prev);
 800dd94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd96:	f004 f893 	bl	8011ec0 <tcp_output>
  while (pcb != NULL) {
 800dd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f47f ad44 	bne.w	800d82a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800dda6:	4b30      	ldr	r3, [pc, #192]	@ (800de68 <tcp_slowtmr+0x670>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ddac:	e052      	b.n	800de54 <tcp_slowtmr+0x65c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ddae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb0:	7d1b      	ldrb	r3, [r3, #20]
 800ddb2:	2b0a      	cmp	r3, #10
 800ddb4:	d006      	beq.n	800ddc4 <tcp_slowtmr+0x5cc>
 800ddb6:	4b2d      	ldr	r3, [pc, #180]	@ (800de6c <tcp_slowtmr+0x674>)
 800ddb8:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ddbc:	492c      	ldr	r1, [pc, #176]	@ (800de70 <tcp_slowtmr+0x678>)
 800ddbe:	482d      	ldr	r0, [pc, #180]	@ (800de74 <tcp_slowtmr+0x67c>)
 800ddc0:	f008 fa16 	bl	80161f0 <iprintf>
    pcb_remove = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ddca:	4b2b      	ldr	r3, [pc, #172]	@ (800de78 <tcp_slowtmr+0x680>)
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	2bf0      	cmp	r3, #240	@ 0xf0
 800ddd6:	d904      	bls.n	800dde2 <tcp_slowtmr+0x5ea>
      ++pcb_remove;
 800ddd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dddc:	3301      	adds	r3, #1
 800ddde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dde2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d02f      	beq.n	800de4a <tcp_slowtmr+0x652>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ddea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddec:	f000 fc02 	bl	800e5f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ddf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d010      	beq.n	800de18 <tcp_slowtmr+0x620>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ddf6:	4b1c      	ldr	r3, [pc, #112]	@ (800de68 <tcp_slowtmr+0x670>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d106      	bne.n	800de0e <tcp_slowtmr+0x616>
 800de00:	4b1a      	ldr	r3, [pc, #104]	@ (800de6c <tcp_slowtmr+0x674>)
 800de02:	f240 52af 	movw	r2, #1455	@ 0x5af
 800de06:	491d      	ldr	r1, [pc, #116]	@ (800de7c <tcp_slowtmr+0x684>)
 800de08:	481a      	ldr	r0, [pc, #104]	@ (800de74 <tcp_slowtmr+0x67c>)
 800de0a:	f008 f9f1 	bl	80161f0 <iprintf>
        prev->next = pcb->next;
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	68da      	ldr	r2, [r3, #12]
 800de12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de14:	60da      	str	r2, [r3, #12]
 800de16:	e00f      	b.n	800de38 <tcp_slowtmr+0x640>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800de18:	4b13      	ldr	r3, [pc, #76]	@ (800de68 <tcp_slowtmr+0x670>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de1e:	429a      	cmp	r2, r3
 800de20:	d006      	beq.n	800de30 <tcp_slowtmr+0x638>
 800de22:	4b12      	ldr	r3, [pc, #72]	@ (800de6c <tcp_slowtmr+0x674>)
 800de24:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800de28:	4915      	ldr	r1, [pc, #84]	@ (800de80 <tcp_slowtmr+0x688>)
 800de2a:	4812      	ldr	r0, [pc, #72]	@ (800de74 <tcp_slowtmr+0x67c>)
 800de2c:	f008 f9e0 	bl	80161f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800de30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	4a0c      	ldr	r2, [pc, #48]	@ (800de68 <tcp_slowtmr+0x670>)
 800de36:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800de38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3a:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800de42:	69f8      	ldr	r0, [r7, #28]
 800de44:	f7fe ff36 	bl	800ccb4 <tcp_free>
 800de48:	e004      	b.n	800de54 <tcp_slowtmr+0x65c>
    } else {
      prev = pcb;
 800de4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800de4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1a9      	bne.n	800ddae <tcp_slowtmr+0x5b6>
    }
  }
}
 800de5a:	bf00      	nop
 800de5c:	bf00      	nop
 800de5e:	3730      	adds	r7, #48	@ 0x30
 800de60:	46bd      	mov	sp, r7
 800de62:	bdb0      	pop	{r4, r5, r7, pc}
 800de64:	2000eb50 	.word	0x2000eb50
 800de68:	2000eb4c 	.word	0x2000eb4c
 800de6c:	08018d10 	.word	0x08018d10
 800de70:	080191a0 	.word	0x080191a0
 800de74:	08018d54 	.word	0x08018d54
 800de78:	2000eb3c 	.word	0x2000eb3c
 800de7c:	080191d0 	.word	0x080191d0
 800de80:	080191f8 	.word	0x080191f8

0800de84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800de8a:	4b2d      	ldr	r3, [pc, #180]	@ (800df40 <tcp_fasttmr+0xbc>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	3301      	adds	r3, #1
 800de90:	b2da      	uxtb	r2, r3
 800de92:	4b2b      	ldr	r3, [pc, #172]	@ (800df40 <tcp_fasttmr+0xbc>)
 800de94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800de96:	4b2b      	ldr	r3, [pc, #172]	@ (800df44 <tcp_fasttmr+0xc0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800de9c:	e048      	b.n	800df30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	7f9a      	ldrb	r2, [r3, #30]
 800dea2:	4b27      	ldr	r3, [pc, #156]	@ (800df40 <tcp_fasttmr+0xbc>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d03f      	beq.n	800df2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800deaa:	4b25      	ldr	r3, [pc, #148]	@ (800df40 <tcp_fasttmr+0xbc>)
 800deac:	781a      	ldrb	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	8b5b      	ldrh	r3, [r3, #26]
 800deb6:	f003 0301 	and.w	r3, r3, #1
 800deba:	2b00      	cmp	r3, #0
 800debc:	d010      	beq.n	800dee0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8b5b      	ldrh	r3, [r3, #26]
 800dec2:	f043 0302 	orr.w	r3, r3, #2
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f003 fff7 	bl	8011ec0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	8b5b      	ldrh	r3, [r3, #26]
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	b29a      	uxth	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	8b5b      	ldrh	r3, [r3, #26]
 800dee4:	f003 0308 	and.w	r3, r3, #8
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d009      	beq.n	800df00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	8b5b      	ldrh	r3, [r3, #26]
 800def0:	f023 0308 	bic.w	r3, r3, #8
 800def4:	b29a      	uxth	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff f86e 	bl	800cfdc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00a      	beq.n	800df24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800df0e:	4b0e      	ldr	r3, [pc, #56]	@ (800df48 <tcp_fasttmr+0xc4>)
 800df10:	2200      	movs	r2, #0
 800df12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 f819 	bl	800df4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800df1a:	4b0b      	ldr	r3, [pc, #44]	@ (800df48 <tcp_fasttmr+0xc4>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d000      	beq.n	800df24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800df22:	e7b8      	b.n	800de96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	607b      	str	r3, [r7, #4]
 800df28:	e002      	b.n	800df30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1b3      	bne.n	800de9e <tcp_fasttmr+0x1a>
    }
  }
}
 800df36:	bf00      	nop
 800df38:	bf00      	nop
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	2000eb52 	.word	0x2000eb52
 800df44:	2000eb48 	.word	0x2000eb48
 800df48:	2000eb50 	.word	0x2000eb50

0800df4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800df4c:	b590      	push	{r4, r7, lr}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d109      	bne.n	800df6e <tcp_process_refused_data+0x22>
 800df5a:	4b37      	ldr	r3, [pc, #220]	@ (800e038 <tcp_process_refused_data+0xec>)
 800df5c:	f240 6209 	movw	r2, #1545	@ 0x609
 800df60:	4936      	ldr	r1, [pc, #216]	@ (800e03c <tcp_process_refused_data+0xf0>)
 800df62:	4837      	ldr	r0, [pc, #220]	@ (800e040 <tcp_process_refused_data+0xf4>)
 800df64:	f008 f944 	bl	80161f0 <iprintf>
 800df68:	f06f 030f 	mvn.w	r3, #15
 800df6c:	e060      	b.n	800e030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df72:	7b5b      	ldrb	r3, [r3, #13]
 800df74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <tcp_process_refused_data+0x58>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6918      	ldr	r0, [r3, #16]
 800df96:	2300      	movs	r3, #0
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	47a0      	blx	r4
 800df9e:	4603      	mov	r3, r0
 800dfa0:	73fb      	strb	r3, [r7, #15]
 800dfa2:	e007      	b.n	800dfb4 <tcp_process_refused_data+0x68>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	2000      	movs	r0, #0
 800dfac:	f000 f8a4 	bl	800e0f8 <tcp_recv_null>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d12a      	bne.n	800e012 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	f003 0320 	and.w	r3, r3, #32
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d033      	beq.n	800e02e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dfce:	d005      	beq.n	800dfdc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00b      	beq.n	800dffe <tcp_process_refused_data+0xb2>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6918      	ldr	r0, [r3, #16]
 800dff0:	2300      	movs	r3, #0
 800dff2:	2200      	movs	r2, #0
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	47a0      	blx	r4
 800dff8:	4603      	mov	r3, r0
 800dffa:	73fb      	strb	r3, [r7, #15]
 800dffc:	e001      	b.n	800e002 <tcp_process_refused_data+0xb6>
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e006:	f113 0f0d 	cmn.w	r3, #13
 800e00a:	d110      	bne.n	800e02e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e00c:	f06f 030c 	mvn.w	r3, #12
 800e010:	e00e      	b.n	800e030 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e016:	f113 0f0d 	cmn.w	r3, #13
 800e01a:	d102      	bne.n	800e022 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e01c:	f06f 030c 	mvn.w	r3, #12
 800e020:	e006      	b.n	800e030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e028:	f06f 0304 	mvn.w	r3, #4
 800e02c:	e000      	b.n	800e030 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e02e:	2300      	movs	r3, #0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	bd90      	pop	{r4, r7, pc}
 800e038:	08018d10 	.word	0x08018d10
 800e03c:	08019220 	.word	0x08019220
 800e040:	08018d54 	.word	0x08018d54

0800e044 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e04c:	e007      	b.n	800e05e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 f80a 	bl	800e06e <tcp_seg_free>
    seg = next;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1f4      	bne.n	800e04e <tcp_segs_free+0xa>
  }
}
 800e064:	bf00      	nop
 800e066:	bf00      	nop
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00c      	beq.n	800e096 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d004      	beq.n	800e08e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fe fb45 	bl	800c718 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e08e:	6879      	ldr	r1, [r7, #4]
 800e090:	2003      	movs	r0, #3
 800e092:	f7fd fc9d 	bl	800b9d0 <memp_free>
  }
}
 800e096:	bf00      	nop
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d106      	bne.n	800e0bc <tcp_seg_copy+0x1c>
 800e0ae:	4b0f      	ldr	r3, [pc, #60]	@ (800e0ec <tcp_seg_copy+0x4c>)
 800e0b0:	f240 6282 	movw	r2, #1666	@ 0x682
 800e0b4:	490e      	ldr	r1, [pc, #56]	@ (800e0f0 <tcp_seg_copy+0x50>)
 800e0b6:	480f      	ldr	r0, [pc, #60]	@ (800e0f4 <tcp_seg_copy+0x54>)
 800e0b8:	f008 f89a 	bl	80161f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e0bc:	2003      	movs	r0, #3
 800e0be:	f7fd fc11 	bl	800b8e4 <memp_malloc>
 800e0c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <tcp_seg_copy+0x2e>
    return NULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e00a      	b.n	800e0e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e0ce:	2210      	movs	r2, #16
 800e0d0:	6879      	ldr	r1, [r7, #4]
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f008 f9f7 	bl	80164c6 <memcpy>
  pbuf_ref(cseg->p);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fbc1 	bl	800c864 <pbuf_ref>
  return cseg;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	08018d10 	.word	0x08018d10
 800e0f0:	08019264 	.word	0x08019264
 800e0f4:	08018d54 	.word	0x08018d54

0800e0f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d109      	bne.n	800e120 <tcp_recv_null+0x28>
 800e10c:	4b12      	ldr	r3, [pc, #72]	@ (800e158 <tcp_recv_null+0x60>)
 800e10e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e112:	4912      	ldr	r1, [pc, #72]	@ (800e15c <tcp_recv_null+0x64>)
 800e114:	4812      	ldr	r0, [pc, #72]	@ (800e160 <tcp_recv_null+0x68>)
 800e116:	f008 f86b 	bl	80161f0 <iprintf>
 800e11a:	f06f 030f 	mvn.w	r3, #15
 800e11e:	e016      	b.n	800e14e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d009      	beq.n	800e13a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	891b      	ldrh	r3, [r3, #8]
 800e12a:	4619      	mov	r1, r3
 800e12c:	68b8      	ldr	r0, [r7, #8]
 800e12e:	f7ff facd 	bl	800d6cc <tcp_recved>
    pbuf_free(p);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7fe faf0 	bl	800c718 <pbuf_free>
 800e138:	e008      	b.n	800e14c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e13a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d104      	bne.n	800e14c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e142:	68b8      	ldr	r0, [r7, #8]
 800e144:	f7fe ffb4 	bl	800d0b0 <tcp_close>
 800e148:	4603      	mov	r3, r0
 800e14a:	e000      	b.n	800e14e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	08018d10 	.word	0x08018d10
 800e15c:	08019280 	.word	0x08019280
 800e160:	08018d54 	.word	0x08018d54

0800e164 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e16e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e172:	2b00      	cmp	r3, #0
 800e174:	db01      	blt.n	800e17a <tcp_kill_prio+0x16>
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	e000      	b.n	800e17c <tcp_kill_prio+0x18>
 800e17a:	237f      	movs	r3, #127	@ 0x7f
 800e17c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e17e:	7afb      	ldrb	r3, [r7, #11]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d034      	beq.n	800e1ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e184:	7afb      	ldrb	r3, [r7, #11]
 800e186:	3b01      	subs	r3, #1
 800e188:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e18e:	2300      	movs	r3, #0
 800e190:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e192:	4b19      	ldr	r3, [pc, #100]	@ (800e1f8 <tcp_kill_prio+0x94>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	617b      	str	r3, [r7, #20]
 800e198:	e01f      	b.n	800e1da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	7d5b      	ldrb	r3, [r3, #21]
 800e19e:	7afa      	ldrb	r2, [r7, #11]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d80c      	bhi.n	800e1be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e1a8:	7afa      	ldrb	r2, [r7, #11]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d112      	bne.n	800e1d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e1ae:	4b13      	ldr	r3, [pc, #76]	@ (800e1fc <tcp_kill_prio+0x98>)
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d80a      	bhi.n	800e1d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e1be:	4b0f      	ldr	r3, [pc, #60]	@ (800e1fc <tcp_kill_prio+0x98>)
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	7d5b      	ldrb	r3, [r3, #21]
 800e1d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	617b      	str	r3, [r7, #20]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1dc      	bne.n	800e19a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d004      	beq.n	800e1f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e1e6:	6938      	ldr	r0, [r7, #16]
 800e1e8:	f7ff f8a8 	bl	800d33c <tcp_abort>
 800e1ec:	e000      	b.n	800e1f0 <tcp_kill_prio+0x8c>
    return;
 800e1ee:	bf00      	nop
  }
}
 800e1f0:	3718      	adds	r7, #24
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	2000eb48 	.word	0x2000eb48
 800e1fc:	2000eb3c 	.word	0x2000eb3c

0800e200 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	4603      	mov	r3, r0
 800e208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	2b08      	cmp	r3, #8
 800e20e:	d009      	beq.n	800e224 <tcp_kill_state+0x24>
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	2b09      	cmp	r3, #9
 800e214:	d006      	beq.n	800e224 <tcp_kill_state+0x24>
 800e216:	4b1a      	ldr	r3, [pc, #104]	@ (800e280 <tcp_kill_state+0x80>)
 800e218:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e21c:	4919      	ldr	r1, [pc, #100]	@ (800e284 <tcp_kill_state+0x84>)
 800e21e:	481a      	ldr	r0, [pc, #104]	@ (800e288 <tcp_kill_state+0x88>)
 800e220:	f007 ffe6 	bl	80161f0 <iprintf>

  inactivity = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e22c:	4b17      	ldr	r3, [pc, #92]	@ (800e28c <tcp_kill_state+0x8c>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	617b      	str	r3, [r7, #20]
 800e232:	e017      	b.n	800e264 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	7d1b      	ldrb	r3, [r3, #20]
 800e238:	79fa      	ldrb	r2, [r7, #7]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d10f      	bne.n	800e25e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e23e:	4b14      	ldr	r3, [pc, #80]	@ (800e290 <tcp_kill_state+0x90>)
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d807      	bhi.n	800e25e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e24e:	4b10      	ldr	r3, [pc, #64]	@ (800e290 <tcp_kill_state+0x90>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	617b      	str	r3, [r7, #20]
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1e4      	bne.n	800e234 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e270:	2100      	movs	r1, #0
 800e272:	6938      	ldr	r0, [r7, #16]
 800e274:	f7fe ffa4 	bl	800d1c0 <tcp_abandon>
  }
}
 800e278:	bf00      	nop
 800e27a:	3718      	adds	r7, #24
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	08018d10 	.word	0x08018d10
 800e284:	0801929c 	.word	0x0801929c
 800e288:	08018d54 	.word	0x08018d54
 800e28c:	2000eb48 	.word	0x2000eb48
 800e290:	2000eb3c 	.word	0x2000eb3c

0800e294 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2a2:	4b12      	ldr	r3, [pc, #72]	@ (800e2ec <tcp_kill_timewait+0x58>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60fb      	str	r3, [r7, #12]
 800e2a8:	e012      	b.n	800e2d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e2aa:	4b11      	ldr	r3, [pc, #68]	@ (800e2f0 <tcp_kill_timewait+0x5c>)
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d807      	bhi.n	800e2ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f0 <tcp_kill_timewait+0x5c>)
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1e9      	bne.n	800e2aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e2dc:	68b8      	ldr	r0, [r7, #8]
 800e2de:	f7ff f82d 	bl	800d33c <tcp_abort>
  }
}
 800e2e2:	bf00      	nop
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	2000eb4c 	.word	0x2000eb4c
 800e2f0:	2000eb3c 	.word	0x2000eb3c

0800e2f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e2fa:	4b10      	ldr	r3, [pc, #64]	@ (800e33c <tcp_handle_closepend+0x48>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e300:	e014      	b.n	800e32c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	8b5b      	ldrh	r3, [r3, #26]
 800e30c:	f003 0308 	and.w	r3, r3, #8
 800e310:	2b00      	cmp	r3, #0
 800e312:	d009      	beq.n	800e328 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	8b5b      	ldrh	r3, [r3, #26]
 800e318:	f023 0308 	bic.w	r3, r3, #8
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7fe fe5a 	bl	800cfdc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1e7      	bne.n	800e302 <tcp_handle_closepend+0xe>
  }
}
 800e332:	bf00      	nop
 800e334:	bf00      	nop
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	2000eb48 	.word	0x2000eb48

0800e340 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e34a:	2001      	movs	r0, #1
 800e34c:	f7fd faca 	bl	800b8e4 <memp_malloc>
 800e350:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d126      	bne.n	800e3a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e358:	f7ff ffcc 	bl	800e2f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e35c:	f7ff ff9a 	bl	800e294 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e360:	2001      	movs	r0, #1
 800e362:	f7fd fabf 	bl	800b8e4 <memp_malloc>
 800e366:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d11b      	bne.n	800e3a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e36e:	2009      	movs	r0, #9
 800e370:	f7ff ff46 	bl	800e200 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e374:	2001      	movs	r0, #1
 800e376:	f7fd fab5 	bl	800b8e4 <memp_malloc>
 800e37a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d111      	bne.n	800e3a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e382:	2008      	movs	r0, #8
 800e384:	f7ff ff3c 	bl	800e200 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e388:	2001      	movs	r0, #1
 800e38a:	f7fd faab 	bl	800b8e4 <memp_malloc>
 800e38e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d107      	bne.n	800e3a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	4618      	mov	r0, r3
 800e39a:	f7ff fee3 	bl	800e164 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e39e:	2001      	movs	r0, #1
 800e3a0:	f7fd faa0 	bl	800b8e4 <memp_malloc>
 800e3a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d049      	beq.n	800e440 <tcp_alloc+0x100>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e3ac:	22a4      	movs	r2, #164	@ 0xa4
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f007 ffbc 	bl	801632e <memset>
    pcb->prio = prio;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	79fa      	ldrb	r2, [r7, #7]
 800e3ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e3c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e3cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	22ff      	movs	r2, #255	@ 0xff
 800e3da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e3e2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2206      	movs	r2, #6
 800e3e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2206      	movs	r2, #6
 800e3f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3f8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e402:	4b12      	ldr	r3, [pc, #72]	@ (800e44c <tcp_alloc+0x10c>)
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e40a:	4b11      	ldr	r3, [pc, #68]	@ (800e450 <tcp_alloc+0x110>)
 800e40c:	781a      	ldrb	r2, [r3, #0]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e418:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	4a0d      	ldr	r2, [pc, #52]	@ (800e454 <tcp_alloc+0x114>)
 800e420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e42a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e434:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2203      	movs	r2, #3
 800e43c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e440:	68fb      	ldr	r3, [r7, #12]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	2000eb3c 	.word	0x2000eb3c
 800e450:	2000eb52 	.word	0x2000eb52
 800e454:	0800e0f9 	.word	0x0800e0f9

0800e458 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e462:	2040      	movs	r0, #64	@ 0x40
 800e464:	f7ff ff6c 	bl	800e340 <tcp_alloc>
 800e468:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e46a:	68fb      	ldr	r3, [r7, #12]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	611a      	str	r2, [r3, #16]
  }
}
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
	...

0800e498 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00e      	beq.n	800e4c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7d1b      	ldrb	r3, [r3, #20]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d106      	bne.n	800e4be <tcp_recv+0x26>
 800e4b0:	4b07      	ldr	r3, [pc, #28]	@ (800e4d0 <tcp_recv+0x38>)
 800e4b2:	f240 72df 	movw	r2, #2015	@ 0x7df
 800e4b6:	4907      	ldr	r1, [pc, #28]	@ (800e4d4 <tcp_recv+0x3c>)
 800e4b8:	4807      	ldr	r0, [pc, #28]	@ (800e4d8 <tcp_recv+0x40>)
 800e4ba:	f007 fe99 	bl	80161f0 <iprintf>
    pcb->recv = recv;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	683a      	ldr	r2, [r7, #0]
 800e4c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	08018d10 	.word	0x08018d10
 800e4d4:	080192ac 	.word	0x080192ac
 800e4d8:	08018d54 	.word	0x08018d54

0800e4dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00e      	beq.n	800e50a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d106      	bne.n	800e502 <tcp_sent+0x26>
 800e4f4:	4b07      	ldr	r3, [pc, #28]	@ (800e514 <tcp_sent+0x38>)
 800e4f6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800e4fa:	4907      	ldr	r1, [pc, #28]	@ (800e518 <tcp_sent+0x3c>)
 800e4fc:	4807      	ldr	r0, [pc, #28]	@ (800e51c <tcp_sent+0x40>)
 800e4fe:	f007 fe77 	bl	80161f0 <iprintf>
    pcb->sent = sent;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800e50a:	bf00      	nop
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	08018d10 	.word	0x08018d10
 800e518:	080192d4 	.word	0x080192d4
 800e51c:	08018d54 	.word	0x08018d54

0800e520 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00e      	beq.n	800e54e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	7d1b      	ldrb	r3, [r3, #20]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d106      	bne.n	800e546 <tcp_err+0x26>
 800e538:	4b07      	ldr	r3, [pc, #28]	@ (800e558 <tcp_err+0x38>)
 800e53a:	f640 020d 	movw	r2, #2061	@ 0x80d
 800e53e:	4907      	ldr	r1, [pc, #28]	@ (800e55c <tcp_err+0x3c>)
 800e540:	4807      	ldr	r0, [pc, #28]	@ (800e560 <tcp_err+0x40>)
 800e542:	f007 fe55 	bl	80161f0 <iprintf>
    pcb->errf = err;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800e54e:	bf00      	nop
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	08018d10 	.word	0x08018d10
 800e55c:	080192fc 	.word	0x080192fc
 800e560:	08018d54 	.word	0x08018d54

0800e564 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d008      	beq.n	800e586 <tcp_accept+0x22>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7d1b      	ldrb	r3, [r3, #20]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d104      	bne.n	800e586 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	683a      	ldr	r2, [r7, #0]
 800e584:	619a      	str	r2, [r3, #24]
  }
}
 800e586:	bf00      	nop
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
	...

0800e594 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d107      	bne.n	800e5b8 <tcp_poll+0x24>
 800e5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e5e4 <tcp_poll+0x50>)
 800e5aa:	f640 023d 	movw	r2, #2109	@ 0x83d
 800e5ae:	490e      	ldr	r1, [pc, #56]	@ (800e5e8 <tcp_poll+0x54>)
 800e5b0:	480e      	ldr	r0, [pc, #56]	@ (800e5ec <tcp_poll+0x58>)
 800e5b2:	f007 fe1d 	bl	80161f0 <iprintf>
 800e5b6:	e011      	b.n	800e5dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	7d1b      	ldrb	r3, [r3, #20]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d106      	bne.n	800e5ce <tcp_poll+0x3a>
 800e5c0:	4b08      	ldr	r3, [pc, #32]	@ (800e5e4 <tcp_poll+0x50>)
 800e5c2:	f640 023e 	movw	r2, #2110	@ 0x83e
 800e5c6:	490a      	ldr	r1, [pc, #40]	@ (800e5f0 <tcp_poll+0x5c>)
 800e5c8:	4808      	ldr	r0, [pc, #32]	@ (800e5ec <tcp_poll+0x58>)
 800e5ca:	f007 fe11 	bl	80161f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	79fa      	ldrb	r2, [r7, #7]
 800e5da:	775a      	strb	r2, [r3, #29]
}
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	08018d10 	.word	0x08018d10
 800e5e8:	08019324 	.word	0x08019324
 800e5ec:	08018d54 	.word	0x08018d54
 800e5f0:	0801933c 	.word	0x0801933c

0800e5f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d107      	bne.n	800e612 <tcp_pcb_purge+0x1e>
 800e602:	4b21      	ldr	r3, [pc, #132]	@ (800e688 <tcp_pcb_purge+0x94>)
 800e604:	f640 0251 	movw	r2, #2129	@ 0x851
 800e608:	4920      	ldr	r1, [pc, #128]	@ (800e68c <tcp_pcb_purge+0x98>)
 800e60a:	4821      	ldr	r0, [pc, #132]	@ (800e690 <tcp_pcb_purge+0x9c>)
 800e60c:	f007 fdf0 	bl	80161f0 <iprintf>
 800e610:	e037      	b.n	800e682 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7d1b      	ldrb	r3, [r3, #20]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d033      	beq.n	800e682 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e61e:	2b0a      	cmp	r3, #10
 800e620:	d02f      	beq.n	800e682 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e626:	2b01      	cmp	r3, #1
 800e628:	d02b      	beq.n	800e682 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e636:	4618      	mov	r0, r3
 800e638:	f7fe f86e 	bl	800c718 <pbuf_free>
      pcb->refused_data = NULL;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 f986 	bl	800e95c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e656:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7ff fcf1 	bl	800e044 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fcec 	bl	800e044 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	08018d10 	.word	0x08018d10
 800e68c:	0801935c 	.word	0x0801935c
 800e690:	08018d54 	.word	0x08018d54

0800e694 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d106      	bne.n	800e6b2 <tcp_pcb_remove+0x1e>
 800e6a4:	4b3e      	ldr	r3, [pc, #248]	@ (800e7a0 <tcp_pcb_remove+0x10c>)
 800e6a6:	f640 0283 	movw	r2, #2179	@ 0x883
 800e6aa:	493e      	ldr	r1, [pc, #248]	@ (800e7a4 <tcp_pcb_remove+0x110>)
 800e6ac:	483e      	ldr	r0, [pc, #248]	@ (800e7a8 <tcp_pcb_remove+0x114>)
 800e6ae:	f007 fd9f 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <tcp_pcb_remove+0x32>
 800e6b8:	4b39      	ldr	r3, [pc, #228]	@ (800e7a0 <tcp_pcb_remove+0x10c>)
 800e6ba:	f640 0284 	movw	r2, #2180	@ 0x884
 800e6be:	493b      	ldr	r1, [pc, #236]	@ (800e7ac <tcp_pcb_remove+0x118>)
 800e6c0:	4839      	ldr	r0, [pc, #228]	@ (800e7a8 <tcp_pcb_remove+0x114>)
 800e6c2:	f007 fd95 	bl	80161f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d105      	bne.n	800e6dc <tcp_pcb_remove+0x48>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	68da      	ldr	r2, [r3, #12]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	601a      	str	r2, [r3, #0]
 800e6da:	e013      	b.n	800e704 <tcp_pcb_remove+0x70>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	60fb      	str	r3, [r7, #12]
 800e6e2:	e00c      	b.n	800e6fe <tcp_pcb_remove+0x6a>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	683a      	ldr	r2, [r7, #0]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d104      	bne.n	800e6f8 <tcp_pcb_remove+0x64>
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	68da      	ldr	r2, [r3, #12]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	60da      	str	r2, [r3, #12]
 800e6f6:	e005      	b.n	800e704 <tcp_pcb_remove+0x70>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1ef      	bne.n	800e6e4 <tcp_pcb_remove+0x50>
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2200      	movs	r2, #0
 800e708:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e70a:	6838      	ldr	r0, [r7, #0]
 800e70c:	f7ff ff72 	bl	800e5f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	7d1b      	ldrb	r3, [r3, #20]
 800e714:	2b0a      	cmp	r3, #10
 800e716:	d013      	beq.n	800e740 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d00f      	beq.n	800e740 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d009      	beq.n	800e740 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	8b5b      	ldrh	r3, [r3, #26]
 800e730:	f043 0302 	orr.w	r3, r3, #2
 800e734:	b29a      	uxth	r2, r3
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e73a:	6838      	ldr	r0, [r7, #0]
 800e73c:	f003 fbc0 	bl	8011ec0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	7d1b      	ldrb	r3, [r3, #20]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d020      	beq.n	800e78a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d006      	beq.n	800e75e <tcp_pcb_remove+0xca>
 800e750:	4b13      	ldr	r3, [pc, #76]	@ (800e7a0 <tcp_pcb_remove+0x10c>)
 800e752:	f640 0293 	movw	r2, #2195	@ 0x893
 800e756:	4916      	ldr	r1, [pc, #88]	@ (800e7b0 <tcp_pcb_remove+0x11c>)
 800e758:	4813      	ldr	r0, [pc, #76]	@ (800e7a8 <tcp_pcb_remove+0x114>)
 800e75a:	f007 fd49 	bl	80161f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e762:	2b00      	cmp	r3, #0
 800e764:	d006      	beq.n	800e774 <tcp_pcb_remove+0xe0>
 800e766:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a0 <tcp_pcb_remove+0x10c>)
 800e768:	f640 0294 	movw	r2, #2196	@ 0x894
 800e76c:	4911      	ldr	r1, [pc, #68]	@ (800e7b4 <tcp_pcb_remove+0x120>)
 800e76e:	480e      	ldr	r0, [pc, #56]	@ (800e7a8 <tcp_pcb_remove+0x114>)
 800e770:	f007 fd3e 	bl	80161f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d006      	beq.n	800e78a <tcp_pcb_remove+0xf6>
 800e77c:	4b08      	ldr	r3, [pc, #32]	@ (800e7a0 <tcp_pcb_remove+0x10c>)
 800e77e:	f640 0296 	movw	r2, #2198	@ 0x896
 800e782:	490d      	ldr	r1, [pc, #52]	@ (800e7b8 <tcp_pcb_remove+0x124>)
 800e784:	4808      	ldr	r0, [pc, #32]	@ (800e7a8 <tcp_pcb_remove+0x114>)
 800e786:	f007 fd33 	bl	80161f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2200      	movs	r2, #0
 800e78e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2200      	movs	r2, #0
 800e794:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e796:	bf00      	nop
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	08018d10 	.word	0x08018d10
 800e7a4:	08019378 	.word	0x08019378
 800e7a8:	08018d54 	.word	0x08018d54
 800e7ac:	08019394 	.word	0x08019394
 800e7b0:	080193b4 	.word	0x080193b4
 800e7b4:	080193cc 	.word	0x080193cc
 800e7b8:	080193e8 	.word	0x080193e8

0800e7bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <tcp_next_iss+0x1c>
 800e7ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f4 <tcp_next_iss+0x38>)
 800e7cc:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e7d0:	4909      	ldr	r1, [pc, #36]	@ (800e7f8 <tcp_next_iss+0x3c>)
 800e7d2:	480a      	ldr	r0, [pc, #40]	@ (800e7fc <tcp_next_iss+0x40>)
 800e7d4:	f007 fd0c 	bl	80161f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e7d8:	4b09      	ldr	r3, [pc, #36]	@ (800e800 <tcp_next_iss+0x44>)
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	4b09      	ldr	r3, [pc, #36]	@ (800e804 <tcp_next_iss+0x48>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	4a07      	ldr	r2, [pc, #28]	@ (800e800 <tcp_next_iss+0x44>)
 800e7e4:	6013      	str	r3, [r2, #0]
  return iss;
 800e7e6:	4b06      	ldr	r3, [pc, #24]	@ (800e800 <tcp_next_iss+0x44>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	08018d10 	.word	0x08018d10
 800e7f8:	08019400 	.word	0x08019400
 800e7fc:	08018d54 	.word	0x08018d54
 800e800:	20000128 	.word	0x20000128
 800e804:	2000eb3c 	.word	0x2000eb3c

0800e808 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d106      	bne.n	800e82a <tcp_eff_send_mss_netif+0x22>
 800e81c:	4b14      	ldr	r3, [pc, #80]	@ (800e870 <tcp_eff_send_mss_netif+0x68>)
 800e81e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e822:	4914      	ldr	r1, [pc, #80]	@ (800e874 <tcp_eff_send_mss_netif+0x6c>)
 800e824:	4814      	ldr	r0, [pc, #80]	@ (800e878 <tcp_eff_send_mss_netif+0x70>)
 800e826:	f007 fce3 	bl	80161f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e830:	89fb      	ldrh	r3, [r7, #14]
 800e832:	e019      	b.n	800e868 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e838:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e83a:	8afb      	ldrh	r3, [r7, #22]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d012      	beq.n	800e866 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e840:	2328      	movs	r3, #40	@ 0x28
 800e842:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e844:	8afa      	ldrh	r2, [r7, #22]
 800e846:	8abb      	ldrh	r3, [r7, #20]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d904      	bls.n	800e856 <tcp_eff_send_mss_netif+0x4e>
 800e84c:	8afa      	ldrh	r2, [r7, #22]
 800e84e:	8abb      	ldrh	r3, [r7, #20]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	b29b      	uxth	r3, r3
 800e854:	e000      	b.n	800e858 <tcp_eff_send_mss_netif+0x50>
 800e856:	2300      	movs	r3, #0
 800e858:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e85a:	8a7a      	ldrh	r2, [r7, #18]
 800e85c:	89fb      	ldrh	r3, [r7, #14]
 800e85e:	4293      	cmp	r3, r2
 800e860:	bf28      	it	cs
 800e862:	4613      	movcs	r3, r2
 800e864:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e866:	89fb      	ldrh	r3, [r7, #14]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	08018d10 	.word	0x08018d10
 800e874:	0801941c 	.word	0x0801941c
 800e878:	08018d54 	.word	0x08018d54

0800e87c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d119      	bne.n	800e8c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e890:	4b10      	ldr	r3, [pc, #64]	@ (800e8d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e892:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e896:	4910      	ldr	r1, [pc, #64]	@ (800e8d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e898:	4810      	ldr	r0, [pc, #64]	@ (800e8dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e89a:	f007 fca9 	bl	80161f0 <iprintf>

  while (pcb != NULL) {
 800e89e:	e011      	b.n	800e8c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d108      	bne.n	800e8be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	f7fe fd42 	bl	800d33c <tcp_abort>
      pcb = next;
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	60fb      	str	r3, [r7, #12]
 800e8bc:	e002      	b.n	800e8c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1ea      	bne.n	800e8a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e8ca:	bf00      	nop
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	08018d10 	.word	0x08018d10
 800e8d8:	08019444 	.word	0x08019444
 800e8dc:	08018d54 	.word	0x08018d54

0800e8e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d02a      	beq.n	800e946 <tcp_netif_ip_addr_changed+0x66>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d026      	beq.n	800e946 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e8f8:	4b15      	ldr	r3, [pc, #84]	@ (800e950 <tcp_netif_ip_addr_changed+0x70>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7ff ffbc 	bl	800e87c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e904:	4b13      	ldr	r3, [pc, #76]	@ (800e954 <tcp_netif_ip_addr_changed+0x74>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f7ff ffb6 	bl	800e87c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d017      	beq.n	800e946 <tcp_netif_ip_addr_changed+0x66>
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d013      	beq.n	800e946 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e91e:	4b0e      	ldr	r3, [pc, #56]	@ (800e958 <tcp_netif_ip_addr_changed+0x78>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	e00c      	b.n	800e940 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d103      	bne.n	800e93a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1ef      	bne.n	800e926 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	2000eb48 	.word	0x2000eb48
 800e954:	2000eb40 	.word	0x2000eb40
 800e958:	2000eb44 	.word	0x2000eb44

0800e95c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d007      	beq.n	800e97c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e970:	4618      	mov	r0, r3
 800e972:	f7ff fb67 	bl	800e044 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e984:	b590      	push	{r4, r7, lr}
 800e986:	b08d      	sub	sp, #52	@ 0x34
 800e988:	af04      	add	r7, sp, #16
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d105      	bne.n	800e9a0 <tcp_input+0x1c>
 800e994:	4b9b      	ldr	r3, [pc, #620]	@ (800ec04 <tcp_input+0x280>)
 800e996:	2283      	movs	r2, #131	@ 0x83
 800e998:	499b      	ldr	r1, [pc, #620]	@ (800ec08 <tcp_input+0x284>)
 800e99a:	489c      	ldr	r0, [pc, #624]	@ (800ec0c <tcp_input+0x288>)
 800e99c:	f007 fc28 	bl	80161f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	4a9a      	ldr	r2, [pc, #616]	@ (800ec10 <tcp_input+0x28c>)
 800e9a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	895b      	ldrh	r3, [r3, #10]
 800e9ac:	2b13      	cmp	r3, #19
 800e9ae:	f240 83d1 	bls.w	800f154 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9b2:	4b98      	ldr	r3, [pc, #608]	@ (800ec14 <tcp_input+0x290>)
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	4a97      	ldr	r2, [pc, #604]	@ (800ec14 <tcp_input+0x290>)
 800e9b8:	6812      	ldr	r2, [r2, #0]
 800e9ba:	4611      	mov	r1, r2
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f006 f9df 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f040 83c7 	bne.w	800f158 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e9ca:	4b92      	ldr	r3, [pc, #584]	@ (800ec14 <tcp_input+0x290>)
 800e9cc:	695b      	ldr	r3, [r3, #20]
 800e9ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9d2:	2be0      	cmp	r3, #224	@ 0xe0
 800e9d4:	f000 83c0 	beq.w	800f158 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e9d8:	4b8d      	ldr	r3, [pc, #564]	@ (800ec10 <tcp_input+0x28c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	899b      	ldrh	r3, [r3, #12]
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fc faa7 	bl	800af34 <lwip_htons>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	0b1b      	lsrs	r3, r3, #12
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e9f2:	7cbb      	ldrb	r3, [r7, #18]
 800e9f4:	2b13      	cmp	r3, #19
 800e9f6:	f240 83b1 	bls.w	800f15c <tcp_input+0x7d8>
 800e9fa:	7cbb      	ldrb	r3, [r7, #18]
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	891b      	ldrh	r3, [r3, #8]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	f200 83aa 	bhi.w	800f15c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ea08:	7cbb      	ldrb	r3, [r7, #18]
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	3b14      	subs	r3, #20
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	4b81      	ldr	r3, [pc, #516]	@ (800ec18 <tcp_input+0x294>)
 800ea12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ea14:	4b81      	ldr	r3, [pc, #516]	@ (800ec1c <tcp_input+0x298>)
 800ea16:	2200      	movs	r2, #0
 800ea18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	895a      	ldrh	r2, [r3, #10]
 800ea1e:	7cbb      	ldrb	r3, [r7, #18]
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d309      	bcc.n	800ea3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ea26:	4b7c      	ldr	r3, [pc, #496]	@ (800ec18 <tcp_input+0x294>)
 800ea28:	881a      	ldrh	r2, [r3, #0]
 800ea2a:	4b7d      	ldr	r3, [pc, #500]	@ (800ec20 <tcp_input+0x29c>)
 800ea2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ea2e:	7cbb      	ldrb	r3, [r7, #18]
 800ea30:	4619      	mov	r1, r3
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7fd fdea 	bl	800c60c <pbuf_remove_header>
 800ea38:	e04e      	b.n	800ead8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d105      	bne.n	800ea4e <tcp_input+0xca>
 800ea42:	4b70      	ldr	r3, [pc, #448]	@ (800ec04 <tcp_input+0x280>)
 800ea44:	22c2      	movs	r2, #194	@ 0xc2
 800ea46:	4977      	ldr	r1, [pc, #476]	@ (800ec24 <tcp_input+0x2a0>)
 800ea48:	4870      	ldr	r0, [pc, #448]	@ (800ec0c <tcp_input+0x288>)
 800ea4a:	f007 fbd1 	bl	80161f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ea4e:	2114      	movs	r1, #20
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7fd fddb 	bl	800c60c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	895a      	ldrh	r2, [r3, #10]
 800ea5a:	4b71      	ldr	r3, [pc, #452]	@ (800ec20 <tcp_input+0x29c>)
 800ea5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ea5e:	4b6e      	ldr	r3, [pc, #440]	@ (800ec18 <tcp_input+0x294>)
 800ea60:	881a      	ldrh	r2, [r3, #0]
 800ea62:	4b6f      	ldr	r3, [pc, #444]	@ (800ec20 <tcp_input+0x29c>)
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ea6a:	4b6d      	ldr	r3, [pc, #436]	@ (800ec20 <tcp_input+0x29c>)
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7fd fdcb 	bl	800c60c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	895b      	ldrh	r3, [r3, #10]
 800ea7c:	8a3a      	ldrh	r2, [r7, #16]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	f200 836e 	bhi.w	800f160 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	4a64      	ldr	r2, [pc, #400]	@ (800ec1c <tcp_input+0x298>)
 800ea8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	8a3a      	ldrh	r2, [r7, #16]
 800ea94:	4611      	mov	r1, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fd fdb8 	bl	800c60c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	891a      	ldrh	r2, [r3, #8]
 800eaa0:	8a3b      	ldrh	r3, [r7, #16]
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	895b      	ldrh	r3, [r3, #10]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d005      	beq.n	800eabe <tcp_input+0x13a>
 800eab2:	4b54      	ldr	r3, [pc, #336]	@ (800ec04 <tcp_input+0x280>)
 800eab4:	22df      	movs	r2, #223	@ 0xdf
 800eab6:	495c      	ldr	r1, [pc, #368]	@ (800ec28 <tcp_input+0x2a4>)
 800eab8:	4854      	ldr	r0, [pc, #336]	@ (800ec0c <tcp_input+0x288>)
 800eaba:	f007 fb99 	bl	80161f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	891a      	ldrh	r2, [r3, #8]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	891b      	ldrh	r3, [r3, #8]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d005      	beq.n	800ead8 <tcp_input+0x154>
 800eacc:	4b4d      	ldr	r3, [pc, #308]	@ (800ec04 <tcp_input+0x280>)
 800eace:	22e0      	movs	r2, #224	@ 0xe0
 800ead0:	4956      	ldr	r1, [pc, #344]	@ (800ec2c <tcp_input+0x2a8>)
 800ead2:	484e      	ldr	r0, [pc, #312]	@ (800ec0c <tcp_input+0x288>)
 800ead4:	f007 fb8c 	bl	80161f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ead8:	4b4d      	ldr	r3, [pc, #308]	@ (800ec10 <tcp_input+0x28c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	4a4b      	ldr	r2, [pc, #300]	@ (800ec10 <tcp_input+0x28c>)
 800eae2:	6814      	ldr	r4, [r2, #0]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fc fa25 	bl	800af34 <lwip_htons>
 800eaea:	4603      	mov	r3, r0
 800eaec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800eaee:	4b48      	ldr	r3, [pc, #288]	@ (800ec10 <tcp_input+0x28c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	885b      	ldrh	r3, [r3, #2]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	4a46      	ldr	r2, [pc, #280]	@ (800ec10 <tcp_input+0x28c>)
 800eaf8:	6814      	ldr	r4, [r2, #0]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fc fa1a 	bl	800af34 <lwip_htons>
 800eb00:	4603      	mov	r3, r0
 800eb02:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800eb04:	4b42      	ldr	r3, [pc, #264]	@ (800ec10 <tcp_input+0x28c>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	4a41      	ldr	r2, [pc, #260]	@ (800ec10 <tcp_input+0x28c>)
 800eb0c:	6814      	ldr	r4, [r2, #0]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fc fa25 	bl	800af5e <lwip_htonl>
 800eb14:	4603      	mov	r3, r0
 800eb16:	6063      	str	r3, [r4, #4]
 800eb18:	6863      	ldr	r3, [r4, #4]
 800eb1a:	4a45      	ldr	r2, [pc, #276]	@ (800ec30 <tcp_input+0x2ac>)
 800eb1c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800eb1e:	4b3c      	ldr	r3, [pc, #240]	@ (800ec10 <tcp_input+0x28c>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	4a3a      	ldr	r2, [pc, #232]	@ (800ec10 <tcp_input+0x28c>)
 800eb26:	6814      	ldr	r4, [r2, #0]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fc fa18 	bl	800af5e <lwip_htonl>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	60a3      	str	r3, [r4, #8]
 800eb32:	68a3      	ldr	r3, [r4, #8]
 800eb34:	4a3f      	ldr	r2, [pc, #252]	@ (800ec34 <tcp_input+0x2b0>)
 800eb36:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800eb38:	4b35      	ldr	r3, [pc, #212]	@ (800ec10 <tcp_input+0x28c>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	89db      	ldrh	r3, [r3, #14]
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	4a33      	ldr	r2, [pc, #204]	@ (800ec10 <tcp_input+0x28c>)
 800eb42:	6814      	ldr	r4, [r2, #0]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fc f9f5 	bl	800af34 <lwip_htons>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800eb4e:	4b30      	ldr	r3, [pc, #192]	@ (800ec10 <tcp_input+0x28c>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	899b      	ldrh	r3, [r3, #12]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fc f9ec 	bl	800af34 <lwip_htons>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	4b34      	ldr	r3, [pc, #208]	@ (800ec38 <tcp_input+0x2b4>)
 800eb68:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	891a      	ldrh	r2, [r3, #8]
 800eb6e:	4b33      	ldr	r3, [pc, #204]	@ (800ec3c <tcp_input+0x2b8>)
 800eb70:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800eb72:	4b31      	ldr	r3, [pc, #196]	@ (800ec38 <tcp_input+0x2b4>)
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	f003 0303 	and.w	r3, r3, #3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00c      	beq.n	800eb98 <tcp_input+0x214>
    tcplen++;
 800eb7e:	4b2f      	ldr	r3, [pc, #188]	@ (800ec3c <tcp_input+0x2b8>)
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	3301      	adds	r3, #1
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	4b2d      	ldr	r3, [pc, #180]	@ (800ec3c <tcp_input+0x2b8>)
 800eb88:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	891a      	ldrh	r2, [r3, #8]
 800eb8e:	4b2b      	ldr	r3, [pc, #172]	@ (800ec3c <tcp_input+0x2b8>)
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	f200 82e6 	bhi.w	800f164 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb9c:	4b28      	ldr	r3, [pc, #160]	@ (800ec40 <tcp_input+0x2bc>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	61fb      	str	r3, [r7, #28]
 800eba2:	e09d      	b.n	800ece0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	7d1b      	ldrb	r3, [r3, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d105      	bne.n	800ebb8 <tcp_input+0x234>
 800ebac:	4b15      	ldr	r3, [pc, #84]	@ (800ec04 <tcp_input+0x280>)
 800ebae:	22fb      	movs	r2, #251	@ 0xfb
 800ebb0:	4924      	ldr	r1, [pc, #144]	@ (800ec44 <tcp_input+0x2c0>)
 800ebb2:	4816      	ldr	r0, [pc, #88]	@ (800ec0c <tcp_input+0x288>)
 800ebb4:	f007 fb1c 	bl	80161f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	7d1b      	ldrb	r3, [r3, #20]
 800ebbc:	2b0a      	cmp	r3, #10
 800ebbe:	d105      	bne.n	800ebcc <tcp_input+0x248>
 800ebc0:	4b10      	ldr	r3, [pc, #64]	@ (800ec04 <tcp_input+0x280>)
 800ebc2:	22fc      	movs	r2, #252	@ 0xfc
 800ebc4:	4920      	ldr	r1, [pc, #128]	@ (800ec48 <tcp_input+0x2c4>)
 800ebc6:	4811      	ldr	r0, [pc, #68]	@ (800ec0c <tcp_input+0x288>)
 800ebc8:	f007 fb12 	bl	80161f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	7d1b      	ldrb	r3, [r3, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d105      	bne.n	800ebe0 <tcp_input+0x25c>
 800ebd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ec04 <tcp_input+0x280>)
 800ebd6:	22fd      	movs	r2, #253	@ 0xfd
 800ebd8:	491c      	ldr	r1, [pc, #112]	@ (800ec4c <tcp_input+0x2c8>)
 800ebda:	480c      	ldr	r0, [pc, #48]	@ (800ec0c <tcp_input+0x288>)
 800ebdc:	f007 fb08 	bl	80161f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	7a1b      	ldrb	r3, [r3, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d033      	beq.n	800ec50 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	7a1a      	ldrb	r2, [r3, #8]
 800ebec:	4b09      	ldr	r3, [pc, #36]	@ (800ec14 <tcp_input+0x290>)
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d029      	beq.n	800ec50 <tcp_input+0x2cc>
      prev = pcb;
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	61bb      	str	r3, [r7, #24]
      continue;
 800ec00:	e06b      	b.n	800ecda <tcp_input+0x356>
 800ec02:	bf00      	nop
 800ec04:	08019478 	.word	0x08019478
 800ec08:	080194ac 	.word	0x080194ac
 800ec0c:	080194c4 	.word	0x080194c4
 800ec10:	2000eb64 	.word	0x2000eb64
 800ec14:	200091f0 	.word	0x200091f0
 800ec18:	2000eb68 	.word	0x2000eb68
 800ec1c:	2000eb6c 	.word	0x2000eb6c
 800ec20:	2000eb6a 	.word	0x2000eb6a
 800ec24:	080194ec 	.word	0x080194ec
 800ec28:	080194fc 	.word	0x080194fc
 800ec2c:	08019508 	.word	0x08019508
 800ec30:	2000eb74 	.word	0x2000eb74
 800ec34:	2000eb78 	.word	0x2000eb78
 800ec38:	2000eb80 	.word	0x2000eb80
 800ec3c:	2000eb7e 	.word	0x2000eb7e
 800ec40:	2000eb48 	.word	0x2000eb48
 800ec44:	08019528 	.word	0x08019528
 800ec48:	08019550 	.word	0x08019550
 800ec4c:	0801957c 	.word	0x0801957c
    }

    if (pcb->remote_port == tcphdr->src &&
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	8b1a      	ldrh	r2, [r3, #24]
 800ec54:	4b72      	ldr	r3, [pc, #456]	@ (800ee20 <tcp_input+0x49c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d13a      	bne.n	800ecd6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	8ada      	ldrh	r2, [r3, #22]
 800ec64:	4b6e      	ldr	r3, [pc, #440]	@ (800ee20 <tcp_input+0x49c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	885b      	ldrh	r3, [r3, #2]
 800ec6a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d132      	bne.n	800ecd6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	4b6b      	ldr	r3, [pc, #428]	@ (800ee24 <tcp_input+0x4a0>)
 800ec76:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d12c      	bne.n	800ecd6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	4b68      	ldr	r3, [pc, #416]	@ (800ee24 <tcp_input+0x4a0>)
 800ec82:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d126      	bne.n	800ecd6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	69fa      	ldr	r2, [r7, #28]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d106      	bne.n	800eca0 <tcp_input+0x31c>
 800ec92:	4b65      	ldr	r3, [pc, #404]	@ (800ee28 <tcp_input+0x4a4>)
 800ec94:	f240 120d 	movw	r2, #269	@ 0x10d
 800ec98:	4964      	ldr	r1, [pc, #400]	@ (800ee2c <tcp_input+0x4a8>)
 800ec9a:	4865      	ldr	r0, [pc, #404]	@ (800ee30 <tcp_input+0x4ac>)
 800ec9c:	f007 faa8 	bl	80161f0 <iprintf>
      if (prev != NULL) {
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00a      	beq.n	800ecbc <tcp_input+0x338>
        prev->next = pcb->next;
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ecae:	4b61      	ldr	r3, [pc, #388]	@ (800ee34 <tcp_input+0x4b0>)
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ecb6:	4a5f      	ldr	r2, [pc, #380]	@ (800ee34 <tcp_input+0x4b0>)
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	69fa      	ldr	r2, [r7, #28]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d111      	bne.n	800ecea <tcp_input+0x366>
 800ecc6:	4b58      	ldr	r3, [pc, #352]	@ (800ee28 <tcp_input+0x4a4>)
 800ecc8:	f240 1215 	movw	r2, #277	@ 0x115
 800eccc:	495a      	ldr	r1, [pc, #360]	@ (800ee38 <tcp_input+0x4b4>)
 800ecce:	4858      	ldr	r0, [pc, #352]	@ (800ee30 <tcp_input+0x4ac>)
 800ecd0:	f007 fa8e 	bl	80161f0 <iprintf>
      break;
 800ecd4:	e009      	b.n	800ecea <tcp_input+0x366>
    }
    prev = pcb;
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	61fb      	str	r3, [r7, #28]
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f47f af5e 	bne.w	800eba4 <tcp_input+0x220>
 800ece8:	e000      	b.n	800ecec <tcp_input+0x368>
      break;
 800ecea:	bf00      	nop
  }

  if (pcb == NULL) {
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f040 80aa 	bne.w	800ee48 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecf4:	4b51      	ldr	r3, [pc, #324]	@ (800ee3c <tcp_input+0x4b8>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	61fb      	str	r3, [r7, #28]
 800ecfa:	e03f      	b.n	800ed7c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	7d1b      	ldrb	r3, [r3, #20]
 800ed00:	2b0a      	cmp	r3, #10
 800ed02:	d006      	beq.n	800ed12 <tcp_input+0x38e>
 800ed04:	4b48      	ldr	r3, [pc, #288]	@ (800ee28 <tcp_input+0x4a4>)
 800ed06:	f240 121f 	movw	r2, #287	@ 0x11f
 800ed0a:	494d      	ldr	r1, [pc, #308]	@ (800ee40 <tcp_input+0x4bc>)
 800ed0c:	4848      	ldr	r0, [pc, #288]	@ (800ee30 <tcp_input+0x4ac>)
 800ed0e:	f007 fa6f 	bl	80161f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	7a1b      	ldrb	r3, [r3, #8]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d009      	beq.n	800ed2e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed1a:	69fb      	ldr	r3, [r7, #28]
 800ed1c:	7a1a      	ldrb	r2, [r3, #8]
 800ed1e:	4b41      	ldr	r3, [pc, #260]	@ (800ee24 <tcp_input+0x4a0>)
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed26:	3301      	adds	r3, #1
 800ed28:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d122      	bne.n	800ed74 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	8b1a      	ldrh	r2, [r3, #24]
 800ed32:	4b3b      	ldr	r3, [pc, #236]	@ (800ee20 <tcp_input+0x49c>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d11b      	bne.n	800ed76 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	8ada      	ldrh	r2, [r3, #22]
 800ed42:	4b37      	ldr	r3, [pc, #220]	@ (800ee20 <tcp_input+0x49c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	885b      	ldrh	r3, [r3, #2]
 800ed48:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d113      	bne.n	800ed76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	685a      	ldr	r2, [r3, #4]
 800ed52:	4b34      	ldr	r3, [pc, #208]	@ (800ee24 <tcp_input+0x4a0>)
 800ed54:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d10d      	bne.n	800ed76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	4b31      	ldr	r3, [pc, #196]	@ (800ee24 <tcp_input+0x4a0>)
 800ed60:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d107      	bne.n	800ed76 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ed66:	69f8      	ldr	r0, [r7, #28]
 800ed68:	f000 fb56 	bl	800f418 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7fd fcd3 	bl	800c718 <pbuf_free>
        return;
 800ed72:	e1fd      	b.n	800f170 <tcp_input+0x7ec>
        continue;
 800ed74:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	61fb      	str	r3, [r7, #28]
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1bc      	bne.n	800ecfc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed86:	4b2f      	ldr	r3, [pc, #188]	@ (800ee44 <tcp_input+0x4c0>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	e02a      	b.n	800ede4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	7a1b      	ldrb	r3, [r3, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00c      	beq.n	800edb0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	7a1a      	ldrb	r2, [r3, #8]
 800ed9a:	4b22      	ldr	r3, [pc, #136]	@ (800ee24 <tcp_input+0x4a0>)
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eda2:	3301      	adds	r3, #1
 800eda4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d002      	beq.n	800edb0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	61bb      	str	r3, [r7, #24]
        continue;
 800edae:	e016      	b.n	800edde <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	8ada      	ldrh	r2, [r3, #22]
 800edb4:	4b1a      	ldr	r3, [pc, #104]	@ (800ee20 <tcp_input+0x49c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	885b      	ldrh	r3, [r3, #2]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d10c      	bne.n	800edda <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	4b17      	ldr	r3, [pc, #92]	@ (800ee24 <tcp_input+0x4a0>)
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d00f      	beq.n	800edec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00d      	beq.n	800edee <tcp_input+0x46a>
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d009      	beq.n	800edee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	617b      	str	r3, [r7, #20]
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1d1      	bne.n	800ed8e <tcp_input+0x40a>
 800edea:	e000      	b.n	800edee <tcp_input+0x46a>
            break;
 800edec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d029      	beq.n	800ee48 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00a      	beq.n	800ee10 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	68da      	ldr	r2, [r3, #12]
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ee02:	4b10      	ldr	r3, [pc, #64]	@ (800ee44 <tcp_input+0x4c0>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ee0a:	4a0e      	ldr	r2, [pc, #56]	@ (800ee44 <tcp_input+0x4c0>)
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ee10:	6978      	ldr	r0, [r7, #20]
 800ee12:	f000 fa03 	bl	800f21c <tcp_listen_input>
      }
      pbuf_free(p);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7fd fc7e 	bl	800c718 <pbuf_free>
      return;
 800ee1c:	e1a8      	b.n	800f170 <tcp_input+0x7ec>
 800ee1e:	bf00      	nop
 800ee20:	2000eb64 	.word	0x2000eb64
 800ee24:	200091f0 	.word	0x200091f0
 800ee28:	08019478 	.word	0x08019478
 800ee2c:	080195a4 	.word	0x080195a4
 800ee30:	080194c4 	.word	0x080194c4
 800ee34:	2000eb48 	.word	0x2000eb48
 800ee38:	080195d0 	.word	0x080195d0
 800ee3c:	2000eb4c 	.word	0x2000eb4c
 800ee40:	080195fc 	.word	0x080195fc
 800ee44:	2000eb44 	.word	0x2000eb44
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f000 8158 	beq.w	800f100 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ee50:	4b95      	ldr	r3, [pc, #596]	@ (800f0a8 <tcp_input+0x724>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	891a      	ldrh	r2, [r3, #8]
 800ee5a:	4b93      	ldr	r3, [pc, #588]	@ (800f0a8 <tcp_input+0x724>)
 800ee5c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ee5e:	4a92      	ldr	r2, [pc, #584]	@ (800f0a8 <tcp_input+0x724>)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ee64:	4b91      	ldr	r3, [pc, #580]	@ (800f0ac <tcp_input+0x728>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a8f      	ldr	r2, [pc, #572]	@ (800f0a8 <tcp_input+0x724>)
 800ee6a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ee6c:	4b90      	ldr	r3, [pc, #576]	@ (800f0b0 <tcp_input+0x72c>)
 800ee6e:	2200      	movs	r2, #0
 800ee70:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ee72:	4b90      	ldr	r3, [pc, #576]	@ (800f0b4 <tcp_input+0x730>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ee78:	4b8f      	ldr	r3, [pc, #572]	@ (800f0b8 <tcp_input+0x734>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ee7e:	4b8f      	ldr	r3, [pc, #572]	@ (800f0bc <tcp_input+0x738>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	f003 0308 	and.w	r3, r3, #8
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	7b5b      	ldrb	r3, [r3, #13]
 800ee8e:	f043 0301 	orr.w	r3, r3, #1
 800ee92:	b2da      	uxtb	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d017      	beq.n	800eed0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eea0:	69f8      	ldr	r0, [r7, #28]
 800eea2:	f7ff f853 	bl	800df4c <tcp_process_refused_data>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f113 0f0d 	cmn.w	r3, #13
 800eeac:	d007      	beq.n	800eebe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eeb6:	4b82      	ldr	r3, [pc, #520]	@ (800f0c0 <tcp_input+0x73c>)
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d008      	beq.n	800eed0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	f040 80e3 	bne.w	800f08e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eec8:	69f8      	ldr	r0, [r7, #28]
 800eeca:	f003 fdff 	bl	8012acc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eece:	e0de      	b.n	800f08e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eed0:	4a7c      	ldr	r2, [pc, #496]	@ (800f0c4 <tcp_input+0x740>)
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eed6:	69f8      	ldr	r0, [r7, #28]
 800eed8:	f000 fb18 	bl	800f50c <tcp_process>
 800eedc:	4603      	mov	r3, r0
 800eede:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eee0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eee4:	f113 0f0d 	cmn.w	r3, #13
 800eee8:	f000 80d3 	beq.w	800f092 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800eeec:	4b71      	ldr	r3, [pc, #452]	@ (800f0b4 <tcp_input+0x730>)
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	f003 0308 	and.w	r3, r3, #8
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d015      	beq.n	800ef24 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d008      	beq.n	800ef14 <tcp_input+0x590>
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef08:	69fa      	ldr	r2, [r7, #28]
 800ef0a:	6912      	ldr	r2, [r2, #16]
 800ef0c:	f06f 010d 	mvn.w	r1, #13
 800ef10:	4610      	mov	r0, r2
 800ef12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ef14:	69f9      	ldr	r1, [r7, #28]
 800ef16:	486c      	ldr	r0, [pc, #432]	@ (800f0c8 <tcp_input+0x744>)
 800ef18:	f7ff fbbc 	bl	800e694 <tcp_pcb_remove>
        tcp_free(pcb);
 800ef1c:	69f8      	ldr	r0, [r7, #28]
 800ef1e:	f7fd fec9 	bl	800ccb4 <tcp_free>
 800ef22:	e0da      	b.n	800f0da <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ef28:	4b63      	ldr	r3, [pc, #396]	@ (800f0b8 <tcp_input+0x734>)
 800ef2a:	881b      	ldrh	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d01d      	beq.n	800ef6c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ef30:	4b61      	ldr	r3, [pc, #388]	@ (800f0b8 <tcp_input+0x734>)
 800ef32:	881b      	ldrh	r3, [r3, #0]
 800ef34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <tcp_input+0x5d2>
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef46:	69fa      	ldr	r2, [r7, #28]
 800ef48:	6910      	ldr	r0, [r2, #16]
 800ef4a:	89fa      	ldrh	r2, [r7, #14]
 800ef4c:	69f9      	ldr	r1, [r7, #28]
 800ef4e:	4798      	blx	r3
 800ef50:	4603      	mov	r3, r0
 800ef52:	74fb      	strb	r3, [r7, #19]
 800ef54:	e001      	b.n	800ef5a <tcp_input+0x5d6>
 800ef56:	2300      	movs	r3, #0
 800ef58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ef5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef5e:	f113 0f0d 	cmn.w	r3, #13
 800ef62:	f000 8098 	beq.w	800f096 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ef66:	4b54      	ldr	r3, [pc, #336]	@ (800f0b8 <tcp_input+0x734>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ef6c:	69f8      	ldr	r0, [r7, #28]
 800ef6e:	f000 f915 	bl	800f19c <tcp_input_delayed_close>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f040 8090 	bne.w	800f09a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ef7a:	4b4d      	ldr	r3, [pc, #308]	@ (800f0b0 <tcp_input+0x72c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d041      	beq.n	800f006 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d006      	beq.n	800ef98 <tcp_input+0x614>
 800ef8a:	4b50      	ldr	r3, [pc, #320]	@ (800f0cc <tcp_input+0x748>)
 800ef8c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ef90:	494f      	ldr	r1, [pc, #316]	@ (800f0d0 <tcp_input+0x74c>)
 800ef92:	4850      	ldr	r0, [pc, #320]	@ (800f0d4 <tcp_input+0x750>)
 800ef94:	f007 f92c 	bl	80161f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	8b5b      	ldrh	r3, [r3, #26]
 800ef9c:	f003 0310 	and.w	r3, r3, #16
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d008      	beq.n	800efb6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800efa4:	4b42      	ldr	r3, [pc, #264]	@ (800f0b0 <tcp_input+0x72c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fd fbb5 	bl	800c718 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800efae:	69f8      	ldr	r0, [r7, #28]
 800efb0:	f7fe f9c4 	bl	800d33c <tcp_abort>
            goto aborted;
 800efb4:	e091      	b.n	800f0da <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00c      	beq.n	800efda <tcp_input+0x656>
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	6918      	ldr	r0, [r3, #16]
 800efca:	4b39      	ldr	r3, [pc, #228]	@ (800f0b0 <tcp_input+0x72c>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	2300      	movs	r3, #0
 800efd0:	69f9      	ldr	r1, [r7, #28]
 800efd2:	47a0      	blx	r4
 800efd4:	4603      	mov	r3, r0
 800efd6:	74fb      	strb	r3, [r7, #19]
 800efd8:	e008      	b.n	800efec <tcp_input+0x668>
 800efda:	4b35      	ldr	r3, [pc, #212]	@ (800f0b0 <tcp_input+0x72c>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	2300      	movs	r3, #0
 800efe0:	69f9      	ldr	r1, [r7, #28]
 800efe2:	2000      	movs	r0, #0
 800efe4:	f7ff f888 	bl	800e0f8 <tcp_recv_null>
 800efe8:	4603      	mov	r3, r0
 800efea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800efec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eff0:	f113 0f0d 	cmn.w	r3, #13
 800eff4:	d053      	beq.n	800f09e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800eff6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d003      	beq.n	800f006 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800effe:	4b2c      	ldr	r3, [pc, #176]	@ (800f0b0 <tcp_input+0x72c>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f006:	4b2b      	ldr	r3, [pc, #172]	@ (800f0b4 <tcp_input+0x730>)
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	f003 0320 	and.w	r3, r3, #32
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d030      	beq.n	800f074 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f01e:	7b5a      	ldrb	r2, [r3, #13]
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f024:	f042 0220 	orr.w	r2, r2, #32
 800f028:	b2d2      	uxtb	r2, r2
 800f02a:	735a      	strb	r2, [r3, #13]
 800f02c:	e022      	b.n	800f074 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f032:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f036:	d005      	beq.n	800f044 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f03c:	3301      	adds	r3, #1
 800f03e:	b29a      	uxth	r2, r3
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00b      	beq.n	800f066 <tcp_input+0x6e2>
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	6918      	ldr	r0, [r3, #16]
 800f058:	2300      	movs	r3, #0
 800f05a:	2200      	movs	r2, #0
 800f05c:	69f9      	ldr	r1, [r7, #28]
 800f05e:	47a0      	blx	r4
 800f060:	4603      	mov	r3, r0
 800f062:	74fb      	strb	r3, [r7, #19]
 800f064:	e001      	b.n	800f06a <tcp_input+0x6e6>
 800f066:	2300      	movs	r3, #0
 800f068:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f06a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f06e:	f113 0f0d 	cmn.w	r3, #13
 800f072:	d016      	beq.n	800f0a2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f074:	4b13      	ldr	r3, [pc, #76]	@ (800f0c4 <tcp_input+0x740>)
 800f076:	2200      	movs	r2, #0
 800f078:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f07a:	69f8      	ldr	r0, [r7, #28]
 800f07c:	f000 f88e 	bl	800f19c <tcp_input_delayed_close>
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d128      	bne.n	800f0d8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f086:	69f8      	ldr	r0, [r7, #28]
 800f088:	f002 ff1a 	bl	8011ec0 <tcp_output>
 800f08c:	e025      	b.n	800f0da <tcp_input+0x756>
        goto aborted;
 800f08e:	bf00      	nop
 800f090:	e023      	b.n	800f0da <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f092:	bf00      	nop
 800f094:	e021      	b.n	800f0da <tcp_input+0x756>
              goto aborted;
 800f096:	bf00      	nop
 800f098:	e01f      	b.n	800f0da <tcp_input+0x756>
          goto aborted;
 800f09a:	bf00      	nop
 800f09c:	e01d      	b.n	800f0da <tcp_input+0x756>
            goto aborted;
 800f09e:	bf00      	nop
 800f0a0:	e01b      	b.n	800f0da <tcp_input+0x756>
              goto aborted;
 800f0a2:	bf00      	nop
 800f0a4:	e019      	b.n	800f0da <tcp_input+0x756>
 800f0a6:	bf00      	nop
 800f0a8:	2000eb54 	.word	0x2000eb54
 800f0ac:	2000eb64 	.word	0x2000eb64
 800f0b0:	2000eb84 	.word	0x2000eb84
 800f0b4:	2000eb81 	.word	0x2000eb81
 800f0b8:	2000eb7c 	.word	0x2000eb7c
 800f0bc:	2000eb80 	.word	0x2000eb80
 800f0c0:	2000eb7e 	.word	0x2000eb7e
 800f0c4:	2000eb88 	.word	0x2000eb88
 800f0c8:	2000eb48 	.word	0x2000eb48
 800f0cc:	08019478 	.word	0x08019478
 800f0d0:	0801962c 	.word	0x0801962c
 800f0d4:	080194c4 	.word	0x080194c4
          goto aborted;
 800f0d8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f0da:	4b27      	ldr	r3, [pc, #156]	@ (800f178 <tcp_input+0x7f4>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f0e0:	4b26      	ldr	r3, [pc, #152]	@ (800f17c <tcp_input+0x7f8>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f0e6:	4b26      	ldr	r3, [pc, #152]	@ (800f180 <tcp_input+0x7fc>)
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d03f      	beq.n	800f16e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f0ee:	4b24      	ldr	r3, [pc, #144]	@ (800f180 <tcp_input+0x7fc>)
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fd fb10 	bl	800c718 <pbuf_free>
      inseg.p = NULL;
 800f0f8:	4b21      	ldr	r3, [pc, #132]	@ (800f180 <tcp_input+0x7fc>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f0fe:	e036      	b.n	800f16e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f100:	4b20      	ldr	r3, [pc, #128]	@ (800f184 <tcp_input+0x800>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	899b      	ldrh	r3, [r3, #12]
 800f106:	b29b      	uxth	r3, r3
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fb ff13 	bl	800af34 <lwip_htons>
 800f10e:	4603      	mov	r3, r0
 800f110:	b2db      	uxtb	r3, r3
 800f112:	f003 0304 	and.w	r3, r3, #4
 800f116:	2b00      	cmp	r3, #0
 800f118:	d118      	bne.n	800f14c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f11a:	4b1b      	ldr	r3, [pc, #108]	@ (800f188 <tcp_input+0x804>)
 800f11c:	6819      	ldr	r1, [r3, #0]
 800f11e:	4b1b      	ldr	r3, [pc, #108]	@ (800f18c <tcp_input+0x808>)
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	4b1a      	ldr	r3, [pc, #104]	@ (800f190 <tcp_input+0x80c>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f12a:	4b16      	ldr	r3, [pc, #88]	@ (800f184 <tcp_input+0x800>)
 800f12c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f12e:	885b      	ldrh	r3, [r3, #2]
 800f130:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f132:	4a14      	ldr	r2, [pc, #80]	@ (800f184 <tcp_input+0x800>)
 800f134:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f136:	8812      	ldrh	r2, [r2, #0]
 800f138:	b292      	uxth	r2, r2
 800f13a:	9202      	str	r2, [sp, #8]
 800f13c:	9301      	str	r3, [sp, #4]
 800f13e:	4b15      	ldr	r3, [pc, #84]	@ (800f194 <tcp_input+0x810>)
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	4b15      	ldr	r3, [pc, #84]	@ (800f198 <tcp_input+0x814>)
 800f144:	4602      	mov	r2, r0
 800f146:	2000      	movs	r0, #0
 800f148:	f003 fc6e 	bl	8012a28 <tcp_rst>
    pbuf_free(p);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7fd fae3 	bl	800c718 <pbuf_free>
  return;
 800f152:	e00c      	b.n	800f16e <tcp_input+0x7ea>
    goto dropped;
 800f154:	bf00      	nop
 800f156:	e006      	b.n	800f166 <tcp_input+0x7e2>
    goto dropped;
 800f158:	bf00      	nop
 800f15a:	e004      	b.n	800f166 <tcp_input+0x7e2>
    goto dropped;
 800f15c:	bf00      	nop
 800f15e:	e002      	b.n	800f166 <tcp_input+0x7e2>
      goto dropped;
 800f160:	bf00      	nop
 800f162:	e000      	b.n	800f166 <tcp_input+0x7e2>
      goto dropped;
 800f164:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7fd fad6 	bl	800c718 <pbuf_free>
 800f16c:	e000      	b.n	800f170 <tcp_input+0x7ec>
  return;
 800f16e:	bf00      	nop
}
 800f170:	3724      	adds	r7, #36	@ 0x24
 800f172:	46bd      	mov	sp, r7
 800f174:	bd90      	pop	{r4, r7, pc}
 800f176:	bf00      	nop
 800f178:	2000eb88 	.word	0x2000eb88
 800f17c:	2000eb84 	.word	0x2000eb84
 800f180:	2000eb54 	.word	0x2000eb54
 800f184:	2000eb64 	.word	0x2000eb64
 800f188:	2000eb78 	.word	0x2000eb78
 800f18c:	2000eb7e 	.word	0x2000eb7e
 800f190:	2000eb74 	.word	0x2000eb74
 800f194:	20009200 	.word	0x20009200
 800f198:	20009204 	.word	0x20009204

0800f19c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d106      	bne.n	800f1b8 <tcp_input_delayed_close+0x1c>
 800f1aa:	4b17      	ldr	r3, [pc, #92]	@ (800f208 <tcp_input_delayed_close+0x6c>)
 800f1ac:	f240 225a 	movw	r2, #602	@ 0x25a
 800f1b0:	4916      	ldr	r1, [pc, #88]	@ (800f20c <tcp_input_delayed_close+0x70>)
 800f1b2:	4817      	ldr	r0, [pc, #92]	@ (800f210 <tcp_input_delayed_close+0x74>)
 800f1b4:	f007 f81c 	bl	80161f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f1b8:	4b16      	ldr	r3, [pc, #88]	@ (800f214 <tcp_input_delayed_close+0x78>)
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	f003 0310 	and.w	r3, r3, #16
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d01c      	beq.n	800f1fe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	8b5b      	ldrh	r3, [r3, #26]
 800f1c8:	f003 0310 	and.w	r3, r3, #16
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d10d      	bne.n	800f1ec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d008      	beq.n	800f1ec <tcp_input_delayed_close+0x50>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	6912      	ldr	r2, [r2, #16]
 800f1e4:	f06f 010e 	mvn.w	r1, #14
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	480a      	ldr	r0, [pc, #40]	@ (800f218 <tcp_input_delayed_close+0x7c>)
 800f1f0:	f7ff fa50 	bl	800e694 <tcp_pcb_remove>
    tcp_free(pcb);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7fd fd5d 	bl	800ccb4 <tcp_free>
    return 1;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e000      	b.n	800f200 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	08019478 	.word	0x08019478
 800f20c:	08019648 	.word	0x08019648
 800f210:	080194c4 	.word	0x080194c4
 800f214:	2000eb81 	.word	0x2000eb81
 800f218:	2000eb48 	.word	0x2000eb48

0800f21c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b08b      	sub	sp, #44	@ 0x2c
 800f220:	af04      	add	r7, sp, #16
 800f222:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f224:	4b6f      	ldr	r3, [pc, #444]	@ (800f3e4 <tcp_listen_input+0x1c8>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	f003 0304 	and.w	r3, r3, #4
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f040 80d2 	bne.w	800f3d6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d106      	bne.n	800f246 <tcp_listen_input+0x2a>
 800f238:	4b6b      	ldr	r3, [pc, #428]	@ (800f3e8 <tcp_listen_input+0x1cc>)
 800f23a:	f240 2281 	movw	r2, #641	@ 0x281
 800f23e:	496b      	ldr	r1, [pc, #428]	@ (800f3ec <tcp_listen_input+0x1d0>)
 800f240:	486b      	ldr	r0, [pc, #428]	@ (800f3f0 <tcp_listen_input+0x1d4>)
 800f242:	f006 ffd5 	bl	80161f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f246:	4b67      	ldr	r3, [pc, #412]	@ (800f3e4 <tcp_listen_input+0x1c8>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	f003 0310 	and.w	r3, r3, #16
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d019      	beq.n	800f286 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f252:	4b68      	ldr	r3, [pc, #416]	@ (800f3f4 <tcp_listen_input+0x1d8>)
 800f254:	6819      	ldr	r1, [r3, #0]
 800f256:	4b68      	ldr	r3, [pc, #416]	@ (800f3f8 <tcp_listen_input+0x1dc>)
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	461a      	mov	r2, r3
 800f25c:	4b67      	ldr	r3, [pc, #412]	@ (800f3fc <tcp_listen_input+0x1e0>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f262:	4b67      	ldr	r3, [pc, #412]	@ (800f400 <tcp_listen_input+0x1e4>)
 800f264:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f266:	885b      	ldrh	r3, [r3, #2]
 800f268:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f26a:	4a65      	ldr	r2, [pc, #404]	@ (800f400 <tcp_listen_input+0x1e4>)
 800f26c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f26e:	8812      	ldrh	r2, [r2, #0]
 800f270:	b292      	uxth	r2, r2
 800f272:	9202      	str	r2, [sp, #8]
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	4b63      	ldr	r3, [pc, #396]	@ (800f404 <tcp_listen_input+0x1e8>)
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	4b63      	ldr	r3, [pc, #396]	@ (800f408 <tcp_listen_input+0x1ec>)
 800f27c:	4602      	mov	r2, r0
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f003 fbd2 	bl	8012a28 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f284:	e0a9      	b.n	800f3da <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f286:	4b57      	ldr	r3, [pc, #348]	@ (800f3e4 <tcp_listen_input+0x1c8>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	f003 0302 	and.w	r3, r3, #2
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f000 80a3 	beq.w	800f3da <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7d5b      	ldrb	r3, [r3, #21]
 800f298:	4618      	mov	r0, r3
 800f29a:	f7ff f851 	bl	800e340 <tcp_alloc>
 800f29e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d111      	bne.n	800f2ca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	699b      	ldr	r3, [r3, #24]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00a      	beq.n	800f2c4 <tcp_listen_input+0xa8>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	6910      	ldr	r0, [r2, #16]
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	4798      	blx	r3
 800f2be:	4603      	mov	r3, r0
 800f2c0:	73bb      	strb	r3, [r7, #14]
      return;
 800f2c2:	e08b      	b.n	800f3dc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f2c4:	23f0      	movs	r3, #240	@ 0xf0
 800f2c6:	73bb      	strb	r3, [r7, #14]
      return;
 800f2c8:	e088      	b.n	800f3dc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f2ca:	4b50      	ldr	r3, [pc, #320]	@ (800f40c <tcp_listen_input+0x1f0>)
 800f2cc:	695a      	ldr	r2, [r3, #20]
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f2d2:	4b4e      	ldr	r3, [pc, #312]	@ (800f40c <tcp_listen_input+0x1f0>)
 800f2d4:	691a      	ldr	r2, [r3, #16]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	8ada      	ldrh	r2, [r3, #22]
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f2e2:	4b47      	ldr	r3, [pc, #284]	@ (800f400 <tcp_listen_input+0x1e4>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	2203      	movs	r2, #3
 800f2f2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f2f4:	4b41      	ldr	r3, [pc, #260]	@ (800f3fc <tcp_listen_input+0x1e0>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f306:	6978      	ldr	r0, [r7, #20]
 800f308:	f7ff fa58 	bl	800e7bc <tcp_next_iss>
 800f30c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	693a      	ldr	r2, [r7, #16]
 800f318:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	693a      	ldr	r2, [r7, #16]
 800f31e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	693a      	ldr	r2, [r7, #16]
 800f324:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f326:	4b35      	ldr	r3, [pc, #212]	@ (800f3fc <tcp_listen_input+0x1e0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	1e5a      	subs	r2, r3, #1
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	691a      	ldr	r2, [r3, #16]
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	7a5b      	ldrb	r3, [r3, #9]
 800f342:	f003 030c 	and.w	r3, r3, #12
 800f346:	b2da      	uxtb	r2, r3
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	7a1a      	ldrb	r2, [r3, #8]
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f354:	4b2e      	ldr	r3, [pc, #184]	@ (800f410 <tcp_listen_input+0x1f4>)
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	60da      	str	r2, [r3, #12]
 800f35c:	4a2c      	ldr	r2, [pc, #176]	@ (800f410 <tcp_listen_input+0x1f4>)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	6013      	str	r3, [r2, #0]
 800f362:	f003 fd23 	bl	8012dac <tcp_timer_needed>
 800f366:	4b2b      	ldr	r3, [pc, #172]	@ (800f414 <tcp_listen_input+0x1f8>)
 800f368:	2201      	movs	r2, #1
 800f36a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f36c:	6978      	ldr	r0, [r7, #20]
 800f36e:	f001 fd8b 	bl	8010e88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f372:	4b23      	ldr	r3, [pc, #140]	@ (800f400 <tcp_listen_input+0x1e4>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	89db      	ldrh	r3, [r3, #14]
 800f378:	b29a      	uxth	r2, r3
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	3304      	adds	r3, #4
 800f394:	4618      	mov	r0, r3
 800f396:	f005 fa5d 	bl	8014854 <ip4_route>
 800f39a:	4601      	mov	r1, r0
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f7ff fa30 	bl	800e808 <tcp_eff_send_mss_netif>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f3b0:	2112      	movs	r1, #18
 800f3b2:	6978      	ldr	r0, [r7, #20]
 800f3b4:	f002 fc96 	bl	8011ce4 <tcp_enqueue_flags>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f3bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d004      	beq.n	800f3ce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	6978      	ldr	r0, [r7, #20]
 800f3c8:	f7fd fefa 	bl	800d1c0 <tcp_abandon>
      return;
 800f3cc:	e006      	b.n	800f3dc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f3ce:	6978      	ldr	r0, [r7, #20]
 800f3d0:	f002 fd76 	bl	8011ec0 <tcp_output>
  return;
 800f3d4:	e001      	b.n	800f3da <tcp_listen_input+0x1be>
    return;
 800f3d6:	bf00      	nop
 800f3d8:	e000      	b.n	800f3dc <tcp_listen_input+0x1c0>
  return;
 800f3da:	bf00      	nop
}
 800f3dc:	371c      	adds	r7, #28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd90      	pop	{r4, r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	2000eb80 	.word	0x2000eb80
 800f3e8:	08019478 	.word	0x08019478
 800f3ec:	08019670 	.word	0x08019670
 800f3f0:	080194c4 	.word	0x080194c4
 800f3f4:	2000eb78 	.word	0x2000eb78
 800f3f8:	2000eb7e 	.word	0x2000eb7e
 800f3fc:	2000eb74 	.word	0x2000eb74
 800f400:	2000eb64 	.word	0x2000eb64
 800f404:	20009200 	.word	0x20009200
 800f408:	20009204 	.word	0x20009204
 800f40c:	200091f0 	.word	0x200091f0
 800f410:	2000eb48 	.word	0x2000eb48
 800f414:	2000eb50 	.word	0x2000eb50

0800f418 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af04      	add	r7, sp, #16
 800f41e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f420:	4b2f      	ldr	r3, [pc, #188]	@ (800f4e0 <tcp_timewait_input+0xc8>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 0304 	and.w	r3, r3, #4
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d153      	bne.n	800f4d4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d106      	bne.n	800f440 <tcp_timewait_input+0x28>
 800f432:	4b2c      	ldr	r3, [pc, #176]	@ (800f4e4 <tcp_timewait_input+0xcc>)
 800f434:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f438:	492b      	ldr	r1, [pc, #172]	@ (800f4e8 <tcp_timewait_input+0xd0>)
 800f43a:	482c      	ldr	r0, [pc, #176]	@ (800f4ec <tcp_timewait_input+0xd4>)
 800f43c:	f006 fed8 	bl	80161f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f440:	4b27      	ldr	r3, [pc, #156]	@ (800f4e0 <tcp_timewait_input+0xc8>)
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d02a      	beq.n	800f4a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f44c:	4b28      	ldr	r3, [pc, #160]	@ (800f4f0 <tcp_timewait_input+0xd8>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	db2d      	blt.n	800f4b6 <tcp_timewait_input+0x9e>
 800f45a:	4b25      	ldr	r3, [pc, #148]	@ (800f4f0 <tcp_timewait_input+0xd8>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f462:	6879      	ldr	r1, [r7, #4]
 800f464:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f466:	440b      	add	r3, r1
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	dc23      	bgt.n	800f4b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46e:	4b21      	ldr	r3, [pc, #132]	@ (800f4f4 <tcp_timewait_input+0xdc>)
 800f470:	6819      	ldr	r1, [r3, #0]
 800f472:	4b21      	ldr	r3, [pc, #132]	@ (800f4f8 <tcp_timewait_input+0xe0>)
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	461a      	mov	r2, r3
 800f478:	4b1d      	ldr	r3, [pc, #116]	@ (800f4f0 <tcp_timewait_input+0xd8>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f47e:	4b1f      	ldr	r3, [pc, #124]	@ (800f4fc <tcp_timewait_input+0xe4>)
 800f480:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f482:	885b      	ldrh	r3, [r3, #2]
 800f484:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f486:	4a1d      	ldr	r2, [pc, #116]	@ (800f4fc <tcp_timewait_input+0xe4>)
 800f488:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f48a:	8812      	ldrh	r2, [r2, #0]
 800f48c:	b292      	uxth	r2, r2
 800f48e:	9202      	str	r2, [sp, #8]
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	4b1b      	ldr	r3, [pc, #108]	@ (800f500 <tcp_timewait_input+0xe8>)
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	4b1b      	ldr	r3, [pc, #108]	@ (800f504 <tcp_timewait_input+0xec>)
 800f498:	4602      	mov	r2, r0
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f003 fac4 	bl	8012a28 <tcp_rst>
      return;
 800f4a0:	e01b      	b.n	800f4da <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f4a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f4e0 <tcp_timewait_input+0xc8>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	f003 0301 	and.w	r3, r3, #1
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d003      	beq.n	800f4b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f4ae:	4b16      	ldr	r3, [pc, #88]	@ (800f508 <tcp_timewait_input+0xf0>)
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f4b6:	4b10      	ldr	r3, [pc, #64]	@ (800f4f8 <tcp_timewait_input+0xe0>)
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00c      	beq.n	800f4d8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	8b5b      	ldrh	r3, [r3, #26]
 800f4c2:	f043 0302 	orr.w	r3, r3, #2
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f002 fcf7 	bl	8011ec0 <tcp_output>
  }
  return;
 800f4d2:	e001      	b.n	800f4d8 <tcp_timewait_input+0xc0>
    return;
 800f4d4:	bf00      	nop
 800f4d6:	e000      	b.n	800f4da <tcp_timewait_input+0xc2>
  return;
 800f4d8:	bf00      	nop
}
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	2000eb80 	.word	0x2000eb80
 800f4e4:	08019478 	.word	0x08019478
 800f4e8:	08019690 	.word	0x08019690
 800f4ec:	080194c4 	.word	0x080194c4
 800f4f0:	2000eb74 	.word	0x2000eb74
 800f4f4:	2000eb78 	.word	0x2000eb78
 800f4f8:	2000eb7e 	.word	0x2000eb7e
 800f4fc:	2000eb64 	.word	0x2000eb64
 800f500:	20009200 	.word	0x20009200
 800f504:	20009204 	.word	0x20009204
 800f508:	2000eb3c 	.word	0x2000eb3c

0800f50c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f50c:	b590      	push	{r4, r7, lr}
 800f50e:	b08d      	sub	sp, #52	@ 0x34
 800f510:	af04      	add	r7, sp, #16
 800f512:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f514:	2300      	movs	r3, #0
 800f516:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d106      	bne.n	800f530 <tcp_process+0x24>
 800f522:	4b9d      	ldr	r3, [pc, #628]	@ (800f798 <tcp_process+0x28c>)
 800f524:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f528:	499c      	ldr	r1, [pc, #624]	@ (800f79c <tcp_process+0x290>)
 800f52a:	489d      	ldr	r0, [pc, #628]	@ (800f7a0 <tcp_process+0x294>)
 800f52c:	f006 fe60 	bl	80161f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f530:	4b9c      	ldr	r3, [pc, #624]	@ (800f7a4 <tcp_process+0x298>)
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	f003 0304 	and.w	r3, r3, #4
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d04e      	beq.n	800f5da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	7d1b      	ldrb	r3, [r3, #20]
 800f540:	2b02      	cmp	r3, #2
 800f542:	d108      	bne.n	800f556 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f548:	4b97      	ldr	r3, [pc, #604]	@ (800f7a8 <tcp_process+0x29c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d123      	bne.n	800f598 <tcp_process+0x8c>
        acceptable = 1;
 800f550:	2301      	movs	r3, #1
 800f552:	76fb      	strb	r3, [r7, #27]
 800f554:	e020      	b.n	800f598 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f55a:	4b94      	ldr	r3, [pc, #592]	@ (800f7ac <tcp_process+0x2a0>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d102      	bne.n	800f568 <tcp_process+0x5c>
        acceptable = 1;
 800f562:	2301      	movs	r3, #1
 800f564:	76fb      	strb	r3, [r7, #27]
 800f566:	e017      	b.n	800f598 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f568:	4b90      	ldr	r3, [pc, #576]	@ (800f7ac <tcp_process+0x2a0>)
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	db10      	blt.n	800f598 <tcp_process+0x8c>
 800f576:	4b8d      	ldr	r3, [pc, #564]	@ (800f7ac <tcp_process+0x2a0>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f57e:	6879      	ldr	r1, [r7, #4]
 800f580:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f582:	440b      	add	r3, r1
 800f584:	1ad3      	subs	r3, r2, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	dc06      	bgt.n	800f598 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	8b5b      	ldrh	r3, [r3, #26]
 800f58e:	f043 0302 	orr.w	r3, r3, #2
 800f592:	b29a      	uxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f598:	7efb      	ldrb	r3, [r7, #27]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d01b      	beq.n	800f5d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	7d1b      	ldrb	r3, [r3, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d106      	bne.n	800f5b4 <tcp_process+0xa8>
 800f5a6:	4b7c      	ldr	r3, [pc, #496]	@ (800f798 <tcp_process+0x28c>)
 800f5a8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f5ac:	4980      	ldr	r1, [pc, #512]	@ (800f7b0 <tcp_process+0x2a4>)
 800f5ae:	487c      	ldr	r0, [pc, #496]	@ (800f7a0 <tcp_process+0x294>)
 800f5b0:	f006 fe1e 	bl	80161f0 <iprintf>
      recv_flags |= TF_RESET;
 800f5b4:	4b7f      	ldr	r3, [pc, #508]	@ (800f7b4 <tcp_process+0x2a8>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f043 0308 	orr.w	r3, r3, #8
 800f5bc:	b2da      	uxtb	r2, r3
 800f5be:	4b7d      	ldr	r3, [pc, #500]	@ (800f7b4 <tcp_process+0x2a8>)
 800f5c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8b5b      	ldrh	r3, [r3, #26]
 800f5c6:	f023 0301 	bic.w	r3, r3, #1
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f5d0:	f06f 030d 	mvn.w	r3, #13
 800f5d4:	e37a      	b.n	800fccc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	e378      	b.n	800fccc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f5da:	4b72      	ldr	r3, [pc, #456]	@ (800f7a4 <tcp_process+0x298>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	f003 0302 	and.w	r3, r3, #2
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d010      	beq.n	800f608 <tcp_process+0xfc>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d00c      	beq.n	800f608 <tcp_process+0xfc>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	7d1b      	ldrb	r3, [r3, #20]
 800f5f2:	2b03      	cmp	r3, #3
 800f5f4:	d008      	beq.n	800f608 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	8b5b      	ldrh	r3, [r3, #26]
 800f5fa:	f043 0302 	orr.w	r3, r3, #2
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f604:	2300      	movs	r3, #0
 800f606:	e361      	b.n	800fccc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	8b5b      	ldrh	r3, [r3, #26]
 800f60c:	f003 0310 	and.w	r3, r3, #16
 800f610:	2b00      	cmp	r3, #0
 800f612:	d103      	bne.n	800f61c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f614:	4b68      	ldr	r3, [pc, #416]	@ (800f7b8 <tcp_process+0x2ac>)
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f001 fc2b 	bl	8010e88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	7d1b      	ldrb	r3, [r3, #20]
 800f636:	3b02      	subs	r3, #2
 800f638:	2b07      	cmp	r3, #7
 800f63a:	f200 8337 	bhi.w	800fcac <tcp_process+0x7a0>
 800f63e:	a201      	add	r2, pc, #4	@ (adr r2, 800f644 <tcp_process+0x138>)
 800f640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f644:	0800f665 	.word	0x0800f665
 800f648:	0800f895 	.word	0x0800f895
 800f64c:	0800fa0d 	.word	0x0800fa0d
 800f650:	0800fa37 	.word	0x0800fa37
 800f654:	0800fb5b 	.word	0x0800fb5b
 800f658:	0800fa0d 	.word	0x0800fa0d
 800f65c:	0800fbe7 	.word	0x0800fbe7
 800f660:	0800fc77 	.word	0x0800fc77
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f664:	4b4f      	ldr	r3, [pc, #316]	@ (800f7a4 <tcp_process+0x298>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	f003 0310 	and.w	r3, r3, #16
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f000 80e4 	beq.w	800f83a <tcp_process+0x32e>
 800f672:	4b4c      	ldr	r3, [pc, #304]	@ (800f7a4 <tcp_process+0x298>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	f003 0302 	and.w	r3, r3, #2
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f000 80dd 	beq.w	800f83a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f684:	1c5a      	adds	r2, r3, #1
 800f686:	4b48      	ldr	r3, [pc, #288]	@ (800f7a8 <tcp_process+0x29c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	f040 80d5 	bne.w	800f83a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f690:	4b46      	ldr	r3, [pc, #280]	@ (800f7ac <tcp_process+0x2a0>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f6a2:	4b41      	ldr	r3, [pc, #260]	@ (800f7a8 <tcp_process+0x29c>)
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f6aa:	4b44      	ldr	r3, [pc, #272]	@ (800f7bc <tcp_process+0x2b0>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	89db      	ldrh	r3, [r3, #14]
 800f6b0:	b29a      	uxth	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f6c4:	4b39      	ldr	r3, [pc, #228]	@ (800f7ac <tcp_process+0x2a0>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	1e5a      	subs	r2, r3, #1
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2204      	movs	r2, #4
 800f6d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	3304      	adds	r3, #4
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f005 f8b9 	bl	8014854 <ip4_route>
 800f6e2:	4601      	mov	r1, r0
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f7ff f88c 	bl	800e808 <tcp_eff_send_mss_netif>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f6fc:	009a      	lsls	r2, r3, #2
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f702:	005b      	lsls	r3, r3, #1
 800f704:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f708:	428b      	cmp	r3, r1
 800f70a:	bf38      	it	cc
 800f70c:	460b      	movcc	r3, r1
 800f70e:	429a      	cmp	r2, r3
 800f710:	d204      	bcs.n	800f71c <tcp_process+0x210>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	b29b      	uxth	r3, r3
 800f71a:	e00d      	b.n	800f738 <tcp_process+0x22c>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f720:	005b      	lsls	r3, r3, #1
 800f722:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f726:	4293      	cmp	r3, r2
 800f728:	d904      	bls.n	800f734 <tcp_process+0x228>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	b29b      	uxth	r3, r3
 800f732:	e001      	b.n	800f738 <tcp_process+0x22c>
 800f734:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f744:	2b00      	cmp	r3, #0
 800f746:	d106      	bne.n	800f756 <tcp_process+0x24a>
 800f748:	4b13      	ldr	r3, [pc, #76]	@ (800f798 <tcp_process+0x28c>)
 800f74a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f74e:	491c      	ldr	r1, [pc, #112]	@ (800f7c0 <tcp_process+0x2b4>)
 800f750:	4813      	ldr	r0, [pc, #76]	@ (800f7a0 <tcp_process+0x294>)
 800f752:	f006 fd4d 	bl	80161f0 <iprintf>
        --pcb->snd_queuelen;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f75c:	3b01      	subs	r3, #1
 800f75e:	b29a      	uxth	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f76a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d12a      	bne.n	800f7c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f776:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d106      	bne.n	800f78c <tcp_process+0x280>
 800f77e:	4b06      	ldr	r3, [pc, #24]	@ (800f798 <tcp_process+0x28c>)
 800f780:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f784:	490f      	ldr	r1, [pc, #60]	@ (800f7c4 <tcp_process+0x2b8>)
 800f786:	4806      	ldr	r0, [pc, #24]	@ (800f7a0 <tcp_process+0x294>)
 800f788:	f006 fd32 	bl	80161f0 <iprintf>
          pcb->unsent = rseg->next;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f794:	e01c      	b.n	800f7d0 <tcp_process+0x2c4>
 800f796:	bf00      	nop
 800f798:	08019478 	.word	0x08019478
 800f79c:	080196b0 	.word	0x080196b0
 800f7a0:	080194c4 	.word	0x080194c4
 800f7a4:	2000eb80 	.word	0x2000eb80
 800f7a8:	2000eb78 	.word	0x2000eb78
 800f7ac:	2000eb74 	.word	0x2000eb74
 800f7b0:	080196cc 	.word	0x080196cc
 800f7b4:	2000eb81 	.word	0x2000eb81
 800f7b8:	2000eb3c 	.word	0x2000eb3c
 800f7bc:	2000eb64 	.word	0x2000eb64
 800f7c0:	080196ec 	.word	0x080196ec
 800f7c4:	08019704 	.word	0x08019704
        } else {
          pcb->unacked = rseg->next;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f7d0:	69f8      	ldr	r0, [r7, #28]
 800f7d2:	f7fe fc4c 	bl	800e06e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d104      	bne.n	800f7e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7e4:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f7e6:	e006      	b.n	800f7f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00a      	beq.n	800f816 <tcp_process+0x30a>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	6910      	ldr	r0, [r2, #16]
 800f80a:	2200      	movs	r2, #0
 800f80c:	6879      	ldr	r1, [r7, #4]
 800f80e:	4798      	blx	r3
 800f810:	4603      	mov	r3, r0
 800f812:	76bb      	strb	r3, [r7, #26]
 800f814:	e001      	b.n	800f81a <tcp_process+0x30e>
 800f816:	2300      	movs	r3, #0
 800f818:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f81a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f81e:	f113 0f0d 	cmn.w	r3, #13
 800f822:	d102      	bne.n	800f82a <tcp_process+0x31e>
          return ERR_ABRT;
 800f824:	f06f 030c 	mvn.w	r3, #12
 800f828:	e250      	b.n	800fccc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	8b5b      	ldrh	r3, [r3, #26]
 800f82e:	f043 0302 	orr.w	r3, r3, #2
 800f832:	b29a      	uxth	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f838:	e23a      	b.n	800fcb0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f83a:	4b98      	ldr	r3, [pc, #608]	@ (800fa9c <tcp_process+0x590>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	f003 0310 	and.w	r3, r3, #16
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 8234 	beq.w	800fcb0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f848:	4b95      	ldr	r3, [pc, #596]	@ (800faa0 <tcp_process+0x594>)
 800f84a:	6819      	ldr	r1, [r3, #0]
 800f84c:	4b95      	ldr	r3, [pc, #596]	@ (800faa4 <tcp_process+0x598>)
 800f84e:	881b      	ldrh	r3, [r3, #0]
 800f850:	461a      	mov	r2, r3
 800f852:	4b95      	ldr	r3, [pc, #596]	@ (800faa8 <tcp_process+0x59c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f858:	4b94      	ldr	r3, [pc, #592]	@ (800faac <tcp_process+0x5a0>)
 800f85a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f85c:	885b      	ldrh	r3, [r3, #2]
 800f85e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f860:	4a92      	ldr	r2, [pc, #584]	@ (800faac <tcp_process+0x5a0>)
 800f862:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f864:	8812      	ldrh	r2, [r2, #0]
 800f866:	b292      	uxth	r2, r2
 800f868:	9202      	str	r2, [sp, #8]
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	4b90      	ldr	r3, [pc, #576]	@ (800fab0 <tcp_process+0x5a4>)
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	4b90      	ldr	r3, [pc, #576]	@ (800fab4 <tcp_process+0x5a8>)
 800f872:	4602      	mov	r2, r0
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f003 f8d7 	bl	8012a28 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f880:	2b05      	cmp	r3, #5
 800f882:	f200 8215 	bhi.w	800fcb0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2200      	movs	r2, #0
 800f88a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f002 fea3 	bl	80125d8 <tcp_rexmit_rto>
      break;
 800f892:	e20d      	b.n	800fcb0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f894:	4b81      	ldr	r3, [pc, #516]	@ (800fa9c <tcp_process+0x590>)
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	f003 0310 	and.w	r3, r3, #16
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f000 80a1 	beq.w	800f9e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8a2:	4b7f      	ldr	r3, [pc, #508]	@ (800faa0 <tcp_process+0x594>)
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8aa:	1ad3      	subs	r3, r2, r3
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	db7e      	blt.n	800f9b0 <tcp_process+0x4a4>
 800f8b2:	4b7b      	ldr	r3, [pc, #492]	@ (800faa0 <tcp_process+0x594>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dc77      	bgt.n	800f9b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2204      	movs	r2, #4
 800f8c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d102      	bne.n	800f8d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f8ce:	23fa      	movs	r3, #250	@ 0xfa
 800f8d0:	76bb      	strb	r3, [r7, #26]
 800f8d2:	e01d      	b.n	800f910 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8d8:	699b      	ldr	r3, [r3, #24]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <tcp_process+0x3e0>
 800f8de:	4b76      	ldr	r3, [pc, #472]	@ (800fab8 <tcp_process+0x5ac>)
 800f8e0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f8e4:	4975      	ldr	r1, [pc, #468]	@ (800fabc <tcp_process+0x5b0>)
 800f8e6:	4876      	ldr	r0, [pc, #472]	@ (800fac0 <tcp_process+0x5b4>)
 800f8e8:	f006 fc82 	bl	80161f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00a      	beq.n	800f90c <tcp_process+0x400>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8fa:	699b      	ldr	r3, [r3, #24]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	6910      	ldr	r0, [r2, #16]
 800f900:	2200      	movs	r2, #0
 800f902:	6879      	ldr	r1, [r7, #4]
 800f904:	4798      	blx	r3
 800f906:	4603      	mov	r3, r0
 800f908:	76bb      	strb	r3, [r7, #26]
 800f90a:	e001      	b.n	800f910 <tcp_process+0x404>
 800f90c:	23f0      	movs	r3, #240	@ 0xf0
 800f90e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f910:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00a      	beq.n	800f92e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f918:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f91c:	f113 0f0d 	cmn.w	r3, #13
 800f920:	d002      	beq.n	800f928 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7fd fd0a 	bl	800d33c <tcp_abort>
            }
            return ERR_ABRT;
 800f928:	f06f 030c 	mvn.w	r3, #12
 800f92c:	e1ce      	b.n	800fccc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 fae0 	bl	800fef4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f934:	4b63      	ldr	r3, [pc, #396]	@ (800fac4 <tcp_process+0x5b8>)
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d005      	beq.n	800f948 <tcp_process+0x43c>
            recv_acked--;
 800f93c:	4b61      	ldr	r3, [pc, #388]	@ (800fac4 <tcp_process+0x5b8>)
 800f93e:	881b      	ldrh	r3, [r3, #0]
 800f940:	3b01      	subs	r3, #1
 800f942:	b29a      	uxth	r2, r3
 800f944:	4b5f      	ldr	r3, [pc, #380]	@ (800fac4 <tcp_process+0x5b8>)
 800f946:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f94c:	009a      	lsls	r2, r3, #2
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f952:	005b      	lsls	r3, r3, #1
 800f954:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f958:	428b      	cmp	r3, r1
 800f95a:	bf38      	it	cc
 800f95c:	460b      	movcc	r3, r1
 800f95e:	429a      	cmp	r2, r3
 800f960:	d204      	bcs.n	800f96c <tcp_process+0x460>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	b29b      	uxth	r3, r3
 800f96a:	e00d      	b.n	800f988 <tcp_process+0x47c>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f976:	4293      	cmp	r3, r2
 800f978:	d904      	bls.n	800f984 <tcp_process+0x478>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f97e:	005b      	lsls	r3, r3, #1
 800f980:	b29b      	uxth	r3, r3
 800f982:	e001      	b.n	800f988 <tcp_process+0x47c>
 800f984:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f98e:	4b4e      	ldr	r3, [pc, #312]	@ (800fac8 <tcp_process+0x5bc>)
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	f003 0320 	and.w	r3, r3, #32
 800f996:	2b00      	cmp	r3, #0
 800f998:	d037      	beq.n	800fa0a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	8b5b      	ldrh	r3, [r3, #26]
 800f99e:	f043 0302 	orr.w	r3, r3, #2
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2207      	movs	r2, #7
 800f9ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f9ae:	e02c      	b.n	800fa0a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9b0:	4b3b      	ldr	r3, [pc, #236]	@ (800faa0 <tcp_process+0x594>)
 800f9b2:	6819      	ldr	r1, [r3, #0]
 800f9b4:	4b3b      	ldr	r3, [pc, #236]	@ (800faa4 <tcp_process+0x598>)
 800f9b6:	881b      	ldrh	r3, [r3, #0]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	4b3b      	ldr	r3, [pc, #236]	@ (800faa8 <tcp_process+0x59c>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9c0:	4b3a      	ldr	r3, [pc, #232]	@ (800faac <tcp_process+0x5a0>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c4:	885b      	ldrh	r3, [r3, #2]
 800f9c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9c8:	4a38      	ldr	r2, [pc, #224]	@ (800faac <tcp_process+0x5a0>)
 800f9ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9cc:	8812      	ldrh	r2, [r2, #0]
 800f9ce:	b292      	uxth	r2, r2
 800f9d0:	9202      	str	r2, [sp, #8]
 800f9d2:	9301      	str	r3, [sp, #4]
 800f9d4:	4b36      	ldr	r3, [pc, #216]	@ (800fab0 <tcp_process+0x5a4>)
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	4b36      	ldr	r3, [pc, #216]	@ (800fab4 <tcp_process+0x5a8>)
 800f9da:	4602      	mov	r2, r0
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f003 f823 	bl	8012a28 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f9e2:	e167      	b.n	800fcb4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f9e4:	4b2d      	ldr	r3, [pc, #180]	@ (800fa9c <tcp_process+0x590>)
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	f003 0302 	and.w	r3, r3, #2
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	f000 8161 	beq.w	800fcb4 <tcp_process+0x7a8>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9f6:	1e5a      	subs	r2, r3, #1
 800f9f8:	4b2b      	ldr	r3, [pc, #172]	@ (800faa8 <tcp_process+0x59c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	f040 8159 	bne.w	800fcb4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f002 fe0a 	bl	801261c <tcp_rexmit>
      break;
 800fa08:	e154      	b.n	800fcb4 <tcp_process+0x7a8>
 800fa0a:	e153      	b.n	800fcb4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 fa71 	bl	800fef4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fa12:	4b2d      	ldr	r3, [pc, #180]	@ (800fac8 <tcp_process+0x5bc>)
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	f003 0320 	and.w	r3, r3, #32
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f000 814c 	beq.w	800fcb8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8b5b      	ldrh	r3, [r3, #26]
 800fa24:	f043 0302 	orr.w	r3, r3, #2
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2207      	movs	r2, #7
 800fa32:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa34:	e140      	b.n	800fcb8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 fa5c 	bl	800fef4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fa3c:	4b22      	ldr	r3, [pc, #136]	@ (800fac8 <tcp_process+0x5bc>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f003 0320 	and.w	r3, r3, #32
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d071      	beq.n	800fb2c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa48:	4b14      	ldr	r3, [pc, #80]	@ (800fa9c <tcp_process+0x590>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	f003 0310 	and.w	r3, r3, #16
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d060      	beq.n	800fb16 <tcp_process+0x60a>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fa58:	4b11      	ldr	r3, [pc, #68]	@ (800faa0 <tcp_process+0x594>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d15a      	bne.n	800fb16 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d156      	bne.n	800fb16 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	8b5b      	ldrh	r3, [r3, #26]
 800fa6c:	f043 0302 	orr.w	r3, r3, #2
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7fe fdbc 	bl	800e5f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fa7c:	4b13      	ldr	r3, [pc, #76]	@ (800facc <tcp_process+0x5c0>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d105      	bne.n	800fa92 <tcp_process+0x586>
 800fa86:	4b11      	ldr	r3, [pc, #68]	@ (800facc <tcp_process+0x5c0>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	4a0f      	ldr	r2, [pc, #60]	@ (800facc <tcp_process+0x5c0>)
 800fa8e:	6013      	str	r3, [r2, #0]
 800fa90:	e02e      	b.n	800faf0 <tcp_process+0x5e4>
 800fa92:	4b0e      	ldr	r3, [pc, #56]	@ (800facc <tcp_process+0x5c0>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	617b      	str	r3, [r7, #20]
 800fa98:	e027      	b.n	800faea <tcp_process+0x5de>
 800fa9a:	bf00      	nop
 800fa9c:	2000eb80 	.word	0x2000eb80
 800faa0:	2000eb78 	.word	0x2000eb78
 800faa4:	2000eb7e 	.word	0x2000eb7e
 800faa8:	2000eb74 	.word	0x2000eb74
 800faac:	2000eb64 	.word	0x2000eb64
 800fab0:	20009200 	.word	0x20009200
 800fab4:	20009204 	.word	0x20009204
 800fab8:	08019478 	.word	0x08019478
 800fabc:	08019718 	.word	0x08019718
 800fac0:	080194c4 	.word	0x080194c4
 800fac4:	2000eb7c 	.word	0x2000eb7c
 800fac8:	2000eb81 	.word	0x2000eb81
 800facc:	2000eb48 	.word	0x2000eb48
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d104      	bne.n	800fae4 <tcp_process+0x5d8>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	68da      	ldr	r2, [r3, #12]
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	60da      	str	r2, [r3, #12]
 800fae2:	e005      	b.n	800faf0 <tcp_process+0x5e4>
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	617b      	str	r3, [r7, #20]
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1ef      	bne.n	800fad0 <tcp_process+0x5c4>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	60da      	str	r2, [r3, #12]
 800faf6:	4b77      	ldr	r3, [pc, #476]	@ (800fcd4 <tcp_process+0x7c8>)
 800faf8:	2201      	movs	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	220a      	movs	r2, #10
 800fb00:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fb02:	4b75      	ldr	r3, [pc, #468]	@ (800fcd8 <tcp_process+0x7cc>)
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	60da      	str	r2, [r3, #12]
 800fb0a:	4a73      	ldr	r2, [pc, #460]	@ (800fcd8 <tcp_process+0x7cc>)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	f003 f94c 	bl	8012dac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fb14:	e0d2      	b.n	800fcbc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8b5b      	ldrh	r3, [r3, #26]
 800fb1a:	f043 0302 	orr.w	r3, r3, #2
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2208      	movs	r2, #8
 800fb28:	751a      	strb	r2, [r3, #20]
      break;
 800fb2a:	e0c7      	b.n	800fcbc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb2c:	4b6b      	ldr	r3, [pc, #428]	@ (800fcdc <tcp_process+0x7d0>)
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	f003 0310 	and.w	r3, r3, #16
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 80c1 	beq.w	800fcbc <tcp_process+0x7b0>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb3e:	4b68      	ldr	r3, [pc, #416]	@ (800fce0 <tcp_process+0x7d4>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	f040 80ba 	bne.w	800fcbc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f040 80b5 	bne.w	800fcbc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2206      	movs	r2, #6
 800fb56:	751a      	strb	r2, [r3, #20]
      break;
 800fb58:	e0b0      	b.n	800fcbc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 f9ca 	bl	800fef4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fb60:	4b60      	ldr	r3, [pc, #384]	@ (800fce4 <tcp_process+0x7d8>)
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	f003 0320 	and.w	r3, r3, #32
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f000 80a9 	beq.w	800fcc0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	8b5b      	ldrh	r3, [r3, #26]
 800fb72:	f043 0302 	orr.w	r3, r3, #2
 800fb76:	b29a      	uxth	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7fe fd39 	bl	800e5f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fb82:	4b59      	ldr	r3, [pc, #356]	@ (800fce8 <tcp_process+0x7dc>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d105      	bne.n	800fb98 <tcp_process+0x68c>
 800fb8c:	4b56      	ldr	r3, [pc, #344]	@ (800fce8 <tcp_process+0x7dc>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	4a55      	ldr	r2, [pc, #340]	@ (800fce8 <tcp_process+0x7dc>)
 800fb94:	6013      	str	r3, [r2, #0]
 800fb96:	e013      	b.n	800fbc0 <tcp_process+0x6b4>
 800fb98:	4b53      	ldr	r3, [pc, #332]	@ (800fce8 <tcp_process+0x7dc>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	613b      	str	r3, [r7, #16]
 800fb9e:	e00c      	b.n	800fbba <tcp_process+0x6ae>
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d104      	bne.n	800fbb4 <tcp_process+0x6a8>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68da      	ldr	r2, [r3, #12]
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	60da      	str	r2, [r3, #12]
 800fbb2:	e005      	b.n	800fbc0 <tcp_process+0x6b4>
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	613b      	str	r3, [r7, #16]
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1ef      	bne.n	800fba0 <tcp_process+0x694>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	60da      	str	r2, [r3, #12]
 800fbc6:	4b43      	ldr	r3, [pc, #268]	@ (800fcd4 <tcp_process+0x7c8>)
 800fbc8:	2201      	movs	r2, #1
 800fbca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	220a      	movs	r2, #10
 800fbd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fbd2:	4b41      	ldr	r3, [pc, #260]	@ (800fcd8 <tcp_process+0x7cc>)
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	60da      	str	r2, [r3, #12]
 800fbda:	4a3f      	ldr	r2, [pc, #252]	@ (800fcd8 <tcp_process+0x7cc>)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6013      	str	r3, [r2, #0]
 800fbe0:	f003 f8e4 	bl	8012dac <tcp_timer_needed>
      }
      break;
 800fbe4:	e06c      	b.n	800fcc0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f984 	bl	800fef4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fbec:	4b3b      	ldr	r3, [pc, #236]	@ (800fcdc <tcp_process+0x7d0>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	f003 0310 	and.w	r3, r3, #16
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d065      	beq.n	800fcc4 <tcp_process+0x7b8>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fbfc:	4b38      	ldr	r3, [pc, #224]	@ (800fce0 <tcp_process+0x7d4>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d15f      	bne.n	800fcc4 <tcp_process+0x7b8>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d15b      	bne.n	800fcc4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7fe fcf1 	bl	800e5f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fc12:	4b35      	ldr	r3, [pc, #212]	@ (800fce8 <tcp_process+0x7dc>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d105      	bne.n	800fc28 <tcp_process+0x71c>
 800fc1c:	4b32      	ldr	r3, [pc, #200]	@ (800fce8 <tcp_process+0x7dc>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	4a31      	ldr	r2, [pc, #196]	@ (800fce8 <tcp_process+0x7dc>)
 800fc24:	6013      	str	r3, [r2, #0]
 800fc26:	e013      	b.n	800fc50 <tcp_process+0x744>
 800fc28:	4b2f      	ldr	r3, [pc, #188]	@ (800fce8 <tcp_process+0x7dc>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	60fb      	str	r3, [r7, #12]
 800fc2e:	e00c      	b.n	800fc4a <tcp_process+0x73e>
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d104      	bne.n	800fc44 <tcp_process+0x738>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	68da      	ldr	r2, [r3, #12]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	60da      	str	r2, [r3, #12]
 800fc42:	e005      	b.n	800fc50 <tcp_process+0x744>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	60fb      	str	r3, [r7, #12]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1ef      	bne.n	800fc30 <tcp_process+0x724>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	60da      	str	r2, [r3, #12]
 800fc56:	4b1f      	ldr	r3, [pc, #124]	@ (800fcd4 <tcp_process+0x7c8>)
 800fc58:	2201      	movs	r2, #1
 800fc5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	220a      	movs	r2, #10
 800fc60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fc62:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd8 <tcp_process+0x7cc>)
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	60da      	str	r2, [r3, #12]
 800fc6a:	4a1b      	ldr	r2, [pc, #108]	@ (800fcd8 <tcp_process+0x7cc>)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	f003 f89c 	bl	8012dac <tcp_timer_needed>
      }
      break;
 800fc74:	e026      	b.n	800fcc4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f93c 	bl	800fef4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fc7c:	4b17      	ldr	r3, [pc, #92]	@ (800fcdc <tcp_process+0x7d0>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 0310 	and.w	r3, r3, #16
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d01f      	beq.n	800fcc8 <tcp_process+0x7bc>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc8c:	4b14      	ldr	r3, [pc, #80]	@ (800fce0 <tcp_process+0x7d4>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d119      	bne.n	800fcc8 <tcp_process+0x7bc>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d115      	bne.n	800fcc8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fc9c:	4b11      	ldr	r3, [pc, #68]	@ (800fce4 <tcp_process+0x7d8>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f043 0310 	orr.w	r3, r3, #16
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	4b0f      	ldr	r3, [pc, #60]	@ (800fce4 <tcp_process+0x7d8>)
 800fca8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fcaa:	e00d      	b.n	800fcc8 <tcp_process+0x7bc>
    default:
      break;
 800fcac:	bf00      	nop
 800fcae:	e00c      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcb0:	bf00      	nop
 800fcb2:	e00a      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcb4:	bf00      	nop
 800fcb6:	e008      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcb8:	bf00      	nop
 800fcba:	e006      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcbc:	bf00      	nop
 800fcbe:	e004      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcc0:	bf00      	nop
 800fcc2:	e002      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcc4:	bf00      	nop
 800fcc6:	e000      	b.n	800fcca <tcp_process+0x7be>
      break;
 800fcc8:	bf00      	nop
  }
  return ERR_OK;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3724      	adds	r7, #36	@ 0x24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd90      	pop	{r4, r7, pc}
 800fcd4:	2000eb50 	.word	0x2000eb50
 800fcd8:	2000eb4c 	.word	0x2000eb4c
 800fcdc:	2000eb80 	.word	0x2000eb80
 800fce0:	2000eb78 	.word	0x2000eb78
 800fce4:	2000eb81 	.word	0x2000eb81
 800fce8:	2000eb48 	.word	0x2000eb48

0800fcec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fcec:	b590      	push	{r4, r7, lr}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d106      	bne.n	800fd0a <tcp_oos_insert_segment+0x1e>
 800fcfc:	4b3b      	ldr	r3, [pc, #236]	@ (800fdec <tcp_oos_insert_segment+0x100>)
 800fcfe:	f240 421f 	movw	r2, #1055	@ 0x41f
 800fd02:	493b      	ldr	r1, [pc, #236]	@ (800fdf0 <tcp_oos_insert_segment+0x104>)
 800fd04:	483b      	ldr	r0, [pc, #236]	@ (800fdf4 <tcp_oos_insert_segment+0x108>)
 800fd06:	f006 fa73 	bl	80161f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	899b      	ldrh	r3, [r3, #12]
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fb f90e 	bl	800af34 <lwip_htons>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	f003 0301 	and.w	r3, r3, #1
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d028      	beq.n	800fd76 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fd24:	6838      	ldr	r0, [r7, #0]
 800fd26:	f7fe f98d 	bl	800e044 <tcp_segs_free>
    next = NULL;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	603b      	str	r3, [r7, #0]
 800fd2e:	e056      	b.n	800fdde <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fb f8fb 	bl	800af34 <lwip_htons>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	f003 0301 	and.w	r3, r3, #1
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00d      	beq.n	800fd66 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	899b      	ldrh	r3, [r3, #12]
 800fd50:	b29c      	uxth	r4, r3
 800fd52:	2001      	movs	r0, #1
 800fd54:	f7fb f8ee 	bl	800af34 <lwip_htons>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	4322      	orrs	r2, r4
 800fd62:	b292      	uxth	r2, r2
 800fd64:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f7fe f97c 	bl	800e06e <tcp_seg_free>
    while (next &&
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00e      	beq.n	800fd9a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	891b      	ldrh	r3, [r3, #8]
 800fd80:	461a      	mov	r2, r3
 800fd82:	4b1d      	ldr	r3, [pc, #116]	@ (800fdf8 <tcp_oos_insert_segment+0x10c>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	441a      	add	r2, r3
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	6839      	ldr	r1, [r7, #0]
 800fd90:	8909      	ldrh	r1, [r1, #8]
 800fd92:	440b      	add	r3, r1
 800fd94:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	daca      	bge.n	800fd30 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d01e      	beq.n	800fdde <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	891b      	ldrh	r3, [r3, #8]
 800fda4:	461a      	mov	r2, r3
 800fda6:	4b14      	ldr	r3, [pc, #80]	@ (800fdf8 <tcp_oos_insert_segment+0x10c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	441a      	add	r2, r3
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dd12      	ble.n	800fdde <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf8 <tcp_oos_insert_segment+0x10c>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	685a      	ldr	r2, [r3, #4]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	891b      	ldrh	r3, [r3, #8]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4610      	mov	r0, r2
 800fdda:	f7fc fb17 	bl	800c40c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	683a      	ldr	r2, [r7, #0]
 800fde2:	601a      	str	r2, [r3, #0]
}
 800fde4:	bf00      	nop
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd90      	pop	{r4, r7, pc}
 800fdec:	08019478 	.word	0x08019478
 800fdf0:	08019738 	.word	0x08019738
 800fdf4:	080194c4 	.word	0x080194c4
 800fdf8:	2000eb74 	.word	0x2000eb74

0800fdfc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fdfc:	b5b0      	push	{r4, r5, r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]
 800fe08:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fe0a:	e03e      	b.n	800fe8a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fc fd0a 	bl	800c834 <pbuf_clen>
 800fe20:	4603      	mov	r3, r0
 800fe22:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fe2a:	8a7a      	ldrh	r2, [r7, #18]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d906      	bls.n	800fe3e <tcp_free_acked_segments+0x42>
 800fe30:	4b2a      	ldr	r3, [pc, #168]	@ (800fedc <tcp_free_acked_segments+0xe0>)
 800fe32:	f240 4257 	movw	r2, #1111	@ 0x457
 800fe36:	492a      	ldr	r1, [pc, #168]	@ (800fee0 <tcp_free_acked_segments+0xe4>)
 800fe38:	482a      	ldr	r0, [pc, #168]	@ (800fee4 <tcp_free_acked_segments+0xe8>)
 800fe3a:	f006 f9d9 	bl	80161f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800fe44:	8a7b      	ldrh	r3, [r7, #18]
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	891a      	ldrh	r2, [r3, #8]
 800fe54:	4b24      	ldr	r3, [pc, #144]	@ (800fee8 <tcp_free_acked_segments+0xec>)
 800fe56:	881b      	ldrh	r3, [r3, #0]
 800fe58:	4413      	add	r3, r2
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	4b22      	ldr	r3, [pc, #136]	@ (800fee8 <tcp_free_acked_segments+0xec>)
 800fe5e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fe60:	6978      	ldr	r0, [r7, #20]
 800fe62:	f7fe f904 	bl	800e06e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00c      	beq.n	800fe8a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d109      	bne.n	800fe8a <tcp_free_acked_segments+0x8e>
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d106      	bne.n	800fe8a <tcp_free_acked_segments+0x8e>
 800fe7c:	4b17      	ldr	r3, [pc, #92]	@ (800fedc <tcp_free_acked_segments+0xe0>)
 800fe7e:	f240 4261 	movw	r2, #1121	@ 0x461
 800fe82:	491a      	ldr	r1, [pc, #104]	@ (800feec <tcp_free_acked_segments+0xf0>)
 800fe84:	4817      	ldr	r0, [pc, #92]	@ (800fee4 <tcp_free_acked_segments+0xe8>)
 800fe86:	f006 f9b3 	bl	80161f0 <iprintf>
  while (seg_list != NULL &&
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d020      	beq.n	800fed2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fb f861 	bl	800af5e <lwip_htonl>
 800fe9c:	4604      	mov	r4, r0
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	891b      	ldrh	r3, [r3, #8]
 800fea2:	461d      	mov	r5, r3
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	899b      	ldrh	r3, [r3, #12]
 800feaa:	b29b      	uxth	r3, r3
 800feac:	4618      	mov	r0, r3
 800feae:	f7fb f841 	bl	800af34 <lwip_htons>
 800feb2:	4603      	mov	r3, r0
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	f003 0303 	and.w	r3, r3, #3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <tcp_free_acked_segments+0xc6>
 800febe:	2301      	movs	r3, #1
 800fec0:	e000      	b.n	800fec4 <tcp_free_acked_segments+0xc8>
 800fec2:	2300      	movs	r3, #0
 800fec4:	442b      	add	r3, r5
 800fec6:	18e2      	adds	r2, r4, r3
 800fec8:	4b09      	ldr	r3, [pc, #36]	@ (800fef0 <tcp_free_acked_segments+0xf4>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fece:	2b00      	cmp	r3, #0
 800fed0:	dd9c      	ble.n	800fe0c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fed2:	68bb      	ldr	r3, [r7, #8]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3718      	adds	r7, #24
 800fed8:	46bd      	mov	sp, r7
 800feda:	bdb0      	pop	{r4, r5, r7, pc}
 800fedc:	08019478 	.word	0x08019478
 800fee0:	08019760 	.word	0x08019760
 800fee4:	080194c4 	.word	0x080194c4
 800fee8:	2000eb7c 	.word	0x2000eb7c
 800feec:	08019788 	.word	0x08019788
 800fef0:	2000eb78 	.word	0x2000eb78

0800fef4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fef4:	b5b0      	push	{r4, r5, r7, lr}
 800fef6:	b094      	sub	sp, #80	@ 0x50
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fefc:	2300      	movs	r3, #0
 800fefe:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d106      	bne.n	800ff14 <tcp_receive+0x20>
 800ff06:	4b91      	ldr	r3, [pc, #580]	@ (801014c <tcp_receive+0x258>)
 800ff08:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ff0c:	4990      	ldr	r1, [pc, #576]	@ (8010150 <tcp_receive+0x25c>)
 800ff0e:	4891      	ldr	r0, [pc, #580]	@ (8010154 <tcp_receive+0x260>)
 800ff10:	f006 f96e 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	7d1b      	ldrb	r3, [r3, #20]
 800ff18:	2b03      	cmp	r3, #3
 800ff1a:	d806      	bhi.n	800ff2a <tcp_receive+0x36>
 800ff1c:	4b8b      	ldr	r3, [pc, #556]	@ (801014c <tcp_receive+0x258>)
 800ff1e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ff22:	498d      	ldr	r1, [pc, #564]	@ (8010158 <tcp_receive+0x264>)
 800ff24:	488b      	ldr	r0, [pc, #556]	@ (8010154 <tcp_receive+0x260>)
 800ff26:	f006 f963 	bl	80161f0 <iprintf>

  if (flags & TCP_ACK) {
 800ff2a:	4b8c      	ldr	r3, [pc, #560]	@ (801015c <tcp_receive+0x268>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	f003 0310 	and.w	r3, r3, #16
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 8264 	beq.w	8010400 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ff3e:	461a      	mov	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff44:	4413      	add	r3, r2
 800ff46:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff4c:	4b84      	ldr	r3, [pc, #528]	@ (8010160 <tcp_receive+0x26c>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	db1b      	blt.n	800ff8e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff5a:	4b81      	ldr	r3, [pc, #516]	@ (8010160 <tcp_receive+0x26c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d106      	bne.n	800ff70 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff66:	4b7f      	ldr	r3, [pc, #508]	@ (8010164 <tcp_receive+0x270>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	db0e      	blt.n	800ff8e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff74:	4b7b      	ldr	r3, [pc, #492]	@ (8010164 <tcp_receive+0x270>)
 800ff76:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d125      	bne.n	800ffc8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ff7c:	4b7a      	ldr	r3, [pc, #488]	@ (8010168 <tcp_receive+0x274>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	89db      	ldrh	r3, [r3, #14]
 800ff82:	b29a      	uxth	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d91c      	bls.n	800ffc8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ff8e:	4b76      	ldr	r3, [pc, #472]	@ (8010168 <tcp_receive+0x274>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	89db      	ldrh	r3, [r3, #14]
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d205      	bcs.n	800ffb8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ffb8:	4b69      	ldr	r3, [pc, #420]	@ (8010160 <tcp_receive+0x26c>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ffc0:	4b68      	ldr	r3, [pc, #416]	@ (8010164 <tcp_receive+0x270>)
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ffc8:	4b66      	ldr	r3, [pc, #408]	@ (8010164 <tcp_receive+0x270>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	dc58      	bgt.n	8010088 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ffd6:	4b65      	ldr	r3, [pc, #404]	@ (801016c <tcp_receive+0x278>)
 800ffd8:	881b      	ldrh	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d14b      	bne.n	8010076 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ffe8:	4413      	add	r3, r2
 800ffea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d142      	bne.n	8010076 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	db3d      	blt.n	8010076 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fffe:	4b59      	ldr	r3, [pc, #356]	@ (8010164 <tcp_receive+0x270>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	429a      	cmp	r2, r3
 8010004:	d137      	bne.n	8010076 <tcp_receive+0x182>
              found_dupack = 1;
 8010006:	2301      	movs	r3, #1
 8010008:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010010:	2bff      	cmp	r3, #255	@ 0xff
 8010012:	d007      	beq.n	8010024 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801001a:	3301      	adds	r3, #1
 801001c:	b2da      	uxtb	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801002a:	2b03      	cmp	r3, #3
 801002c:	d91b      	bls.n	8010066 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010038:	4413      	add	r3, r2
 801003a:	b29a      	uxth	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010042:	429a      	cmp	r2, r3
 8010044:	d30a      	bcc.n	801005c <tcp_receive+0x168>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010050:	4413      	add	r3, r2
 8010052:	b29a      	uxth	r2, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801005a:	e004      	b.n	8010066 <tcp_receive+0x172>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010062:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801006c:	2b02      	cmp	r3, #2
 801006e:	d902      	bls.n	8010076 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f002 fb3f 	bl	80126f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010078:	2b00      	cmp	r3, #0
 801007a:	f040 8161 	bne.w	8010340 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010086:	e15b      	b.n	8010340 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010088:	4b36      	ldr	r3, [pc, #216]	@ (8010164 <tcp_receive+0x270>)
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	3b01      	subs	r3, #1
 8010094:	2b00      	cmp	r3, #0
 8010096:	f2c0 814e 	blt.w	8010336 <tcp_receive+0x442>
 801009a:	4b32      	ldr	r3, [pc, #200]	@ (8010164 <tcp_receive+0x270>)
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f300 8146 	bgt.w	8010336 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	8b5b      	ldrh	r3, [r3, #26]
 80100ae:	f003 0304 	and.w	r3, r3, #4
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d010      	beq.n	80100d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	8b5b      	ldrh	r3, [r3, #26]
 80100ba:	f023 0304 	bic.w	r3, r3, #4
 80100be:	b29a      	uxth	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80100e6:	10db      	asrs	r3, r3, #3
 80100e8:	b21b      	sxth	r3, r3
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	4413      	add	r3, r2
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	b21a      	sxth	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010100:	4b18      	ldr	r3, [pc, #96]	@ (8010164 <tcp_receive+0x270>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	b29a      	uxth	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801010a:	b29b      	uxth	r3, r3
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010118:	4b12      	ldr	r3, [pc, #72]	@ (8010164 <tcp_receive+0x270>)
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	7d1b      	ldrb	r3, [r3, #20]
 8010124:	2b03      	cmp	r3, #3
 8010126:	f240 8097 	bls.w	8010258 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010136:	429a      	cmp	r2, r3
 8010138:	d245      	bcs.n	80101c6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	8b5b      	ldrh	r3, [r3, #26]
 801013e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010142:	2b00      	cmp	r3, #0
 8010144:	d014      	beq.n	8010170 <tcp_receive+0x27c>
 8010146:	2301      	movs	r3, #1
 8010148:	e013      	b.n	8010172 <tcp_receive+0x27e>
 801014a:	bf00      	nop
 801014c:	08019478 	.word	0x08019478
 8010150:	080197a8 	.word	0x080197a8
 8010154:	080194c4 	.word	0x080194c4
 8010158:	080197c4 	.word	0x080197c4
 801015c:	2000eb80 	.word	0x2000eb80
 8010160:	2000eb74 	.word	0x2000eb74
 8010164:	2000eb78 	.word	0x2000eb78
 8010168:	2000eb64 	.word	0x2000eb64
 801016c:	2000eb7e 	.word	0x2000eb7e
 8010170:	2302      	movs	r3, #2
 8010172:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010176:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801017a:	b29a      	uxth	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010180:	fb12 f303 	smulbb	r3, r2, r3
 8010184:	b29b      	uxth	r3, r3
 8010186:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010188:	4293      	cmp	r3, r2
 801018a:	bf28      	it	cs
 801018c:	4613      	movcs	r3, r2
 801018e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010196:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010198:	4413      	add	r3, r2
 801019a:	b29a      	uxth	r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d309      	bcc.n	80101ba <tcp_receive+0x2c6>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80101ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80101ae:	4413      	add	r3, r2
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80101b8:	e04e      	b.n	8010258 <tcp_receive+0x364>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80101c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80101c4:	e048      	b.n	8010258 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80101cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80101ce:	4413      	add	r3, r2
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80101d8:	429a      	cmp	r2, r3
 80101da:	d309      	bcc.n	80101f0 <tcp_receive+0x2fc>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80101e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80101e4:	4413      	add	r3, r2
 80101e6:	b29a      	uxth	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80101ee:	e004      	b.n	80101fa <tcp_receive+0x306>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80101f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010206:	429a      	cmp	r2, r3
 8010208:	d326      	bcc.n	8010258 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	b29a      	uxth	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801022a:	4413      	add	r3, r2
 801022c:	b29a      	uxth	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010234:	429a      	cmp	r2, r3
 8010236:	d30a      	bcc.n	801024e <tcp_receive+0x35a>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010242:	4413      	add	r3, r2
 8010244:	b29a      	uxth	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801024c:	e004      	b.n	8010258 <tcp_receive+0x364>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010254:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010260:	4a98      	ldr	r2, [pc, #608]	@ (80104c4 <tcp_receive+0x5d0>)
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f7ff fdca 	bl	800fdfc <tcp_free_acked_segments>
 8010268:	4602      	mov	r2, r0
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010276:	4a94      	ldr	r2, [pc, #592]	@ (80104c8 <tcp_receive+0x5d4>)
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7ff fdbf 	bl	800fdfc <tcp_free_acked_segments>
 801027e:	4602      	mov	r2, r0
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010288:	2b00      	cmp	r3, #0
 801028a:	d104      	bne.n	8010296 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010292:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010294:	e002      	b.n	801029c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d103      	bne.n	80102b2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80102b8:	4b84      	ldr	r3, [pc, #528]	@ (80104cc <tcp_receive+0x5d8>)
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	4413      	add	r3, r2
 80102be:	b29a      	uxth	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	8b5b      	ldrh	r3, [r3, #26]
 80102ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d035      	beq.n	801033e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d118      	bne.n	801030c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00c      	beq.n	80102fc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fa fe35 	bl	800af5e <lwip_htonl>
 80102f4:	4603      	mov	r3, r0
 80102f6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	dc20      	bgt.n	801033e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	8b5b      	ldrh	r3, [r3, #26]
 8010300:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010304:	b29a      	uxth	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801030a:	e018      	b.n	801033e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	4618      	mov	r0, r3
 801031a:	f7fa fe20 	bl	800af5e <lwip_htonl>
 801031e:	4603      	mov	r3, r0
 8010320:	1ae3      	subs	r3, r4, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	dc0b      	bgt.n	801033e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	8b5b      	ldrh	r3, [r3, #26]
 801032a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010334:	e003      	b.n	801033e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f002 fbc8 	bl	8012acc <tcp_send_empty_ack>
 801033c:	e000      	b.n	8010340 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801033e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010344:	2b00      	cmp	r3, #0
 8010346:	d05b      	beq.n	8010400 <tcp_receive+0x50c>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801034c:	4b60      	ldr	r3, [pc, #384]	@ (80104d0 <tcp_receive+0x5dc>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	da54      	bge.n	8010400 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010356:	4b5f      	ldr	r3, [pc, #380]	@ (80104d4 <tcp_receive+0x5e0>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	b29a      	uxth	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010360:	b29b      	uxth	r3, r3
 8010362:	1ad3      	subs	r3, r2, r3
 8010364:	b29b      	uxth	r3, r3
 8010366:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801036a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010374:	10db      	asrs	r3, r3, #3
 8010376:	b21b      	sxth	r3, r3
 8010378:	b29b      	uxth	r3, r3
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	b29b      	uxth	r3, r3
 801037e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010388:	b29a      	uxth	r2, r3
 801038a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801038e:	4413      	add	r3, r2
 8010390:	b29b      	uxth	r3, r3
 8010392:	b21a      	sxth	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010398:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801039c:	2b00      	cmp	r3, #0
 801039e:	da05      	bge.n	80103ac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80103a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80103a4:	425b      	negs	r3, r3
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80103ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80103b6:	109b      	asrs	r3, r3, #2
 80103b8:	b21b      	sxth	r3, r3
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	b29b      	uxth	r3, r3
 80103c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80103d0:	4413      	add	r3, r2
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	b21a      	sxth	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80103e0:	10db      	asrs	r3, r3, #3
 80103e2:	b21b      	sxth	r3, r3
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	4413      	add	r3, r2
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	b21a      	sxth	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010400:	4b35      	ldr	r3, [pc, #212]	@ (80104d8 <tcp_receive+0x5e4>)
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	f000 84df 	beq.w	8010dc8 <tcp_receive+0xed4>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	7d1b      	ldrb	r3, [r3, #20]
 801040e:	2b06      	cmp	r3, #6
 8010410:	f200 84da 	bhi.w	8010dc8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010418:	4b30      	ldr	r3, [pc, #192]	@ (80104dc <tcp_receive+0x5e8>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	1ad3      	subs	r3, r2, r3
 801041e:	3b01      	subs	r3, #1
 8010420:	2b00      	cmp	r3, #0
 8010422:	f2c0 808f 	blt.w	8010544 <tcp_receive+0x650>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801042a:	4b2b      	ldr	r3, [pc, #172]	@ (80104d8 <tcp_receive+0x5e4>)
 801042c:	881b      	ldrh	r3, [r3, #0]
 801042e:	4619      	mov	r1, r3
 8010430:	4b2a      	ldr	r3, [pc, #168]	@ (80104dc <tcp_receive+0x5e8>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	440b      	add	r3, r1
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	3301      	adds	r3, #1
 801043a:	2b00      	cmp	r3, #0
 801043c:	f300 8082 	bgt.w	8010544 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010440:	4b27      	ldr	r3, [pc, #156]	@ (80104e0 <tcp_receive+0x5ec>)
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801044a:	4b24      	ldr	r3, [pc, #144]	@ (80104dc <tcp_receive+0x5e8>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010452:	4b23      	ldr	r3, [pc, #140]	@ (80104e0 <tcp_receive+0x5ec>)
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d106      	bne.n	8010468 <tcp_receive+0x574>
 801045a:	4b22      	ldr	r3, [pc, #136]	@ (80104e4 <tcp_receive+0x5f0>)
 801045c:	f240 5294 	movw	r2, #1428	@ 0x594
 8010460:	4921      	ldr	r1, [pc, #132]	@ (80104e8 <tcp_receive+0x5f4>)
 8010462:	4822      	ldr	r0, [pc, #136]	@ (80104ec <tcp_receive+0x5f8>)
 8010464:	f005 fec4 	bl	80161f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801046e:	4293      	cmp	r3, r2
 8010470:	d906      	bls.n	8010480 <tcp_receive+0x58c>
 8010472:	4b1c      	ldr	r3, [pc, #112]	@ (80104e4 <tcp_receive+0x5f0>)
 8010474:	f240 5295 	movw	r2, #1429	@ 0x595
 8010478:	491d      	ldr	r1, [pc, #116]	@ (80104f0 <tcp_receive+0x5fc>)
 801047a:	481c      	ldr	r0, [pc, #112]	@ (80104ec <tcp_receive+0x5f8>)
 801047c:	f005 feb8 	bl	80161f0 <iprintf>
      off = (u16_t)off32;
 8010480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010482:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010486:	4b16      	ldr	r3, [pc, #88]	@ (80104e0 <tcp_receive+0x5ec>)
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	891b      	ldrh	r3, [r3, #8]
 801048c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010490:	429a      	cmp	r2, r3
 8010492:	d906      	bls.n	80104a2 <tcp_receive+0x5ae>
 8010494:	4b13      	ldr	r3, [pc, #76]	@ (80104e4 <tcp_receive+0x5f0>)
 8010496:	f240 5297 	movw	r2, #1431	@ 0x597
 801049a:	4916      	ldr	r1, [pc, #88]	@ (80104f4 <tcp_receive+0x600>)
 801049c:	4813      	ldr	r0, [pc, #76]	@ (80104ec <tcp_receive+0x5f8>)
 801049e:	f005 fea7 	bl	80161f0 <iprintf>
      inseg.len -= off;
 80104a2:	4b0f      	ldr	r3, [pc, #60]	@ (80104e0 <tcp_receive+0x5ec>)
 80104a4:	891a      	ldrh	r2, [r3, #8]
 80104a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	4b0c      	ldr	r3, [pc, #48]	@ (80104e0 <tcp_receive+0x5ec>)
 80104b0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80104b2:	4b0b      	ldr	r3, [pc, #44]	@ (80104e0 <tcp_receive+0x5ec>)
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	891a      	ldrh	r2, [r3, #8]
 80104b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80104c0:	e02a      	b.n	8010518 <tcp_receive+0x624>
 80104c2:	bf00      	nop
 80104c4:	080197e0 	.word	0x080197e0
 80104c8:	080197e8 	.word	0x080197e8
 80104cc:	2000eb7c 	.word	0x2000eb7c
 80104d0:	2000eb78 	.word	0x2000eb78
 80104d4:	2000eb3c 	.word	0x2000eb3c
 80104d8:	2000eb7e 	.word	0x2000eb7e
 80104dc:	2000eb74 	.word	0x2000eb74
 80104e0:	2000eb54 	.word	0x2000eb54
 80104e4:	08019478 	.word	0x08019478
 80104e8:	080197f0 	.word	0x080197f0
 80104ec:	080194c4 	.word	0x080194c4
 80104f0:	08019800 	.word	0x08019800
 80104f4:	08019810 	.word	0x08019810
        off -= p->len;
 80104f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104fa:	895b      	ldrh	r3, [r3, #10]
 80104fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010508:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801050a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801050c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801050e:	2200      	movs	r2, #0
 8010510:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801051a:	895b      	ldrh	r3, [r3, #10]
 801051c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010520:	429a      	cmp	r2, r3
 8010522:	d8e9      	bhi.n	80104f8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010528:	4619      	mov	r1, r3
 801052a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801052c:	f7fc f86e 	bl	800c60c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010534:	4a90      	ldr	r2, [pc, #576]	@ (8010778 <tcp_receive+0x884>)
 8010536:	6013      	str	r3, [r2, #0]
 8010538:	4b90      	ldr	r3, [pc, #576]	@ (801077c <tcp_receive+0x888>)
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	4a8e      	ldr	r2, [pc, #568]	@ (8010778 <tcp_receive+0x884>)
 801053e:	6812      	ldr	r2, [r2, #0]
 8010540:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010542:	e00d      	b.n	8010560 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010544:	4b8c      	ldr	r3, [pc, #560]	@ (8010778 <tcp_receive+0x884>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	da06      	bge.n	8010560 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	8b5b      	ldrh	r3, [r3, #26]
 8010556:	f043 0302 	orr.w	r3, r3, #2
 801055a:	b29a      	uxth	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010560:	4b85      	ldr	r3, [pc, #532]	@ (8010778 <tcp_receive+0x884>)
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	2b00      	cmp	r3, #0
 801056c:	f2c0 8427 	blt.w	8010dbe <tcp_receive+0xeca>
 8010570:	4b81      	ldr	r3, [pc, #516]	@ (8010778 <tcp_receive+0x884>)
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010578:	6879      	ldr	r1, [r7, #4]
 801057a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801057c:	440b      	add	r3, r1
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	3301      	adds	r3, #1
 8010582:	2b00      	cmp	r3, #0
 8010584:	f300 841b 	bgt.w	8010dbe <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801058c:	4b7a      	ldr	r3, [pc, #488]	@ (8010778 <tcp_receive+0x884>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	f040 8298 	bne.w	8010ac6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010596:	4b79      	ldr	r3, [pc, #484]	@ (801077c <tcp_receive+0x888>)
 8010598:	891c      	ldrh	r4, [r3, #8]
 801059a:	4b78      	ldr	r3, [pc, #480]	@ (801077c <tcp_receive+0x888>)
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	899b      	ldrh	r3, [r3, #12]
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fa fcc6 	bl	800af34 <lwip_htons>
 80105a8:	4603      	mov	r3, r0
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	f003 0303 	and.w	r3, r3, #3
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d001      	beq.n	80105b8 <tcp_receive+0x6c4>
 80105b4:	2301      	movs	r3, #1
 80105b6:	e000      	b.n	80105ba <tcp_receive+0x6c6>
 80105b8:	2300      	movs	r3, #0
 80105ba:	4423      	add	r3, r4
 80105bc:	b29a      	uxth	r2, r3
 80105be:	4b70      	ldr	r3, [pc, #448]	@ (8010780 <tcp_receive+0x88c>)
 80105c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80105c6:	4b6e      	ldr	r3, [pc, #440]	@ (8010780 <tcp_receive+0x88c>)
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d274      	bcs.n	80106b8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80105ce:	4b6b      	ldr	r3, [pc, #428]	@ (801077c <tcp_receive+0x888>)
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	899b      	ldrh	r3, [r3, #12]
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fa fcac 	bl	800af34 <lwip_htons>
 80105dc:	4603      	mov	r3, r0
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	f003 0301 	and.w	r3, r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d01e      	beq.n	8010626 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80105e8:	4b64      	ldr	r3, [pc, #400]	@ (801077c <tcp_receive+0x888>)
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	899b      	ldrh	r3, [r3, #12]
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	b21b      	sxth	r3, r3
 80105f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80105f6:	b21c      	sxth	r4, r3
 80105f8:	4b60      	ldr	r3, [pc, #384]	@ (801077c <tcp_receive+0x888>)
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	899b      	ldrh	r3, [r3, #12]
 80105fe:	b29b      	uxth	r3, r3
 8010600:	4618      	mov	r0, r3
 8010602:	f7fa fc97 	bl	800af34 <lwip_htons>
 8010606:	4603      	mov	r3, r0
 8010608:	b2db      	uxtb	r3, r3
 801060a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801060e:	b29b      	uxth	r3, r3
 8010610:	4618      	mov	r0, r3
 8010612:	f7fa fc8f 	bl	800af34 <lwip_htons>
 8010616:	4603      	mov	r3, r0
 8010618:	b21b      	sxth	r3, r3
 801061a:	4323      	orrs	r3, r4
 801061c:	b21a      	sxth	r2, r3
 801061e:	4b57      	ldr	r3, [pc, #348]	@ (801077c <tcp_receive+0x888>)
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	b292      	uxth	r2, r2
 8010624:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801062a:	4b54      	ldr	r3, [pc, #336]	@ (801077c <tcp_receive+0x888>)
 801062c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801062e:	4b53      	ldr	r3, [pc, #332]	@ (801077c <tcp_receive+0x888>)
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	899b      	ldrh	r3, [r3, #12]
 8010634:	b29b      	uxth	r3, r3
 8010636:	4618      	mov	r0, r3
 8010638:	f7fa fc7c 	bl	800af34 <lwip_htons>
 801063c:	4603      	mov	r3, r0
 801063e:	b2db      	uxtb	r3, r3
 8010640:	f003 0302 	and.w	r3, r3, #2
 8010644:	2b00      	cmp	r3, #0
 8010646:	d005      	beq.n	8010654 <tcp_receive+0x760>
            inseg.len -= 1;
 8010648:	4b4c      	ldr	r3, [pc, #304]	@ (801077c <tcp_receive+0x888>)
 801064a:	891b      	ldrh	r3, [r3, #8]
 801064c:	3b01      	subs	r3, #1
 801064e:	b29a      	uxth	r2, r3
 8010650:	4b4a      	ldr	r3, [pc, #296]	@ (801077c <tcp_receive+0x888>)
 8010652:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010654:	4b49      	ldr	r3, [pc, #292]	@ (801077c <tcp_receive+0x888>)
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	4a48      	ldr	r2, [pc, #288]	@ (801077c <tcp_receive+0x888>)
 801065a:	8912      	ldrh	r2, [r2, #8]
 801065c:	4611      	mov	r1, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7fb fed4 	bl	800c40c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010664:	4b45      	ldr	r3, [pc, #276]	@ (801077c <tcp_receive+0x888>)
 8010666:	891c      	ldrh	r4, [r3, #8]
 8010668:	4b44      	ldr	r3, [pc, #272]	@ (801077c <tcp_receive+0x888>)
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	899b      	ldrh	r3, [r3, #12]
 801066e:	b29b      	uxth	r3, r3
 8010670:	4618      	mov	r0, r3
 8010672:	f7fa fc5f 	bl	800af34 <lwip_htons>
 8010676:	4603      	mov	r3, r0
 8010678:	b2db      	uxtb	r3, r3
 801067a:	f003 0303 	and.w	r3, r3, #3
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <tcp_receive+0x792>
 8010682:	2301      	movs	r3, #1
 8010684:	e000      	b.n	8010688 <tcp_receive+0x794>
 8010686:	2300      	movs	r3, #0
 8010688:	4423      	add	r3, r4
 801068a:	b29a      	uxth	r2, r3
 801068c:	4b3c      	ldr	r3, [pc, #240]	@ (8010780 <tcp_receive+0x88c>)
 801068e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010690:	4b3b      	ldr	r3, [pc, #236]	@ (8010780 <tcp_receive+0x88c>)
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	4b38      	ldr	r3, [pc, #224]	@ (8010778 <tcp_receive+0x884>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	441a      	add	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106a0:	6879      	ldr	r1, [r7, #4]
 80106a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80106a4:	440b      	add	r3, r1
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d006      	beq.n	80106b8 <tcp_receive+0x7c4>
 80106aa:	4b36      	ldr	r3, [pc, #216]	@ (8010784 <tcp_receive+0x890>)
 80106ac:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80106b0:	4935      	ldr	r1, [pc, #212]	@ (8010788 <tcp_receive+0x894>)
 80106b2:	4836      	ldr	r0, [pc, #216]	@ (801078c <tcp_receive+0x898>)
 80106b4:	f005 fd9c 	bl	80161f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 80e6 	beq.w	801088e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106c2:	4b2e      	ldr	r3, [pc, #184]	@ (801077c <tcp_receive+0x888>)
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	899b      	ldrh	r3, [r3, #12]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fa fc32 	bl	800af34 <lwip_htons>
 80106d0:	4603      	mov	r3, r0
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	f003 0301 	and.w	r3, r3, #1
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d010      	beq.n	80106fe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80106dc:	e00a      	b.n	80106f4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106e2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7fd fcbd 	bl	800e06e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1f0      	bne.n	80106de <tcp_receive+0x7ea>
 80106fc:	e0c7      	b.n	801088e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010702:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010704:	e051      	b.n	80107aa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	899b      	ldrh	r3, [r3, #12]
 801070c:	b29b      	uxth	r3, r3
 801070e:	4618      	mov	r0, r3
 8010710:	f7fa fc10 	bl	800af34 <lwip_htons>
 8010714:	4603      	mov	r3, r0
 8010716:	b2db      	uxtb	r3, r3
 8010718:	f003 0301 	and.w	r3, r3, #1
 801071c:	2b00      	cmp	r3, #0
 801071e:	d03c      	beq.n	801079a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010720:	4b16      	ldr	r3, [pc, #88]	@ (801077c <tcp_receive+0x888>)
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	899b      	ldrh	r3, [r3, #12]
 8010726:	b29b      	uxth	r3, r3
 8010728:	4618      	mov	r0, r3
 801072a:	f7fa fc03 	bl	800af34 <lwip_htons>
 801072e:	4603      	mov	r3, r0
 8010730:	b2db      	uxtb	r3, r3
 8010732:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010736:	2b00      	cmp	r3, #0
 8010738:	d12f      	bne.n	801079a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801073a:	4b10      	ldr	r3, [pc, #64]	@ (801077c <tcp_receive+0x888>)
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	899b      	ldrh	r3, [r3, #12]
 8010740:	b29c      	uxth	r4, r3
 8010742:	2001      	movs	r0, #1
 8010744:	f7fa fbf6 	bl	800af34 <lwip_htons>
 8010748:	4603      	mov	r3, r0
 801074a:	461a      	mov	r2, r3
 801074c:	4b0b      	ldr	r3, [pc, #44]	@ (801077c <tcp_receive+0x888>)
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	4322      	orrs	r2, r4
 8010752:	b292      	uxth	r2, r2
 8010754:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010756:	4b09      	ldr	r3, [pc, #36]	@ (801077c <tcp_receive+0x888>)
 8010758:	891c      	ldrh	r4, [r3, #8]
 801075a:	4b08      	ldr	r3, [pc, #32]	@ (801077c <tcp_receive+0x888>)
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	899b      	ldrh	r3, [r3, #12]
 8010760:	b29b      	uxth	r3, r3
 8010762:	4618      	mov	r0, r3
 8010764:	f7fa fbe6 	bl	800af34 <lwip_htons>
 8010768:	4603      	mov	r3, r0
 801076a:	b2db      	uxtb	r3, r3
 801076c:	f003 0303 	and.w	r3, r3, #3
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00d      	beq.n	8010790 <tcp_receive+0x89c>
 8010774:	2301      	movs	r3, #1
 8010776:	e00c      	b.n	8010792 <tcp_receive+0x89e>
 8010778:	2000eb74 	.word	0x2000eb74
 801077c:	2000eb54 	.word	0x2000eb54
 8010780:	2000eb7e 	.word	0x2000eb7e
 8010784:	08019478 	.word	0x08019478
 8010788:	08019820 	.word	0x08019820
 801078c:	080194c4 	.word	0x080194c4
 8010790:	2300      	movs	r3, #0
 8010792:	4423      	add	r3, r4
 8010794:	b29a      	uxth	r2, r3
 8010796:	4b98      	ldr	r3, [pc, #608]	@ (80109f8 <tcp_receive+0xb04>)
 8010798:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801079c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801079e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80107a4:	6938      	ldr	r0, [r7, #16]
 80107a6:	f7fd fc62 	bl	800e06e <tcp_seg_free>
            while (next &&
 80107aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00e      	beq.n	80107ce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80107b0:	4b91      	ldr	r3, [pc, #580]	@ (80109f8 <tcp_receive+0xb04>)
 80107b2:	881b      	ldrh	r3, [r3, #0]
 80107b4:	461a      	mov	r2, r3
 80107b6:	4b91      	ldr	r3, [pc, #580]	@ (80109fc <tcp_receive+0xb08>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	441a      	add	r2, r3
 80107bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80107c4:	8909      	ldrh	r1, [r1, #8]
 80107c6:	440b      	add	r3, r1
 80107c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	da9b      	bge.n	8010706 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80107ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d059      	beq.n	8010888 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80107d4:	4b88      	ldr	r3, [pc, #544]	@ (80109f8 <tcp_receive+0xb04>)
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	461a      	mov	r2, r3
 80107da:	4b88      	ldr	r3, [pc, #544]	@ (80109fc <tcp_receive+0xb08>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	441a      	add	r2, r3
 80107e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	dd4d      	ble.n	8010888 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80107ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	4b81      	ldr	r3, [pc, #516]	@ (80109fc <tcp_receive+0xb08>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	4b80      	ldr	r3, [pc, #512]	@ (8010a00 <tcp_receive+0xb0c>)
 8010800:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010802:	4b7f      	ldr	r3, [pc, #508]	@ (8010a00 <tcp_receive+0xb0c>)
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	899b      	ldrh	r3, [r3, #12]
 8010808:	b29b      	uxth	r3, r3
 801080a:	4618      	mov	r0, r3
 801080c:	f7fa fb92 	bl	800af34 <lwip_htons>
 8010810:	4603      	mov	r3, r0
 8010812:	b2db      	uxtb	r3, r3
 8010814:	f003 0302 	and.w	r3, r3, #2
 8010818:	2b00      	cmp	r3, #0
 801081a:	d005      	beq.n	8010828 <tcp_receive+0x934>
                inseg.len -= 1;
 801081c:	4b78      	ldr	r3, [pc, #480]	@ (8010a00 <tcp_receive+0xb0c>)
 801081e:	891b      	ldrh	r3, [r3, #8]
 8010820:	3b01      	subs	r3, #1
 8010822:	b29a      	uxth	r2, r3
 8010824:	4b76      	ldr	r3, [pc, #472]	@ (8010a00 <tcp_receive+0xb0c>)
 8010826:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010828:	4b75      	ldr	r3, [pc, #468]	@ (8010a00 <tcp_receive+0xb0c>)
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	4a74      	ldr	r2, [pc, #464]	@ (8010a00 <tcp_receive+0xb0c>)
 801082e:	8912      	ldrh	r2, [r2, #8]
 8010830:	4611      	mov	r1, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7fb fdea 	bl	800c40c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010838:	4b71      	ldr	r3, [pc, #452]	@ (8010a00 <tcp_receive+0xb0c>)
 801083a:	891c      	ldrh	r4, [r3, #8]
 801083c:	4b70      	ldr	r3, [pc, #448]	@ (8010a00 <tcp_receive+0xb0c>)
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	899b      	ldrh	r3, [r3, #12]
 8010842:	b29b      	uxth	r3, r3
 8010844:	4618      	mov	r0, r3
 8010846:	f7fa fb75 	bl	800af34 <lwip_htons>
 801084a:	4603      	mov	r3, r0
 801084c:	b2db      	uxtb	r3, r3
 801084e:	f003 0303 	and.w	r3, r3, #3
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <tcp_receive+0x966>
 8010856:	2301      	movs	r3, #1
 8010858:	e000      	b.n	801085c <tcp_receive+0x968>
 801085a:	2300      	movs	r3, #0
 801085c:	4423      	add	r3, r4
 801085e:	b29a      	uxth	r2, r3
 8010860:	4b65      	ldr	r3, [pc, #404]	@ (80109f8 <tcp_receive+0xb04>)
 8010862:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010864:	4b64      	ldr	r3, [pc, #400]	@ (80109f8 <tcp_receive+0xb04>)
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	461a      	mov	r2, r3
 801086a:	4b64      	ldr	r3, [pc, #400]	@ (80109fc <tcp_receive+0xb08>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	441a      	add	r2, r3
 8010870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	429a      	cmp	r2, r3
 8010878:	d006      	beq.n	8010888 <tcp_receive+0x994>
 801087a:	4b62      	ldr	r3, [pc, #392]	@ (8010a04 <tcp_receive+0xb10>)
 801087c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010880:	4961      	ldr	r1, [pc, #388]	@ (8010a08 <tcp_receive+0xb14>)
 8010882:	4862      	ldr	r0, [pc, #392]	@ (8010a0c <tcp_receive+0xb18>)
 8010884:	f005 fcb4 	bl	80161f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801088c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801088e:	4b5a      	ldr	r3, [pc, #360]	@ (80109f8 <tcp_receive+0xb04>)
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	4b59      	ldr	r3, [pc, #356]	@ (80109fc <tcp_receive+0xb08>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	441a      	add	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80108a2:	4b55      	ldr	r3, [pc, #340]	@ (80109f8 <tcp_receive+0xb04>)
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d206      	bcs.n	80108b8 <tcp_receive+0x9c4>
 80108aa:	4b56      	ldr	r3, [pc, #344]	@ (8010a04 <tcp_receive+0xb10>)
 80108ac:	f240 6207 	movw	r2, #1543	@ 0x607
 80108b0:	4957      	ldr	r1, [pc, #348]	@ (8010a10 <tcp_receive+0xb1c>)
 80108b2:	4856      	ldr	r0, [pc, #344]	@ (8010a0c <tcp_receive+0xb18>)
 80108b4:	f005 fc9c 	bl	80161f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80108bc:	4b4e      	ldr	r3, [pc, #312]	@ (80109f8 <tcp_receive+0xb04>)
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f7fc fea5 	bl	800d618 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80108ce:	4b4c      	ldr	r3, [pc, #304]	@ (8010a00 <tcp_receive+0xb0c>)
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	891b      	ldrh	r3, [r3, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d006      	beq.n	80108e6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80108d8:	4b49      	ldr	r3, [pc, #292]	@ (8010a00 <tcp_receive+0xb0c>)
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	4a4d      	ldr	r2, [pc, #308]	@ (8010a14 <tcp_receive+0xb20>)
 80108de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80108e0:	4b47      	ldr	r3, [pc, #284]	@ (8010a00 <tcp_receive+0xb0c>)
 80108e2:	2200      	movs	r2, #0
 80108e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108e6:	4b46      	ldr	r3, [pc, #280]	@ (8010a00 <tcp_receive+0xb0c>)
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	899b      	ldrh	r3, [r3, #12]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fa fb20 	bl	800af34 <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	f003 0301 	and.w	r3, r3, #1
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	f000 80b8 	beq.w	8010a72 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010902:	4b45      	ldr	r3, [pc, #276]	@ (8010a18 <tcp_receive+0xb24>)
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	f043 0320 	orr.w	r3, r3, #32
 801090a:	b2da      	uxtb	r2, r3
 801090c:	4b42      	ldr	r3, [pc, #264]	@ (8010a18 <tcp_receive+0xb24>)
 801090e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010910:	e0af      	b.n	8010a72 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010916:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801091c:	68db      	ldr	r3, [r3, #12]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	4a36      	ldr	r2, [pc, #216]	@ (80109fc <tcp_receive+0xb08>)
 8010922:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	891b      	ldrh	r3, [r3, #8]
 8010928:	461c      	mov	r4, r3
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	899b      	ldrh	r3, [r3, #12]
 8010930:	b29b      	uxth	r3, r3
 8010932:	4618      	mov	r0, r3
 8010934:	f7fa fafe 	bl	800af34 <lwip_htons>
 8010938:	4603      	mov	r3, r0
 801093a:	b2db      	uxtb	r3, r3
 801093c:	f003 0303 	and.w	r3, r3, #3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d001      	beq.n	8010948 <tcp_receive+0xa54>
 8010944:	2301      	movs	r3, #1
 8010946:	e000      	b.n	801094a <tcp_receive+0xa56>
 8010948:	2300      	movs	r3, #0
 801094a:	191a      	adds	r2, r3, r4
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010950:	441a      	add	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801095a:	461c      	mov	r4, r3
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	891b      	ldrh	r3, [r3, #8]
 8010960:	461d      	mov	r5, r3
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	899b      	ldrh	r3, [r3, #12]
 8010968:	b29b      	uxth	r3, r3
 801096a:	4618      	mov	r0, r3
 801096c:	f7fa fae2 	bl	800af34 <lwip_htons>
 8010970:	4603      	mov	r3, r0
 8010972:	b2db      	uxtb	r3, r3
 8010974:	f003 0303 	and.w	r3, r3, #3
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <tcp_receive+0xa8c>
 801097c:	2301      	movs	r3, #1
 801097e:	e000      	b.n	8010982 <tcp_receive+0xa8e>
 8010980:	2300      	movs	r3, #0
 8010982:	442b      	add	r3, r5
 8010984:	429c      	cmp	r4, r3
 8010986:	d206      	bcs.n	8010996 <tcp_receive+0xaa2>
 8010988:	4b1e      	ldr	r3, [pc, #120]	@ (8010a04 <tcp_receive+0xb10>)
 801098a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801098e:	4923      	ldr	r1, [pc, #140]	@ (8010a1c <tcp_receive+0xb28>)
 8010990:	481e      	ldr	r0, [pc, #120]	@ (8010a0c <tcp_receive+0xb18>)
 8010992:	f005 fc2d 	bl	80161f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	891b      	ldrh	r3, [r3, #8]
 801099a:	461c      	mov	r4, r3
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	899b      	ldrh	r3, [r3, #12]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fa fac5 	bl	800af34 <lwip_htons>
 80109aa:	4603      	mov	r3, r0
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	f003 0303 	and.w	r3, r3, #3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d001      	beq.n	80109ba <tcp_receive+0xac6>
 80109b6:	2301      	movs	r3, #1
 80109b8:	e000      	b.n	80109bc <tcp_receive+0xac8>
 80109ba:	2300      	movs	r3, #0
 80109bc:	1919      	adds	r1, r3, r4
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80109c2:	b28b      	uxth	r3, r1
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7fc fe23 	bl	800d618 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	891b      	ldrh	r3, [r3, #8]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d028      	beq.n	8010a2e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80109dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010a14 <tcp_receive+0xb20>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d01d      	beq.n	8010a20 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80109e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010a14 <tcp_receive+0xb20>)
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	4619      	mov	r1, r3
 80109ee:	4610      	mov	r0, r2
 80109f0:	f7fb ff60 	bl	800c8b4 <pbuf_cat>
 80109f4:	e018      	b.n	8010a28 <tcp_receive+0xb34>
 80109f6:	bf00      	nop
 80109f8:	2000eb7e 	.word	0x2000eb7e
 80109fc:	2000eb74 	.word	0x2000eb74
 8010a00:	2000eb54 	.word	0x2000eb54
 8010a04:	08019478 	.word	0x08019478
 8010a08:	08019858 	.word	0x08019858
 8010a0c:	080194c4 	.word	0x080194c4
 8010a10:	08019894 	.word	0x08019894
 8010a14:	2000eb84 	.word	0x2000eb84
 8010a18:	2000eb81 	.word	0x2000eb81
 8010a1c:	080198b4 	.word	0x080198b4
            } else {
              recv_data = cseg->p;
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	4a70      	ldr	r2, [pc, #448]	@ (8010be8 <tcp_receive+0xcf4>)
 8010a26:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	899b      	ldrh	r3, [r3, #12]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fa fa7c 	bl	800af34 <lwip_htons>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d00d      	beq.n	8010a64 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010a48:	4b68      	ldr	r3, [pc, #416]	@ (8010bec <tcp_receive+0xcf8>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f043 0320 	orr.w	r3, r3, #32
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	4b66      	ldr	r3, [pc, #408]	@ (8010bec <tcp_receive+0xcf8>)
 8010a54:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	7d1b      	ldrb	r3, [r3, #20]
 8010a5a:	2b04      	cmp	r3, #4
 8010a5c:	d102      	bne.n	8010a64 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2207      	movs	r2, #7
 8010a62:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010a6c:	68b8      	ldr	r0, [r7, #8]
 8010a6e:	f7fd fafe 	bl	800e06e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d008      	beq.n	8010a8c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010a86:	429a      	cmp	r2, r3
 8010a88:	f43f af43 	beq.w	8010912 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	8b5b      	ldrh	r3, [r3, #26]
 8010a90:	f003 0301 	and.w	r3, r3, #1
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d00e      	beq.n	8010ab6 <tcp_receive+0xbc2>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	8b5b      	ldrh	r3, [r3, #26]
 8010a9c:	f023 0301 	bic.w	r3, r3, #1
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	835a      	strh	r2, [r3, #26]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	8b5b      	ldrh	r3, [r3, #26]
 8010aaa:	f043 0302 	orr.w	r3, r3, #2
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ab4:	e187      	b.n	8010dc6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	8b5b      	ldrh	r3, [r3, #26]
 8010aba:	f043 0301 	orr.w	r3, r3, #1
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ac4:	e17f      	b.n	8010dc6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d106      	bne.n	8010adc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010ace:	4848      	ldr	r0, [pc, #288]	@ (8010bf0 <tcp_receive+0xcfc>)
 8010ad0:	f7fd fae6 	bl	800e0a0 <tcp_seg_copy>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	675a      	str	r2, [r3, #116]	@ 0x74
 8010ada:	e16c      	b.n	8010db6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010adc:	2300      	movs	r3, #0
 8010ade:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ae6:	e156      	b.n	8010d96 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	4b41      	ldr	r3, [pc, #260]	@ (8010bf4 <tcp_receive+0xd00>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d11d      	bne.n	8010b32 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010af6:	4b3e      	ldr	r3, [pc, #248]	@ (8010bf0 <tcp_receive+0xcfc>)
 8010af8:	891a      	ldrh	r2, [r3, #8]
 8010afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afc:	891b      	ldrh	r3, [r3, #8]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	f240 814e 	bls.w	8010da0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b04:	483a      	ldr	r0, [pc, #232]	@ (8010bf0 <tcp_receive+0xcfc>)
 8010b06:	f7fd facb 	bl	800e0a0 <tcp_seg_copy>
 8010b0a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 8148 	beq.w	8010da4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d003      	beq.n	8010b22 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	601a      	str	r2, [r3, #0]
 8010b20:	e002      	b.n	8010b28 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010b28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010b2a:	6978      	ldr	r0, [r7, #20]
 8010b2c:	f7ff f8de 	bl	800fcec <tcp_oos_insert_segment>
                }
                break;
 8010b30:	e138      	b.n	8010da4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d117      	bne.n	8010b68 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010b38:	4b2e      	ldr	r3, [pc, #184]	@ (8010bf4 <tcp_receive+0xd00>)
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	1ad3      	subs	r3, r2, r3
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	da57      	bge.n	8010bf8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b48:	4829      	ldr	r0, [pc, #164]	@ (8010bf0 <tcp_receive+0xcfc>)
 8010b4a:	f7fd faa9 	bl	800e0a0 <tcp_seg_copy>
 8010b4e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010b50:	69bb      	ldr	r3, [r7, #24]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f000 8128 	beq.w	8010da8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010b5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010b60:	69b8      	ldr	r0, [r7, #24]
 8010b62:	f7ff f8c3 	bl	800fcec <tcp_oos_insert_segment>
                  }
                  break;
 8010b66:	e11f      	b.n	8010da8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010b68:	4b22      	ldr	r3, [pc, #136]	@ (8010bf4 <tcp_receive+0xd00>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	3b01      	subs	r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	db3e      	blt.n	8010bf8 <tcp_receive+0xd04>
 8010b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8010bf4 <tcp_receive+0xd00>)
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	3301      	adds	r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	dc35      	bgt.n	8010bf8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010b8c:	4818      	ldr	r0, [pc, #96]	@ (8010bf0 <tcp_receive+0xcfc>)
 8010b8e:	f7fd fa87 	bl	800e0a0 <tcp_seg_copy>
 8010b92:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010b94:	69fb      	ldr	r3, [r7, #28]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f000 8108 	beq.w	8010dac <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ba4:	8912      	ldrh	r2, [r2, #8]
 8010ba6:	441a      	add	r2, r3
 8010ba8:	4b12      	ldr	r3, [pc, #72]	@ (8010bf4 <tcp_receive+0xd00>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dd12      	ble.n	8010bd8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010bb2:	4b10      	ldr	r3, [pc, #64]	@ (8010bf4 <tcp_receive+0xd00>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	1ad3      	subs	r3, r2, r3
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bc6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bca:	685a      	ldr	r2, [r3, #4]
 8010bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bce:	891b      	ldrh	r3, [r3, #8]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	f7fb fc1a 	bl	800c40c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bda:	69fa      	ldr	r2, [r7, #28]
 8010bdc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010bde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010be0:	69f8      	ldr	r0, [r7, #28]
 8010be2:	f7ff f883 	bl	800fcec <tcp_oos_insert_segment>
                  }
                  break;
 8010be6:	e0e1      	b.n	8010dac <tcp_receive+0xeb8>
 8010be8:	2000eb84 	.word	0x2000eb84
 8010bec:	2000eb81 	.word	0x2000eb81
 8010bf0:	2000eb54 	.word	0x2000eb54
 8010bf4:	2000eb74 	.word	0x2000eb74
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f040 80c5 	bne.w	8010d90 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010c06:	4b7f      	ldr	r3, [pc, #508]	@ (8010e04 <tcp_receive+0xf10>)
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f340 80bc 	ble.w	8010d90 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	899b      	ldrh	r3, [r3, #12]
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fa f987 	bl	800af34 <lwip_htons>
 8010c26:	4603      	mov	r3, r0
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f040 80be 	bne.w	8010db0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010c34:	4874      	ldr	r0, [pc, #464]	@ (8010e08 <tcp_receive+0xf14>)
 8010c36:	f7fd fa33 	bl	800e0a0 <tcp_seg_copy>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f000 80b5 	beq.w	8010db4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c52:	8912      	ldrh	r2, [r2, #8]
 8010c54:	441a      	add	r2, r3
 8010c56:	4b6b      	ldr	r3, [pc, #428]	@ (8010e04 <tcp_receive+0xf10>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	dd12      	ble.n	8010c86 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010c60:	4b68      	ldr	r3, [pc, #416]	@ (8010e04 <tcp_receive+0xf10>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c74:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c78:	685a      	ldr	r2, [r3, #4]
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7c:	891b      	ldrh	r3, [r3, #8]
 8010c7e:	4619      	mov	r1, r3
 8010c80:	4610      	mov	r0, r2
 8010c82:	f7fb fbc3 	bl	800c40c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010c86:	4b61      	ldr	r3, [pc, #388]	@ (8010e0c <tcp_receive+0xf18>)
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8010e04 <tcp_receive+0xf10>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	441a      	add	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c96:	6879      	ldr	r1, [r7, #4]
 8010c98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010c9a:	440b      	add	r3, r1
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f340 8088 	ble.w	8010db4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	899b      	ldrh	r3, [r3, #12]
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fa f940 	bl	800af34 <lwip_htons>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d021      	beq.n	8010d04 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	899b      	ldrh	r3, [r3, #12]
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	b21b      	sxth	r3, r3
 8010ccc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010cd0:	b21c      	sxth	r4, r3
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fa f929 	bl	800af34 <lwip_htons>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fa f921 	bl	800af34 <lwip_htons>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	b21b      	sxth	r3, r3
 8010cf6:	4323      	orrs	r3, r4
 8010cf8:	b21a      	sxth	r2, r3
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	b292      	uxth	r2, r2
 8010d02:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d0e:	4413      	add	r3, r2
 8010d10:	b299      	uxth	r1, r3
 8010d12:	4b3c      	ldr	r3, [pc, #240]	@ (8010e04 <tcp_receive+0xf10>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	1a8a      	subs	r2, r1, r2
 8010d1e:	b292      	uxth	r2, r2
 8010d20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	685a      	ldr	r2, [r3, #4]
 8010d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	891b      	ldrh	r3, [r3, #8]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	4610      	mov	r0, r2
 8010d32:	f7fb fb6b 	bl	800c40c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	891c      	ldrh	r4, [r3, #8]
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	899b      	ldrh	r3, [r3, #12]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fa f8f4 	bl	800af34 <lwip_htons>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	f003 0303 	and.w	r3, r3, #3
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d001      	beq.n	8010d5c <tcp_receive+0xe68>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e000      	b.n	8010d5e <tcp_receive+0xe6a>
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	4423      	add	r3, r4
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	4b2a      	ldr	r3, [pc, #168]	@ (8010e0c <tcp_receive+0xf18>)
 8010d64:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d66:	4b29      	ldr	r3, [pc, #164]	@ (8010e0c <tcp_receive+0xf18>)
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	4b25      	ldr	r3, [pc, #148]	@ (8010e04 <tcp_receive+0xf10>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	441a      	add	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d76:	6879      	ldr	r1, [r7, #4]
 8010d78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d7a:	440b      	add	r3, r1
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d019      	beq.n	8010db4 <tcp_receive+0xec0>
 8010d80:	4b23      	ldr	r3, [pc, #140]	@ (8010e10 <tcp_receive+0xf1c>)
 8010d82:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8010d86:	4923      	ldr	r1, [pc, #140]	@ (8010e14 <tcp_receive+0xf20>)
 8010d88:	4823      	ldr	r0, [pc, #140]	@ (8010e18 <tcp_receive+0xf24>)
 8010d8a:	f005 fa31 	bl	80161f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010d8e:	e011      	b.n	8010db4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f47f aea5 	bne.w	8010ae8 <tcp_receive+0xbf4>
 8010d9e:	e00a      	b.n	8010db6 <tcp_receive+0xec2>
                break;
 8010da0:	bf00      	nop
 8010da2:	e008      	b.n	8010db6 <tcp_receive+0xec2>
                break;
 8010da4:	bf00      	nop
 8010da6:	e006      	b.n	8010db6 <tcp_receive+0xec2>
                  break;
 8010da8:	bf00      	nop
 8010daa:	e004      	b.n	8010db6 <tcp_receive+0xec2>
                  break;
 8010dac:	bf00      	nop
 8010dae:	e002      	b.n	8010db6 <tcp_receive+0xec2>
                  break;
 8010db0:	bf00      	nop
 8010db2:	e000      	b.n	8010db6 <tcp_receive+0xec2>
                break;
 8010db4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f001 fe88 	bl	8012acc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010dbc:	e003      	b.n	8010dc6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f001 fe84 	bl	8012acc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dc4:	e01a      	b.n	8010dfc <tcp_receive+0xf08>
 8010dc6:	e019      	b.n	8010dfc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8010e04 <tcp_receive+0xf10>)
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	db0a      	blt.n	8010dec <tcp_receive+0xef8>
 8010dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8010e04 <tcp_receive+0xf10>)
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010de2:	440b      	add	r3, r1
 8010de4:	1ad3      	subs	r3, r2, r3
 8010de6:	3301      	adds	r3, #1
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	dd07      	ble.n	8010dfc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	8b5b      	ldrh	r3, [r3, #26]
 8010df0:	f043 0302 	orr.w	r3, r3, #2
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010dfa:	e7ff      	b.n	8010dfc <tcp_receive+0xf08>
 8010dfc:	bf00      	nop
 8010dfe:	3750      	adds	r7, #80	@ 0x50
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bdb0      	pop	{r4, r5, r7, pc}
 8010e04:	2000eb74 	.word	0x2000eb74
 8010e08:	2000eb54 	.word	0x2000eb54
 8010e0c:	2000eb7e 	.word	0x2000eb7e
 8010e10:	08019478 	.word	0x08019478
 8010e14:	08019820 	.word	0x08019820
 8010e18:	080194c4 	.word	0x080194c4

08010e1c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010e22:	4b15      	ldr	r3, [pc, #84]	@ (8010e78 <tcp_get_next_optbyte+0x5c>)
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	1c5a      	adds	r2, r3, #1
 8010e28:	b291      	uxth	r1, r2
 8010e2a:	4a13      	ldr	r2, [pc, #76]	@ (8010e78 <tcp_get_next_optbyte+0x5c>)
 8010e2c:	8011      	strh	r1, [r2, #0]
 8010e2e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010e30:	4b12      	ldr	r3, [pc, #72]	@ (8010e7c <tcp_get_next_optbyte+0x60>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d004      	beq.n	8010e42 <tcp_get_next_optbyte+0x26>
 8010e38:	4b11      	ldr	r3, [pc, #68]	@ (8010e80 <tcp_get_next_optbyte+0x64>)
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	88fa      	ldrh	r2, [r7, #6]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d208      	bcs.n	8010e54 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010e42:	4b10      	ldr	r3, [pc, #64]	@ (8010e84 <tcp_get_next_optbyte+0x68>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	3314      	adds	r3, #20
 8010e48:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010e4a:	88fb      	ldrh	r3, [r7, #6]
 8010e4c:	683a      	ldr	r2, [r7, #0]
 8010e4e:	4413      	add	r3, r2
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	e00b      	b.n	8010e6c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010e54:	88fb      	ldrh	r3, [r7, #6]
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	4b09      	ldr	r3, [pc, #36]	@ (8010e80 <tcp_get_next_optbyte+0x64>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010e62:	4b06      	ldr	r3, [pc, #24]	@ (8010e7c <tcp_get_next_optbyte+0x60>)
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	797b      	ldrb	r3, [r7, #5]
 8010e68:	4413      	add	r3, r2
 8010e6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr
 8010e78:	2000eb70 	.word	0x2000eb70
 8010e7c:	2000eb6c 	.word	0x2000eb6c
 8010e80:	2000eb6a 	.word	0x2000eb6a
 8010e84:	2000eb64 	.word	0x2000eb64

08010e88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d106      	bne.n	8010ea4 <tcp_parseopt+0x1c>
 8010e96:	4b32      	ldr	r3, [pc, #200]	@ (8010f60 <tcp_parseopt+0xd8>)
 8010e98:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010e9c:	4931      	ldr	r1, [pc, #196]	@ (8010f64 <tcp_parseopt+0xdc>)
 8010e9e:	4832      	ldr	r0, [pc, #200]	@ (8010f68 <tcp_parseopt+0xe0>)
 8010ea0:	f005 f9a6 	bl	80161f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010ea4:	4b31      	ldr	r3, [pc, #196]	@ (8010f6c <tcp_parseopt+0xe4>)
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d056      	beq.n	8010f5a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010eac:	4b30      	ldr	r3, [pc, #192]	@ (8010f70 <tcp_parseopt+0xe8>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	801a      	strh	r2, [r3, #0]
 8010eb2:	e046      	b.n	8010f42 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010eb4:	f7ff ffb2 	bl	8010e1c <tcp_get_next_optbyte>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ebc:	7bfb      	ldrb	r3, [r7, #15]
 8010ebe:	2b02      	cmp	r3, #2
 8010ec0:	d006      	beq.n	8010ed0 <tcp_parseopt+0x48>
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	dc2a      	bgt.n	8010f1c <tcp_parseopt+0x94>
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d042      	beq.n	8010f50 <tcp_parseopt+0xc8>
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d038      	beq.n	8010f40 <tcp_parseopt+0xb8>
 8010ece:	e025      	b.n	8010f1c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ed0:	f7ff ffa4 	bl	8010e1c <tcp_get_next_optbyte>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b04      	cmp	r3, #4
 8010ed8:	d13c      	bne.n	8010f54 <tcp_parseopt+0xcc>
 8010eda:	4b25      	ldr	r3, [pc, #148]	@ (8010f70 <tcp_parseopt+0xe8>)
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	4a22      	ldr	r2, [pc, #136]	@ (8010f6c <tcp_parseopt+0xe4>)
 8010ee2:	8812      	ldrh	r2, [r2, #0]
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	da35      	bge.n	8010f54 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010ee8:	f7ff ff98 	bl	8010e1c <tcp_get_next_optbyte>
 8010eec:	4603      	mov	r3, r0
 8010eee:	021b      	lsls	r3, r3, #8
 8010ef0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010ef2:	f7ff ff93 	bl	8010e1c <tcp_get_next_optbyte>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	461a      	mov	r2, r3
 8010efa:	89bb      	ldrh	r3, [r7, #12]
 8010efc:	4313      	orrs	r3, r2
 8010efe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010f00:	89bb      	ldrh	r3, [r7, #12]
 8010f02:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010f06:	d804      	bhi.n	8010f12 <tcp_parseopt+0x8a>
 8010f08:	89bb      	ldrh	r3, [r7, #12]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <tcp_parseopt+0x8a>
 8010f0e:	89ba      	ldrh	r2, [r7, #12]
 8010f10:	e001      	b.n	8010f16 <tcp_parseopt+0x8e>
 8010f12:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010f1a:	e012      	b.n	8010f42 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010f1c:	f7ff ff7e 	bl	8010e1c <tcp_get_next_optbyte>
 8010f20:	4603      	mov	r3, r0
 8010f22:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010f24:	7afb      	ldrb	r3, [r7, #11]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d916      	bls.n	8010f58 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010f2a:	7afb      	ldrb	r3, [r7, #11]
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	4b10      	ldr	r3, [pc, #64]	@ (8010f70 <tcp_parseopt+0xe8>)
 8010f30:	881b      	ldrh	r3, [r3, #0]
 8010f32:	4413      	add	r3, r2
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	3b02      	subs	r3, #2
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8010f70 <tcp_parseopt+0xe8>)
 8010f3c:	801a      	strh	r2, [r3, #0]
 8010f3e:	e000      	b.n	8010f42 <tcp_parseopt+0xba>
          break;
 8010f40:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010f42:	4b0b      	ldr	r3, [pc, #44]	@ (8010f70 <tcp_parseopt+0xe8>)
 8010f44:	881a      	ldrh	r2, [r3, #0]
 8010f46:	4b09      	ldr	r3, [pc, #36]	@ (8010f6c <tcp_parseopt+0xe4>)
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d3b2      	bcc.n	8010eb4 <tcp_parseopt+0x2c>
 8010f4e:	e004      	b.n	8010f5a <tcp_parseopt+0xd2>
          return;
 8010f50:	bf00      	nop
 8010f52:	e002      	b.n	8010f5a <tcp_parseopt+0xd2>
            return;
 8010f54:	bf00      	nop
 8010f56:	e000      	b.n	8010f5a <tcp_parseopt+0xd2>
            return;
 8010f58:	bf00      	nop
      }
    }
  }
}
 8010f5a:	3710      	adds	r7, #16
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	08019478 	.word	0x08019478
 8010f64:	080198dc 	.word	0x080198dc
 8010f68:	080194c4 	.word	0x080194c4
 8010f6c:	2000eb68 	.word	0x2000eb68
 8010f70:	2000eb70 	.word	0x2000eb70

08010f74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010f74:	b480      	push	{r7}
 8010f76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010f78:	4b05      	ldr	r3, [pc, #20]	@ (8010f90 <tcp_trigger_input_pcb_close+0x1c>)
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	f043 0310 	orr.w	r3, r3, #16
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	4b03      	ldr	r3, [pc, #12]	@ (8010f90 <tcp_trigger_input_pcb_close+0x1c>)
 8010f84:	701a      	strb	r2, [r3, #0]
}
 8010f86:	bf00      	nop
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	2000eb81 	.word	0x2000eb81

08010f94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d00a      	beq.n	8010fbc <tcp_route+0x28>
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	7a1b      	ldrb	r3, [r3, #8]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d006      	beq.n	8010fbc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	7a1b      	ldrb	r3, [r3, #8]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fb f822 	bl	800bffc <netif_get_by_index>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	e003      	b.n	8010fc4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f003 fc49 	bl	8014854 <ip4_route>
 8010fc2:	4603      	mov	r3, r0
  }
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010fcc:	b590      	push	{r4, r7, lr}
 8010fce:	b087      	sub	sp, #28
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	603b      	str	r3, [r7, #0]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d105      	bne.n	8010fee <tcp_create_segment+0x22>
 8010fe2:	4b43      	ldr	r3, [pc, #268]	@ (80110f0 <tcp_create_segment+0x124>)
 8010fe4:	22a3      	movs	r2, #163	@ 0xa3
 8010fe6:	4943      	ldr	r1, [pc, #268]	@ (80110f4 <tcp_create_segment+0x128>)
 8010fe8:	4843      	ldr	r0, [pc, #268]	@ (80110f8 <tcp_create_segment+0x12c>)
 8010fea:	f005 f901 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d105      	bne.n	8011000 <tcp_create_segment+0x34>
 8010ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80110f0 <tcp_create_segment+0x124>)
 8010ff6:	22a4      	movs	r2, #164	@ 0xa4
 8010ff8:	4940      	ldr	r1, [pc, #256]	@ (80110fc <tcp_create_segment+0x130>)
 8010ffa:	483f      	ldr	r0, [pc, #252]	@ (80110f8 <tcp_create_segment+0x12c>)
 8010ffc:	f005 f8f8 	bl	80161f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011000:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	b2db      	uxtb	r3, r3
 8011008:	f003 0304 	and.w	r3, r3, #4
 801100c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801100e:	2003      	movs	r0, #3
 8011010:	f7fa fc68 	bl	800b8e4 <memp_malloc>
 8011014:	6138      	str	r0, [r7, #16]
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d104      	bne.n	8011026 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801101c:	68b8      	ldr	r0, [r7, #8]
 801101e:	f7fb fb7b 	bl	800c718 <pbuf_free>
    return NULL;
 8011022:	2300      	movs	r3, #0
 8011024:	e060      	b.n	80110e8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801102c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	2200      	movs	r2, #0
 8011032:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	68ba      	ldr	r2, [r7, #8]
 8011038:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	891a      	ldrh	r2, [r3, #8]
 801103e:	7dfb      	ldrb	r3, [r7, #23]
 8011040:	b29b      	uxth	r3, r3
 8011042:	429a      	cmp	r2, r3
 8011044:	d205      	bcs.n	8011052 <tcp_create_segment+0x86>
 8011046:	4b2a      	ldr	r3, [pc, #168]	@ (80110f0 <tcp_create_segment+0x124>)
 8011048:	22b0      	movs	r2, #176	@ 0xb0
 801104a:	492d      	ldr	r1, [pc, #180]	@ (8011100 <tcp_create_segment+0x134>)
 801104c:	482a      	ldr	r0, [pc, #168]	@ (80110f8 <tcp_create_segment+0x12c>)
 801104e:	f005 f8cf 	bl	80161f0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	891a      	ldrh	r2, [r3, #8]
 8011056:	7dfb      	ldrb	r3, [r7, #23]
 8011058:	b29b      	uxth	r3, r3
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	b29a      	uxth	r2, r3
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011062:	2114      	movs	r1, #20
 8011064:	68b8      	ldr	r0, [r7, #8]
 8011066:	f7fb fac1 	bl	800c5ec <pbuf_add_header>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d004      	beq.n	801107a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011070:	6938      	ldr	r0, [r7, #16]
 8011072:	f7fc fffc 	bl	800e06e <tcp_seg_free>
    return NULL;
 8011076:	2300      	movs	r3, #0
 8011078:	e036      	b.n	80110e8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	685a      	ldr	r2, [r3, #4]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	8ada      	ldrh	r2, [r3, #22]
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	68dc      	ldr	r4, [r3, #12]
 801108c:	4610      	mov	r0, r2
 801108e:	f7f9 ff51 	bl	800af34 <lwip_htons>
 8011092:	4603      	mov	r3, r0
 8011094:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	8b1a      	ldrh	r2, [r3, #24]
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	68dc      	ldr	r4, [r3, #12]
 801109e:	4610      	mov	r0, r2
 80110a0:	f7f9 ff48 	bl	800af34 <lwip_htons>
 80110a4:	4603      	mov	r3, r0
 80110a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	68dc      	ldr	r4, [r3, #12]
 80110ac:	6838      	ldr	r0, [r7, #0]
 80110ae:	f7f9 ff56 	bl	800af5e <lwip_htonl>
 80110b2:	4603      	mov	r3, r0
 80110b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	089b      	lsrs	r3, r3, #2
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	3305      	adds	r3, #5
 80110be:	b29b      	uxth	r3, r3
 80110c0:	031b      	lsls	r3, r3, #12
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	79fb      	ldrb	r3, [r7, #7]
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	4313      	orrs	r3, r2
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	68dc      	ldr	r4, [r3, #12]
 80110d0:	4610      	mov	r0, r2
 80110d2:	f7f9 ff2f 	bl	800af34 <lwip_htons>
 80110d6:	4603      	mov	r3, r0
 80110d8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	2200      	movs	r2, #0
 80110e0:	749a      	strb	r2, [r3, #18]
 80110e2:	2200      	movs	r2, #0
 80110e4:	74da      	strb	r2, [r3, #19]
  return seg;
 80110e6:	693b      	ldr	r3, [r7, #16]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	371c      	adds	r7, #28
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd90      	pop	{r4, r7, pc}
 80110f0:	080198f8 	.word	0x080198f8
 80110f4:	0801992c 	.word	0x0801992c
 80110f8:	0801994c 	.word	0x0801994c
 80110fc:	08019974 	.word	0x08019974
 8011100:	08019998 	.word	0x08019998

08011104 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	607b      	str	r3, [r7, #4]
 801110c:	4603      	mov	r3, r0
 801110e:	73fb      	strb	r3, [r7, #15]
 8011110:	460b      	mov	r3, r1
 8011112:	81bb      	strh	r3, [r7, #12]
 8011114:	4613      	mov	r3, r2
 8011116:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011118:	89bb      	ldrh	r3, [r7, #12]
 801111a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d105      	bne.n	801112e <tcp_pbuf_prealloc+0x2a>
 8011122:	4b30      	ldr	r3, [pc, #192]	@ (80111e4 <tcp_pbuf_prealloc+0xe0>)
 8011124:	22e8      	movs	r2, #232	@ 0xe8
 8011126:	4930      	ldr	r1, [pc, #192]	@ (80111e8 <tcp_pbuf_prealloc+0xe4>)
 8011128:	4830      	ldr	r0, [pc, #192]	@ (80111ec <tcp_pbuf_prealloc+0xe8>)
 801112a:	f005 f861 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d105      	bne.n	8011140 <tcp_pbuf_prealloc+0x3c>
 8011134:	4b2b      	ldr	r3, [pc, #172]	@ (80111e4 <tcp_pbuf_prealloc+0xe0>)
 8011136:	22e9      	movs	r2, #233	@ 0xe9
 8011138:	492d      	ldr	r1, [pc, #180]	@ (80111f0 <tcp_pbuf_prealloc+0xec>)
 801113a:	482c      	ldr	r0, [pc, #176]	@ (80111ec <tcp_pbuf_prealloc+0xe8>)
 801113c:	f005 f858 	bl	80161f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011140:	89ba      	ldrh	r2, [r7, #12]
 8011142:	897b      	ldrh	r3, [r7, #10]
 8011144:	429a      	cmp	r2, r3
 8011146:	d221      	bcs.n	801118c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011148:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801114c:	f003 0302 	and.w	r3, r3, #2
 8011150:	2b00      	cmp	r3, #0
 8011152:	d111      	bne.n	8011178 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011154:	6a3b      	ldr	r3, [r7, #32]
 8011156:	8b5b      	ldrh	r3, [r3, #26]
 8011158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801115c:	2b00      	cmp	r3, #0
 801115e:	d115      	bne.n	801118c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011160:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011164:	2b00      	cmp	r3, #0
 8011166:	d007      	beq.n	8011178 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011168:	6a3b      	ldr	r3, [r7, #32]
 801116a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801116c:	2b00      	cmp	r3, #0
 801116e:	d103      	bne.n	8011178 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011174:	2b00      	cmp	r3, #0
 8011176:	d009      	beq.n	801118c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011178:	89bb      	ldrh	r3, [r7, #12]
 801117a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801117e:	f023 0203 	bic.w	r2, r3, #3
 8011182:	897b      	ldrh	r3, [r7, #10]
 8011184:	4293      	cmp	r3, r2
 8011186:	bf28      	it	cs
 8011188:	4613      	movcs	r3, r2
 801118a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801118c:	8af9      	ldrh	r1, [r7, #22]
 801118e:	7bfb      	ldrb	r3, [r7, #15]
 8011190:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011194:	4618      	mov	r0, r3
 8011196:	f7fa ffdb 	bl	800c150 <pbuf_alloc>
 801119a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d101      	bne.n	80111a6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80111a2:	2300      	movs	r3, #0
 80111a4:	e019      	b.n	80111da <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d006      	beq.n	80111bc <tcp_pbuf_prealloc+0xb8>
 80111ae:	4b0d      	ldr	r3, [pc, #52]	@ (80111e4 <tcp_pbuf_prealloc+0xe0>)
 80111b0:	f240 120b 	movw	r2, #267	@ 0x10b
 80111b4:	490f      	ldr	r1, [pc, #60]	@ (80111f4 <tcp_pbuf_prealloc+0xf0>)
 80111b6:	480d      	ldr	r0, [pc, #52]	@ (80111ec <tcp_pbuf_prealloc+0xe8>)
 80111b8:	f005 f81a 	bl	80161f0 <iprintf>
  *oversize = p->len - length;
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	895a      	ldrh	r2, [r3, #10]
 80111c0:	89bb      	ldrh	r3, [r7, #12]
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	89ba      	ldrh	r2, [r7, #12]
 80111ce:	811a      	strh	r2, [r3, #8]
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	891a      	ldrh	r2, [r3, #8]
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	815a      	strh	r2, [r3, #10]
  return p;
 80111d8:	693b      	ldr	r3, [r7, #16]
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3718      	adds	r7, #24
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	080198f8 	.word	0x080198f8
 80111e8:	080199b0 	.word	0x080199b0
 80111ec:	0801994c 	.word	0x0801994c
 80111f0:	080199d4 	.word	0x080199d4
 80111f4:	080199f4 	.word	0x080199f4

080111f8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d106      	bne.n	8011218 <tcp_write_checks+0x20>
 801120a:	4b33      	ldr	r3, [pc, #204]	@ (80112d8 <tcp_write_checks+0xe0>)
 801120c:	f240 1233 	movw	r2, #307	@ 0x133
 8011210:	4932      	ldr	r1, [pc, #200]	@ (80112dc <tcp_write_checks+0xe4>)
 8011212:	4833      	ldr	r0, [pc, #204]	@ (80112e0 <tcp_write_checks+0xe8>)
 8011214:	f004 ffec 	bl	80161f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	7d1b      	ldrb	r3, [r3, #20]
 801121c:	2b04      	cmp	r3, #4
 801121e:	d00e      	beq.n	801123e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011224:	2b07      	cmp	r3, #7
 8011226:	d00a      	beq.n	801123e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801122c:	2b02      	cmp	r3, #2
 801122e:	d006      	beq.n	801123e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011234:	2b03      	cmp	r3, #3
 8011236:	d002      	beq.n	801123e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011238:	f06f 030a 	mvn.w	r3, #10
 801123c:	e048      	b.n	80112d0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801123e:	887b      	ldrh	r3, [r7, #2]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <tcp_write_checks+0x50>
    return ERR_OK;
 8011244:	2300      	movs	r3, #0
 8011246:	e043      	b.n	80112d0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801124e:	887a      	ldrh	r2, [r7, #2]
 8011250:	429a      	cmp	r2, r3
 8011252:	d909      	bls.n	8011268 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	8b5b      	ldrh	r3, [r3, #26]
 8011258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801125c:	b29a      	uxth	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011262:	f04f 33ff 	mov.w	r3, #4294967295
 8011266:	e033      	b.n	80112d0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801126e:	2b08      	cmp	r3, #8
 8011270:	d909      	bls.n	8011286 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	8b5b      	ldrh	r3, [r3, #26]
 8011276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801127a:	b29a      	uxth	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011280:	f04f 33ff 	mov.w	r3, #4294967295
 8011284:	e024      	b.n	80112d0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801128c:	2b00      	cmp	r3, #0
 801128e:	d00f      	beq.n	80112b0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011294:	2b00      	cmp	r3, #0
 8011296:	d11a      	bne.n	80112ce <tcp_write_checks+0xd6>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801129c:	2b00      	cmp	r3, #0
 801129e:	d116      	bne.n	80112ce <tcp_write_checks+0xd6>
 80112a0:	4b0d      	ldr	r3, [pc, #52]	@ (80112d8 <tcp_write_checks+0xe0>)
 80112a2:	f240 1255 	movw	r2, #341	@ 0x155
 80112a6:	490f      	ldr	r1, [pc, #60]	@ (80112e4 <tcp_write_checks+0xec>)
 80112a8:	480d      	ldr	r0, [pc, #52]	@ (80112e0 <tcp_write_checks+0xe8>)
 80112aa:	f004 ffa1 	bl	80161f0 <iprintf>
 80112ae:	e00e      	b.n	80112ce <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d103      	bne.n	80112c0 <tcp_write_checks+0xc8>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d006      	beq.n	80112ce <tcp_write_checks+0xd6>
 80112c0:	4b05      	ldr	r3, [pc, #20]	@ (80112d8 <tcp_write_checks+0xe0>)
 80112c2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80112c6:	4908      	ldr	r1, [pc, #32]	@ (80112e8 <tcp_write_checks+0xf0>)
 80112c8:	4805      	ldr	r0, [pc, #20]	@ (80112e0 <tcp_write_checks+0xe8>)
 80112ca:	f004 ff91 	bl	80161f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	080198f8 	.word	0x080198f8
 80112dc:	08019a08 	.word	0x08019a08
 80112e0:	0801994c 	.word	0x0801994c
 80112e4:	08019a28 	.word	0x08019a28
 80112e8:	08019a64 	.word	0x08019a64

080112ec <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80112ec:	b590      	push	{r4, r7, lr}
 80112ee:	b09b      	sub	sp, #108	@ 0x6c
 80112f0:	af04      	add	r7, sp, #16
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	4611      	mov	r1, r2
 80112f8:	461a      	mov	r2, r3
 80112fa:	460b      	mov	r3, r1
 80112fc:	80fb      	strh	r3, [r7, #6]
 80112fe:	4613      	mov	r3, r2
 8011300:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011302:	2300      	movs	r3, #0
 8011304:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011306:	2300      	movs	r3, #0
 8011308:	653b      	str	r3, [r7, #80]	@ 0x50
 801130a:	2300      	movs	r3, #0
 801130c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801130e:	2300      	movs	r3, #0
 8011310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011312:	2300      	movs	r3, #0
 8011314:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011316:	2300      	movs	r3, #0
 8011318:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011322:	2300      	movs	r3, #0
 8011324:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011326:	2300      	movs	r3, #0
 8011328:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d109      	bne.n	8011348 <tcp_write+0x5c>
 8011334:	4ba4      	ldr	r3, [pc, #656]	@ (80115c8 <tcp_write+0x2dc>)
 8011336:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801133a:	49a4      	ldr	r1, [pc, #656]	@ (80115cc <tcp_write+0x2e0>)
 801133c:	48a4      	ldr	r0, [pc, #656]	@ (80115d0 <tcp_write+0x2e4>)
 801133e:	f004 ff57 	bl	80161f0 <iprintf>
 8011342:	f06f 030f 	mvn.w	r3, #15
 8011346:	e32a      	b.n	801199e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801134e:	085b      	lsrs	r3, r3, #1
 8011350:	b29a      	uxth	r2, r3
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011356:	4293      	cmp	r3, r2
 8011358:	bf28      	it	cs
 801135a:	4613      	movcs	r3, r2
 801135c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801135e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <tcp_write+0x7e>
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011368:	e000      	b.n	801136c <tcp_write+0x80>
 801136a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801136c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d109      	bne.n	8011388 <tcp_write+0x9c>
 8011374:	4b94      	ldr	r3, [pc, #592]	@ (80115c8 <tcp_write+0x2dc>)
 8011376:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801137a:	4996      	ldr	r1, [pc, #600]	@ (80115d4 <tcp_write+0x2e8>)
 801137c:	4894      	ldr	r0, [pc, #592]	@ (80115d0 <tcp_write+0x2e4>)
 801137e:	f004 ff37 	bl	80161f0 <iprintf>
 8011382:	f06f 030f 	mvn.w	r3, #15
 8011386:	e30a      	b.n	801199e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011388:	88fb      	ldrh	r3, [r7, #6]
 801138a:	4619      	mov	r1, r3
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f7ff ff33 	bl	80111f8 <tcp_write_checks>
 8011392:	4603      	mov	r3, r0
 8011394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011398:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <tcp_write+0xba>
    return err;
 80113a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80113a4:	e2fb      	b.n	801199e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80113ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80113b0:	2300      	movs	r3, #0
 80113b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	f000 80f6 	beq.w	80115ac <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80113c6:	e002      	b.n	80113ce <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80113c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d1f8      	bne.n	80113c8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80113d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113d8:	7a9b      	ldrb	r3, [r3, #10]
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	b29b      	uxth	r3, r3
 80113de:	f003 0304 	and.w	r3, r3, #4
 80113e2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80113e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80113e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113e8:	891b      	ldrh	r3, [r3, #8]
 80113ea:	4619      	mov	r1, r3
 80113ec:	8c3b      	ldrh	r3, [r7, #32]
 80113ee:	440b      	add	r3, r1
 80113f0:	429a      	cmp	r2, r3
 80113f2:	da06      	bge.n	8011402 <tcp_write+0x116>
 80113f4:	4b74      	ldr	r3, [pc, #464]	@ (80115c8 <tcp_write+0x2dc>)
 80113f6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80113fa:	4977      	ldr	r1, [pc, #476]	@ (80115d8 <tcp_write+0x2ec>)
 80113fc:	4874      	ldr	r0, [pc, #464]	@ (80115d0 <tcp_write+0x2e4>)
 80113fe:	f004 fef7 	bl	80161f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011404:	891a      	ldrh	r2, [r3, #8]
 8011406:	8c3b      	ldrh	r3, [r7, #32]
 8011408:	4413      	add	r3, r2
 801140a:	b29b      	uxth	r3, r3
 801140c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011418:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801141a:	8a7b      	ldrh	r3, [r7, #18]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d026      	beq.n	801146e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011420:	8a7b      	ldrh	r3, [r7, #18]
 8011422:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011424:	429a      	cmp	r2, r3
 8011426:	d206      	bcs.n	8011436 <tcp_write+0x14a>
 8011428:	4b67      	ldr	r3, [pc, #412]	@ (80115c8 <tcp_write+0x2dc>)
 801142a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801142e:	496b      	ldr	r1, [pc, #428]	@ (80115dc <tcp_write+0x2f0>)
 8011430:	4867      	ldr	r0, [pc, #412]	@ (80115d0 <tcp_write+0x2e4>)
 8011432:	f004 fedd 	bl	80161f0 <iprintf>
      seg = last_unsent;
 8011436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011438:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801143a:	8a7b      	ldrh	r3, [r7, #18]
 801143c:	88fa      	ldrh	r2, [r7, #6]
 801143e:	4293      	cmp	r3, r2
 8011440:	bf28      	it	cs
 8011442:	4613      	movcs	r3, r2
 8011444:	b29b      	uxth	r3, r3
 8011446:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011448:	4293      	cmp	r3, r2
 801144a:	bf28      	it	cs
 801144c:	4613      	movcs	r3, r2
 801144e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011450:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011454:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011456:	4413      	add	r3, r2
 8011458:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801145c:	8a7a      	ldrh	r2, [r7, #18]
 801145e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	b29b      	uxth	r3, r3
 8011464:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011466:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011468:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801146e:	8a7b      	ldrh	r3, [r7, #18]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00b      	beq.n	801148c <tcp_write+0x1a0>
 8011474:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011478:	88fb      	ldrh	r3, [r7, #6]
 801147a:	429a      	cmp	r2, r3
 801147c:	d006      	beq.n	801148c <tcp_write+0x1a0>
 801147e:	4b52      	ldr	r3, [pc, #328]	@ (80115c8 <tcp_write+0x2dc>)
 8011480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011484:	4956      	ldr	r1, [pc, #344]	@ (80115e0 <tcp_write+0x2f4>)
 8011486:	4852      	ldr	r0, [pc, #328]	@ (80115d0 <tcp_write+0x2e4>)
 8011488:	f004 feb2 	bl	80161f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801148c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011490:	88fb      	ldrh	r3, [r7, #6]
 8011492:	429a      	cmp	r2, r3
 8011494:	f080 8167 	bcs.w	8011766 <tcp_write+0x47a>
 8011498:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801149a:	2b00      	cmp	r3, #0
 801149c:	f000 8163 	beq.w	8011766 <tcp_write+0x47a>
 80114a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114a2:	891b      	ldrh	r3, [r3, #8]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	f000 815e 	beq.w	8011766 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80114aa:	88fa      	ldrh	r2, [r7, #6]
 80114ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80114b0:	1ad2      	subs	r2, r2, r3
 80114b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80114b4:	4293      	cmp	r3, r2
 80114b6:	bfa8      	it	ge
 80114b8:	4613      	movge	r3, r2
 80114ba:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80114bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114be:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80114c0:	797b      	ldrb	r3, [r7, #5]
 80114c2:	f003 0301 	and.w	r3, r3, #1
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d027      	beq.n	801151a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80114ca:	f107 0012 	add.w	r0, r7, #18
 80114ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80114d0:	8bf9      	ldrh	r1, [r7, #30]
 80114d2:	2301      	movs	r3, #1
 80114d4:	9302      	str	r3, [sp, #8]
 80114d6:	797b      	ldrb	r3, [r7, #5]
 80114d8:	9301      	str	r3, [sp, #4]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	4603      	mov	r3, r0
 80114e0:	2000      	movs	r0, #0
 80114e2:	f7ff fe0f 	bl	8011104 <tcp_pbuf_prealloc>
 80114e6:	6578      	str	r0, [r7, #84]	@ 0x54
 80114e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f000 8225 	beq.w	801193a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80114f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114f2:	6858      	ldr	r0, [r3, #4]
 80114f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	4413      	add	r3, r2
 80114fc:	8bfa      	ldrh	r2, [r7, #30]
 80114fe:	4619      	mov	r1, r3
 8011500:	f004 ffe1 	bl	80164c6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011504:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011506:	f7fb f995 	bl	800c834 <pbuf_clen>
 801150a:	4603      	mov	r3, r0
 801150c:	461a      	mov	r2, r3
 801150e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011512:	4413      	add	r3, r2
 8011514:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011518:	e041      	b.n	801159e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801151a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011520:	e002      	b.n	8011528 <tcp_write+0x23c>
 8011522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	637b      	str	r3, [r7, #52]	@ 0x34
 8011528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1f8      	bne.n	8011522 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011532:	7b1b      	ldrb	r3, [r3, #12]
 8011534:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d115      	bne.n	8011568 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801153c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011542:	8952      	ldrh	r2, [r2, #10]
 8011544:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011546:	68ba      	ldr	r2, [r7, #8]
 8011548:	429a      	cmp	r2, r3
 801154a:	d10d      	bne.n	8011568 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801154c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011550:	2b00      	cmp	r3, #0
 8011552:	d006      	beq.n	8011562 <tcp_write+0x276>
 8011554:	4b1c      	ldr	r3, [pc, #112]	@ (80115c8 <tcp_write+0x2dc>)
 8011556:	f240 2231 	movw	r2, #561	@ 0x231
 801155a:	4922      	ldr	r1, [pc, #136]	@ (80115e4 <tcp_write+0x2f8>)
 801155c:	481c      	ldr	r0, [pc, #112]	@ (80115d0 <tcp_write+0x2e4>)
 801155e:	f004 fe47 	bl	80161f0 <iprintf>
          extendlen = seglen;
 8011562:	8bfb      	ldrh	r3, [r7, #30]
 8011564:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011566:	e01a      	b.n	801159e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011568:	8bfb      	ldrh	r3, [r7, #30]
 801156a:	2201      	movs	r2, #1
 801156c:	4619      	mov	r1, r3
 801156e:	2000      	movs	r0, #0
 8011570:	f7fa fdee 	bl	800c150 <pbuf_alloc>
 8011574:	6578      	str	r0, [r7, #84]	@ 0x54
 8011576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 81e0 	beq.w	801193e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801157e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	441a      	add	r2, r3
 8011586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011588:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801158a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801158c:	f7fb f952 	bl	800c834 <pbuf_clen>
 8011590:	4603      	mov	r3, r0
 8011592:	461a      	mov	r2, r3
 8011594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011598:	4413      	add	r3, r2
 801159a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801159e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80115a2:	8bfb      	ldrh	r3, [r7, #30]
 80115a4:	4413      	add	r3, r2
 80115a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80115aa:	e0dc      	b.n	8011766 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f000 80d7 	beq.w	8011766 <tcp_write+0x47a>
 80115b8:	4b03      	ldr	r3, [pc, #12]	@ (80115c8 <tcp_write+0x2dc>)
 80115ba:	f240 224a 	movw	r2, #586	@ 0x24a
 80115be:	490a      	ldr	r1, [pc, #40]	@ (80115e8 <tcp_write+0x2fc>)
 80115c0:	4803      	ldr	r0, [pc, #12]	@ (80115d0 <tcp_write+0x2e4>)
 80115c2:	f004 fe15 	bl	80161f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80115c6:	e0ce      	b.n	8011766 <tcp_write+0x47a>
 80115c8:	080198f8 	.word	0x080198f8
 80115cc:	08019a98 	.word	0x08019a98
 80115d0:	0801994c 	.word	0x0801994c
 80115d4:	08019ab0 	.word	0x08019ab0
 80115d8:	08019ae4 	.word	0x08019ae4
 80115dc:	08019afc 	.word	0x08019afc
 80115e0:	08019b1c 	.word	0x08019b1c
 80115e4:	08019b3c 	.word	0x08019b3c
 80115e8:	08019b68 	.word	0x08019b68
    struct pbuf *p;
    u16_t left = len - pos;
 80115ec:	88fa      	ldrh	r2, [r7, #6]
 80115ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80115f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80115fe:	1ad3      	subs	r3, r2, r3
 8011600:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011602:	8b7a      	ldrh	r2, [r7, #26]
 8011604:	8bbb      	ldrh	r3, [r7, #28]
 8011606:	4293      	cmp	r3, r2
 8011608:	bf28      	it	cs
 801160a:	4613      	movcs	r3, r2
 801160c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801160e:	797b      	ldrb	r3, [r7, #5]
 8011610:	f003 0301 	and.w	r3, r3, #1
 8011614:	2b00      	cmp	r3, #0
 8011616:	d036      	beq.n	8011686 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011618:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801161c:	b29a      	uxth	r2, r3
 801161e:	8b3b      	ldrh	r3, [r7, #24]
 8011620:	4413      	add	r3, r2
 8011622:	b299      	uxth	r1, r3
 8011624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011626:	2b00      	cmp	r3, #0
 8011628:	bf0c      	ite	eq
 801162a:	2301      	moveq	r3, #1
 801162c:	2300      	movne	r3, #0
 801162e:	b2db      	uxtb	r3, r3
 8011630:	f107 0012 	add.w	r0, r7, #18
 8011634:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011636:	9302      	str	r3, [sp, #8]
 8011638:	797b      	ldrb	r3, [r7, #5]
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	4603      	mov	r3, r0
 8011642:	2036      	movs	r0, #54	@ 0x36
 8011644:	f7ff fd5e 	bl	8011104 <tcp_pbuf_prealloc>
 8011648:	6338      	str	r0, [r7, #48]	@ 0x30
 801164a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801164c:	2b00      	cmp	r3, #0
 801164e:	f000 8178 	beq.w	8011942 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011654:	895b      	ldrh	r3, [r3, #10]
 8011656:	8b3a      	ldrh	r2, [r7, #24]
 8011658:	429a      	cmp	r2, r3
 801165a:	d906      	bls.n	801166a <tcp_write+0x37e>
 801165c:	4b8c      	ldr	r3, [pc, #560]	@ (8011890 <tcp_write+0x5a4>)
 801165e:	f240 2266 	movw	r2, #614	@ 0x266
 8011662:	498c      	ldr	r1, [pc, #560]	@ (8011894 <tcp_write+0x5a8>)
 8011664:	488c      	ldr	r0, [pc, #560]	@ (8011898 <tcp_write+0x5ac>)
 8011666:	f004 fdc3 	bl	80161f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801166a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801166c:	685a      	ldr	r2, [r3, #4]
 801166e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011672:	18d0      	adds	r0, r2, r3
 8011674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	4413      	add	r3, r2
 801167c:	8b3a      	ldrh	r2, [r7, #24]
 801167e:	4619      	mov	r1, r3
 8011680:	f004 ff21 	bl	80164c6 <memcpy>
 8011684:	e02f      	b.n	80116e6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011686:	8a7b      	ldrh	r3, [r7, #18]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d006      	beq.n	801169a <tcp_write+0x3ae>
 801168c:	4b80      	ldr	r3, [pc, #512]	@ (8011890 <tcp_write+0x5a4>)
 801168e:	f240 2271 	movw	r2, #625	@ 0x271
 8011692:	4982      	ldr	r1, [pc, #520]	@ (801189c <tcp_write+0x5b0>)
 8011694:	4880      	ldr	r0, [pc, #512]	@ (8011898 <tcp_write+0x5ac>)
 8011696:	f004 fdab 	bl	80161f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801169a:	8b3b      	ldrh	r3, [r7, #24]
 801169c:	2201      	movs	r2, #1
 801169e:	4619      	mov	r1, r3
 80116a0:	2036      	movs	r0, #54	@ 0x36
 80116a2:	f7fa fd55 	bl	800c150 <pbuf_alloc>
 80116a6:	6178      	str	r0, [r7, #20]
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f000 814b 	beq.w	8011946 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80116b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	441a      	add	r2, r3
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80116bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80116c6:	4619      	mov	r1, r3
 80116c8:	2036      	movs	r0, #54	@ 0x36
 80116ca:	f7fa fd41 	bl	800c150 <pbuf_alloc>
 80116ce:	6338      	str	r0, [r7, #48]	@ 0x30
 80116d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d103      	bne.n	80116de <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80116d6:	6978      	ldr	r0, [r7, #20]
 80116d8:	f7fb f81e 	bl	800c718 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80116dc:	e136      	b.n	801194c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80116de:	6979      	ldr	r1, [r7, #20]
 80116e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116e2:	f7fb f8e7 	bl	800c8b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80116e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116e8:	f7fb f8a4 	bl	800c834 <pbuf_clen>
 80116ec:	4603      	mov	r3, r0
 80116ee:	461a      	mov	r2, r3
 80116f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80116f4:	4413      	add	r3, r2
 80116f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80116fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80116fe:	2b09      	cmp	r3, #9
 8011700:	d903      	bls.n	801170a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011702:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011704:	f7fb f808 	bl	800c718 <pbuf_free>
      goto memerr;
 8011708:	e120      	b.n	801194c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801170e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011712:	441a      	add	r2, r3
 8011714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	4613      	mov	r3, r2
 801171c:	2200      	movs	r2, #0
 801171e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f7ff fc53 	bl	8010fcc <tcp_create_segment>
 8011726:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801172a:	2b00      	cmp	r3, #0
 801172c:	f000 810d 	beq.w	801194a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011732:	2b00      	cmp	r3, #0
 8011734:	d102      	bne.n	801173c <tcp_write+0x450>
      queue = seg;
 8011736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011738:	647b      	str	r3, [r7, #68]	@ 0x44
 801173a:	e00c      	b.n	8011756 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801173c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801173e:	2b00      	cmp	r3, #0
 8011740:	d106      	bne.n	8011750 <tcp_write+0x464>
 8011742:	4b53      	ldr	r3, [pc, #332]	@ (8011890 <tcp_write+0x5a4>)
 8011744:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011748:	4955      	ldr	r1, [pc, #340]	@ (80118a0 <tcp_write+0x5b4>)
 801174a:	4853      	ldr	r0, [pc, #332]	@ (8011898 <tcp_write+0x5ac>)
 801174c:	f004 fd50 	bl	80161f0 <iprintf>
      prev_seg->next = seg;
 8011750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011752:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011754:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011758:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801175a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801175e:	8b3b      	ldrh	r3, [r7, #24]
 8011760:	4413      	add	r3, r2
 8011762:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011766:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801176a:	88fb      	ldrh	r3, [r7, #6]
 801176c:	429a      	cmp	r2, r3
 801176e:	f4ff af3d 	bcc.w	80115ec <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011772:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011774:	2b00      	cmp	r3, #0
 8011776:	d02c      	beq.n	80117d2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801177e:	e01e      	b.n	80117be <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011782:	891a      	ldrh	r2, [r3, #8]
 8011784:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011786:	4413      	add	r3, r2
 8011788:	b29a      	uxth	r2, r3
 801178a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801178c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801178e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d110      	bne.n	80117b8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801179c:	8952      	ldrh	r2, [r2, #10]
 801179e:	4413      	add	r3, r2
 80117a0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80117a2:	68b9      	ldr	r1, [r7, #8]
 80117a4:	4618      	mov	r0, r3
 80117a6:	f004 fe8e 	bl	80164c6 <memcpy>
        p->len += oversize_used;
 80117aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ac:	895a      	ldrh	r2, [r3, #10]
 80117ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80117b0:	4413      	add	r3, r2
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80117b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1dd      	bne.n	8011780 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80117c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117c6:	891a      	ldrh	r2, [r3, #8]
 80117c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80117ca:	4413      	add	r3, r2
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117d0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80117d2:	8a7a      	ldrh	r2, [r7, #18]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80117da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d018      	beq.n	8011812 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80117e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d106      	bne.n	80117f4 <tcp_write+0x508>
 80117e6:	4b2a      	ldr	r3, [pc, #168]	@ (8011890 <tcp_write+0x5a4>)
 80117e8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80117ec:	492d      	ldr	r1, [pc, #180]	@ (80118a4 <tcp_write+0x5b8>)
 80117ee:	482a      	ldr	r0, [pc, #168]	@ (8011898 <tcp_write+0x5ac>)
 80117f0:	f004 fcfe 	bl	80161f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80117f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fb f85a 	bl	800c8b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011802:	891a      	ldrh	r2, [r3, #8]
 8011804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011806:	891b      	ldrh	r3, [r3, #8]
 8011808:	4413      	add	r3, r2
 801180a:	b29a      	uxth	r2, r3
 801180c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801180e:	811a      	strh	r2, [r3, #8]
 8011810:	e037      	b.n	8011882 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011812:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d034      	beq.n	8011882 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801181a:	2b00      	cmp	r3, #0
 801181c:	d003      	beq.n	8011826 <tcp_write+0x53a>
 801181e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <tcp_write+0x548>
 8011826:	4b1a      	ldr	r3, [pc, #104]	@ (8011890 <tcp_write+0x5a4>)
 8011828:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801182c:	491e      	ldr	r1, [pc, #120]	@ (80118a8 <tcp_write+0x5bc>)
 801182e:	481a      	ldr	r0, [pc, #104]	@ (8011898 <tcp_write+0x5ac>)
 8011830:	f004 fcde 	bl	80161f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	62bb      	str	r3, [r7, #40]	@ 0x28
 801183a:	e009      	b.n	8011850 <tcp_write+0x564>
      p->tot_len += extendlen;
 801183c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801183e:	891a      	ldrh	r2, [r3, #8]
 8011840:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011842:	4413      	add	r3, r2
 8011844:	b29a      	uxth	r2, r3
 8011846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011848:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1f1      	bne.n	801183c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801185a:	891a      	ldrh	r2, [r3, #8]
 801185c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801185e:	4413      	add	r3, r2
 8011860:	b29a      	uxth	r2, r3
 8011862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011864:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011868:	895a      	ldrh	r2, [r3, #10]
 801186a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801186c:	4413      	add	r3, r2
 801186e:	b29a      	uxth	r2, r3
 8011870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011872:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011876:	891a      	ldrh	r2, [r3, #8]
 8011878:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801187a:	4413      	add	r3, r2
 801187c:	b29a      	uxth	r2, r3
 801187e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011880:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011884:	2b00      	cmp	r3, #0
 8011886:	d111      	bne.n	80118ac <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801188c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801188e:	e010      	b.n	80118b2 <tcp_write+0x5c6>
 8011890:	080198f8 	.word	0x080198f8
 8011894:	08019b98 	.word	0x08019b98
 8011898:	0801994c 	.word	0x0801994c
 801189c:	08019bd8 	.word	0x08019bd8
 80118a0:	08019be8 	.word	0x08019be8
 80118a4:	08019bfc 	.word	0x08019bfc
 80118a8:	08019c34 	.word	0x08019c34
  } else {
    last_unsent->next = queue;
 80118ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80118b0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80118b6:	88fb      	ldrh	r3, [r7, #6]
 80118b8:	441a      	add	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80118c4:	88fb      	ldrh	r3, [r7, #6]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80118d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d00e      	beq.n	8011902 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10a      	bne.n	8011902 <tcp_write+0x616>
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d106      	bne.n	8011902 <tcp_write+0x616>
 80118f4:	4b2c      	ldr	r3, [pc, #176]	@ (80119a8 <tcp_write+0x6bc>)
 80118f6:	f240 3212 	movw	r2, #786	@ 0x312
 80118fa:	492c      	ldr	r1, [pc, #176]	@ (80119ac <tcp_write+0x6c0>)
 80118fc:	482c      	ldr	r0, [pc, #176]	@ (80119b0 <tcp_write+0x6c4>)
 80118fe:	f004 fc77 	bl	80161f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011904:	2b00      	cmp	r3, #0
 8011906:	d016      	beq.n	8011936 <tcp_write+0x64a>
 8011908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801190a:	68db      	ldr	r3, [r3, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d012      	beq.n	8011936 <tcp_write+0x64a>
 8011910:	797b      	ldrb	r3, [r7, #5]
 8011912:	f003 0302 	and.w	r3, r3, #2
 8011916:	2b00      	cmp	r3, #0
 8011918:	d10d      	bne.n	8011936 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801191a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	899b      	ldrh	r3, [r3, #12]
 8011920:	b29c      	uxth	r4, r3
 8011922:	2008      	movs	r0, #8
 8011924:	f7f9 fb06 	bl	800af34 <lwip_htons>
 8011928:	4603      	mov	r3, r0
 801192a:	461a      	mov	r2, r3
 801192c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	4322      	orrs	r2, r4
 8011932:	b292      	uxth	r2, r2
 8011934:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011936:	2300      	movs	r3, #0
 8011938:	e031      	b.n	801199e <tcp_write+0x6b2>
          goto memerr;
 801193a:	bf00      	nop
 801193c:	e006      	b.n	801194c <tcp_write+0x660>
            goto memerr;
 801193e:	bf00      	nop
 8011940:	e004      	b.n	801194c <tcp_write+0x660>
        goto memerr;
 8011942:	bf00      	nop
 8011944:	e002      	b.n	801194c <tcp_write+0x660>
        goto memerr;
 8011946:	bf00      	nop
 8011948:	e000      	b.n	801194c <tcp_write+0x660>
      goto memerr;
 801194a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	8b5b      	ldrh	r3, [r3, #26]
 8011950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011954:	b29a      	uxth	r2, r3
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011960:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011962:	f7fa fed9 	bl	800c718 <pbuf_free>
  }
  if (queue != NULL) {
 8011966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011968:	2b00      	cmp	r3, #0
 801196a:	d002      	beq.n	8011972 <tcp_write+0x686>
    tcp_segs_free(queue);
 801196c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801196e:	f7fc fb69 	bl	800e044 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00e      	beq.n	801199a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011980:	2b00      	cmp	r3, #0
 8011982:	d10a      	bne.n	801199a <tcp_write+0x6ae>
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011988:	2b00      	cmp	r3, #0
 801198a:	d106      	bne.n	801199a <tcp_write+0x6ae>
 801198c:	4b06      	ldr	r3, [pc, #24]	@ (80119a8 <tcp_write+0x6bc>)
 801198e:	f240 3227 	movw	r2, #807	@ 0x327
 8011992:	4906      	ldr	r1, [pc, #24]	@ (80119ac <tcp_write+0x6c0>)
 8011994:	4806      	ldr	r0, [pc, #24]	@ (80119b0 <tcp_write+0x6c4>)
 8011996:	f004 fc2b 	bl	80161f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801199a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801199e:	4618      	mov	r0, r3
 80119a0:	375c      	adds	r7, #92	@ 0x5c
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd90      	pop	{r4, r7, pc}
 80119a6:	bf00      	nop
 80119a8:	080198f8 	.word	0x080198f8
 80119ac:	08019c6c 	.word	0x08019c6c
 80119b0:	0801994c 	.word	0x0801994c

080119b4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80119b4:	b590      	push	{r4, r7, lr}
 80119b6:	b08b      	sub	sp, #44	@ 0x2c
 80119b8:	af02      	add	r7, sp, #8
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	460b      	mov	r3, r1
 80119be:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80119c0:	2300      	movs	r3, #0
 80119c2:	61fb      	str	r3, [r7, #28]
 80119c4:	2300      	movs	r3, #0
 80119c6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d106      	bne.n	80119e0 <tcp_split_unsent_seg+0x2c>
 80119d2:	4b95      	ldr	r3, [pc, #596]	@ (8011c28 <tcp_split_unsent_seg+0x274>)
 80119d4:	f240 324b 	movw	r2, #843	@ 0x34b
 80119d8:	4994      	ldr	r1, [pc, #592]	@ (8011c2c <tcp_split_unsent_seg+0x278>)
 80119da:	4895      	ldr	r0, [pc, #596]	@ (8011c30 <tcp_split_unsent_seg+0x27c>)
 80119dc:	f004 fc08 	bl	80161f0 <iprintf>

  useg = pcb->unsent;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119e4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d102      	bne.n	80119f2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80119ec:	f04f 33ff 	mov.w	r3, #4294967295
 80119f0:	e116      	b.n	8011c20 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80119f2:	887b      	ldrh	r3, [r7, #2]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d109      	bne.n	8011a0c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80119f8:	4b8b      	ldr	r3, [pc, #556]	@ (8011c28 <tcp_split_unsent_seg+0x274>)
 80119fa:	f240 3253 	movw	r2, #851	@ 0x353
 80119fe:	498d      	ldr	r1, [pc, #564]	@ (8011c34 <tcp_split_unsent_seg+0x280>)
 8011a00:	488b      	ldr	r0, [pc, #556]	@ (8011c30 <tcp_split_unsent_seg+0x27c>)
 8011a02:	f004 fbf5 	bl	80161f0 <iprintf>
    return ERR_VAL;
 8011a06:	f06f 0305 	mvn.w	r3, #5
 8011a0a:	e109      	b.n	8011c20 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	891b      	ldrh	r3, [r3, #8]
 8011a10:	887a      	ldrh	r2, [r7, #2]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d301      	bcc.n	8011a1a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011a16:	2300      	movs	r3, #0
 8011a18:	e102      	b.n	8011c20 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a1e:	887a      	ldrh	r2, [r7, #2]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d906      	bls.n	8011a32 <tcp_split_unsent_seg+0x7e>
 8011a24:	4b80      	ldr	r3, [pc, #512]	@ (8011c28 <tcp_split_unsent_seg+0x274>)
 8011a26:	f240 325b 	movw	r2, #859	@ 0x35b
 8011a2a:	4983      	ldr	r1, [pc, #524]	@ (8011c38 <tcp_split_unsent_seg+0x284>)
 8011a2c:	4880      	ldr	r0, [pc, #512]	@ (8011c30 <tcp_split_unsent_seg+0x27c>)
 8011a2e:	f004 fbdf 	bl	80161f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	891b      	ldrh	r3, [r3, #8]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <tcp_split_unsent_seg+0x94>
 8011a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8011c28 <tcp_split_unsent_seg+0x274>)
 8011a3c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011a40:	497e      	ldr	r1, [pc, #504]	@ (8011c3c <tcp_split_unsent_seg+0x288>)
 8011a42:	487b      	ldr	r0, [pc, #492]	@ (8011c30 <tcp_split_unsent_seg+0x27c>)
 8011a44:	f004 fbd4 	bl	80161f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	7a9b      	ldrb	r3, [r3, #10]
 8011a4c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a4e:	7bfb      	ldrb	r3, [r7, #15]
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	f003 0304 	and.w	r3, r3, #4
 8011a58:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	891a      	ldrh	r2, [r3, #8]
 8011a5e:	887b      	ldrh	r3, [r7, #2]
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a64:	7bbb      	ldrb	r3, [r7, #14]
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	89bb      	ldrh	r3, [r7, #12]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a72:	4619      	mov	r1, r3
 8011a74:	2036      	movs	r0, #54	@ 0x36
 8011a76:	f7fa fb6b 	bl	800c150 <pbuf_alloc>
 8011a7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f000 80b7 	beq.w	8011bf2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	891a      	ldrh	r2, [r3, #8]
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	891b      	ldrh	r3, [r3, #8]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	b29a      	uxth	r2, r3
 8011a92:	887b      	ldrh	r3, [r7, #2]
 8011a94:	4413      	add	r3, r2
 8011a96:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	6858      	ldr	r0, [r3, #4]
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	7bbb      	ldrb	r3, [r7, #14]
 8011aa2:	18d1      	adds	r1, r2, r3
 8011aa4:	897b      	ldrh	r3, [r7, #10]
 8011aa6:	89ba      	ldrh	r2, [r7, #12]
 8011aa8:	f7fb f82c 	bl	800cb04 <pbuf_copy_partial>
 8011aac:	4603      	mov	r3, r0
 8011aae:	461a      	mov	r2, r3
 8011ab0:	89bb      	ldrh	r3, [r7, #12]
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	f040 809f 	bne.w	8011bf6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	899b      	ldrh	r3, [r3, #12]
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7f9 fa37 	bl	800af34 <lwip_htons>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011ace:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011ad4:	7efb      	ldrb	r3, [r7, #27]
 8011ad6:	f003 0308 	and.w	r3, r3, #8
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d007      	beq.n	8011aee <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011ade:	7efb      	ldrb	r3, [r7, #27]
 8011ae0:	f023 0308 	bic.w	r3, r3, #8
 8011ae4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011ae6:	7ebb      	ldrb	r3, [r7, #26]
 8011ae8:	f043 0308 	orr.w	r3, r3, #8
 8011aec:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011aee:	7efb      	ldrb	r3, [r7, #27]
 8011af0:	f003 0301 	and.w	r3, r3, #1
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d007      	beq.n	8011b08 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011af8:	7efb      	ldrb	r3, [r7, #27]
 8011afa:	f023 0301 	bic.w	r3, r3, #1
 8011afe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011b00:	7ebb      	ldrb	r3, [r7, #26]
 8011b02:	f043 0301 	orr.w	r3, r3, #1
 8011b06:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7f9 fa25 	bl	800af5e <lwip_htonl>
 8011b14:	4602      	mov	r2, r0
 8011b16:	887b      	ldrh	r3, [r7, #2]
 8011b18:	18d1      	adds	r1, r2, r3
 8011b1a:	7eba      	ldrb	r2, [r7, #26]
 8011b1c:	7bfb      	ldrb	r3, [r7, #15]
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	460b      	mov	r3, r1
 8011b22:	6939      	ldr	r1, [r7, #16]
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7ff fa51 	bl	8010fcc <tcp_create_segment>
 8011b2a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d063      	beq.n	8011bfa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fa fe7c 	bl	800c834 <pbuf_clen>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	461a      	mov	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	6858      	ldr	r0, [r3, #4]
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	891a      	ldrh	r2, [r3, #8]
 8011b5a:	89bb      	ldrh	r3, [r7, #12]
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	4619      	mov	r1, r3
 8011b62:	f7fa fc53 	bl	800c40c <pbuf_realloc>
  useg->len -= remainder;
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	891a      	ldrh	r2, [r3, #8]
 8011b6a:	89bb      	ldrh	r3, [r7, #12]
 8011b6c:	1ad3      	subs	r3, r2, r3
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	68db      	ldr	r3, [r3, #12]
 8011b78:	899b      	ldrh	r3, [r3, #12]
 8011b7a:	b29c      	uxth	r4, r3
 8011b7c:	7efb      	ldrb	r3, [r7, #27]
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7f9 f9d7 	bl	800af34 <lwip_htons>
 8011b86:	4603      	mov	r3, r0
 8011b88:	461a      	mov	r2, r3
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	4322      	orrs	r2, r4
 8011b90:	b292      	uxth	r2, r2
 8011b92:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7fa fe4b 	bl	800c834 <pbuf_clen>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ba8:	4413      	add	r3, r2
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011bb2:	69fb      	ldr	r3, [r7, #28]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fa fe3c 	bl	800c834 <pbuf_clen>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011bc6:	4413      	add	r3, r2
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	69fb      	ldr	r3, [r7, #28]
 8011bd6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	69fa      	ldr	r2, [r7, #28]
 8011bdc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d103      	bne.n	8011bee <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2200      	movs	r2, #0
 8011bea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e016      	b.n	8011c20 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011bf2:	bf00      	nop
 8011bf4:	e002      	b.n	8011bfc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bf6:	bf00      	nop
 8011bf8:	e000      	b.n	8011bfc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bfa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d006      	beq.n	8011c10 <tcp_split_unsent_seg+0x25c>
 8011c02:	4b09      	ldr	r3, [pc, #36]	@ (8011c28 <tcp_split_unsent_seg+0x274>)
 8011c04:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011c08:	490d      	ldr	r1, [pc, #52]	@ (8011c40 <tcp_split_unsent_seg+0x28c>)
 8011c0a:	4809      	ldr	r0, [pc, #36]	@ (8011c30 <tcp_split_unsent_seg+0x27c>)
 8011c0c:	f004 faf0 	bl	80161f0 <iprintf>
  if (p != NULL) {
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d002      	beq.n	8011c1c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011c16:	6938      	ldr	r0, [r7, #16]
 8011c18:	f7fa fd7e 	bl	800c718 <pbuf_free>
  }

  return ERR_MEM;
 8011c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3724      	adds	r7, #36	@ 0x24
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd90      	pop	{r4, r7, pc}
 8011c28:	080198f8 	.word	0x080198f8
 8011c2c:	08019c8c 	.word	0x08019c8c
 8011c30:	0801994c 	.word	0x0801994c
 8011c34:	08019cb0 	.word	0x08019cb0
 8011c38:	08019cd4 	.word	0x08019cd4
 8011c3c:	08019ce4 	.word	0x08019ce4
 8011c40:	08019cf4 	.word	0x08019cf4

08011c44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c44:	b590      	push	{r4, r7, lr}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d106      	bne.n	8011c60 <tcp_send_fin+0x1c>
 8011c52:	4b21      	ldr	r3, [pc, #132]	@ (8011cd8 <tcp_send_fin+0x94>)
 8011c54:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011c58:	4920      	ldr	r1, [pc, #128]	@ (8011cdc <tcp_send_fin+0x98>)
 8011c5a:	4821      	ldr	r0, [pc, #132]	@ (8011ce0 <tcp_send_fin+0x9c>)
 8011c5c:	f004 fac8 	bl	80161f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d02e      	beq.n	8011cc6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c6c:	60fb      	str	r3, [r7, #12]
 8011c6e:	e002      	b.n	8011c76 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1f8      	bne.n	8011c70 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	899b      	ldrh	r3, [r3, #12]
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7f9 f954 	bl	800af34 <lwip_htons>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	f003 0307 	and.w	r3, r3, #7
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d116      	bne.n	8011cc6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	899b      	ldrh	r3, [r3, #12]
 8011c9e:	b29c      	uxth	r4, r3
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	f7f9 f947 	bl	800af34 <lwip_htons>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	461a      	mov	r2, r3
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	4322      	orrs	r2, r4
 8011cb0:	b292      	uxth	r2, r2
 8011cb2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8b5b      	ldrh	r3, [r3, #26]
 8011cb8:	f043 0320 	orr.w	r3, r3, #32
 8011cbc:	b29a      	uxth	r2, r3
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e004      	b.n	8011cd0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011cc6:	2101      	movs	r1, #1
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 f80b 	bl	8011ce4 <tcp_enqueue_flags>
 8011cce:	4603      	mov	r3, r0
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3714      	adds	r7, #20
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd90      	pop	{r4, r7, pc}
 8011cd8:	080198f8 	.word	0x080198f8
 8011cdc:	08019d00 	.word	0x08019d00
 8011ce0:	0801994c 	.word	0x0801994c

08011ce4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b08a      	sub	sp, #40	@ 0x28
 8011ce8:	af02      	add	r7, sp, #8
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	460b      	mov	r3, r1
 8011cee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011cf8:	78fb      	ldrb	r3, [r7, #3]
 8011cfa:	f003 0303 	and.w	r3, r3, #3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d106      	bne.n	8011d10 <tcp_enqueue_flags+0x2c>
 8011d02:	4b67      	ldr	r3, [pc, #412]	@ (8011ea0 <tcp_enqueue_flags+0x1bc>)
 8011d04:	f240 4211 	movw	r2, #1041	@ 0x411
 8011d08:	4966      	ldr	r1, [pc, #408]	@ (8011ea4 <tcp_enqueue_flags+0x1c0>)
 8011d0a:	4867      	ldr	r0, [pc, #412]	@ (8011ea8 <tcp_enqueue_flags+0x1c4>)
 8011d0c:	f004 fa70 	bl	80161f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d106      	bne.n	8011d24 <tcp_enqueue_flags+0x40>
 8011d16:	4b62      	ldr	r3, [pc, #392]	@ (8011ea0 <tcp_enqueue_flags+0x1bc>)
 8011d18:	f240 4213 	movw	r2, #1043	@ 0x413
 8011d1c:	4963      	ldr	r1, [pc, #396]	@ (8011eac <tcp_enqueue_flags+0x1c8>)
 8011d1e:	4862      	ldr	r0, [pc, #392]	@ (8011ea8 <tcp_enqueue_flags+0x1c4>)
 8011d20:	f004 fa66 	bl	80161f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011d24:	78fb      	ldrb	r3, [r7, #3]
 8011d26:	f003 0302 	and.w	r3, r3, #2
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d001      	beq.n	8011d32 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011d2e:	2301      	movs	r3, #1
 8011d30:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d32:	7ffb      	ldrb	r3, [r7, #31]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	f003 0304 	and.w	r3, r3, #4
 8011d3c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d46:	4619      	mov	r1, r3
 8011d48:	2036      	movs	r0, #54	@ 0x36
 8011d4a:	f7fa fa01 	bl	800c150 <pbuf_alloc>
 8011d4e:	6138      	str	r0, [r7, #16]
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d109      	bne.n	8011d6a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	8b5b      	ldrh	r3, [r3, #26]
 8011d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d64:	f04f 33ff 	mov.w	r3, #4294967295
 8011d68:	e095      	b.n	8011e96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	895a      	ldrh	r2, [r3, #10]
 8011d6e:	7dfb      	ldrb	r3, [r7, #23]
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d206      	bcs.n	8011d84 <tcp_enqueue_flags+0xa0>
 8011d76:	4b4a      	ldr	r3, [pc, #296]	@ (8011ea0 <tcp_enqueue_flags+0x1bc>)
 8011d78:	f240 4239 	movw	r2, #1081	@ 0x439
 8011d7c:	494c      	ldr	r1, [pc, #304]	@ (8011eb0 <tcp_enqueue_flags+0x1cc>)
 8011d7e:	484a      	ldr	r0, [pc, #296]	@ (8011ea8 <tcp_enqueue_flags+0x1c4>)
 8011d80:	f004 fa36 	bl	80161f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011d88:	78fa      	ldrb	r2, [r7, #3]
 8011d8a:	7ffb      	ldrb	r3, [r7, #31]
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	460b      	mov	r3, r1
 8011d90:	6939      	ldr	r1, [r7, #16]
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f7ff f91a 	bl	8010fcc <tcp_create_segment>
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d109      	bne.n	8011db4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	8b5b      	ldrh	r3, [r3, #26]
 8011da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011dae:	f04f 33ff 	mov.w	r3, #4294967295
 8011db2:	e070      	b.n	8011e96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	f003 0303 	and.w	r3, r3, #3
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d006      	beq.n	8011dce <tcp_enqueue_flags+0xea>
 8011dc0:	4b37      	ldr	r3, [pc, #220]	@ (8011ea0 <tcp_enqueue_flags+0x1bc>)
 8011dc2:	f240 4242 	movw	r2, #1090	@ 0x442
 8011dc6:	493b      	ldr	r1, [pc, #236]	@ (8011eb4 <tcp_enqueue_flags+0x1d0>)
 8011dc8:	4837      	ldr	r0, [pc, #220]	@ (8011ea8 <tcp_enqueue_flags+0x1c4>)
 8011dca:	f004 fa11 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	891b      	ldrh	r3, [r3, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d006      	beq.n	8011de4 <tcp_enqueue_flags+0x100>
 8011dd6:	4b32      	ldr	r3, [pc, #200]	@ (8011ea0 <tcp_enqueue_flags+0x1bc>)
 8011dd8:	f240 4243 	movw	r2, #1091	@ 0x443
 8011ddc:	4936      	ldr	r1, [pc, #216]	@ (8011eb8 <tcp_enqueue_flags+0x1d4>)
 8011dde:	4832      	ldr	r0, [pc, #200]	@ (8011ea8 <tcp_enqueue_flags+0x1c4>)
 8011de0:	f004 fa06 	bl	80161f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	68fa      	ldr	r2, [r7, #12]
 8011df0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011df2:	e00d      	b.n	8011e10 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011df8:	61bb      	str	r3, [r7, #24]
 8011dfa:	e002      	b.n	8011e02 <tcp_enqueue_flags+0x11e>
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	61bb      	str	r3, [r7, #24]
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1f8      	bne.n	8011dfc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e18:	78fb      	ldrb	r3, [r7, #3]
 8011e1a:	f003 0302 	and.w	r3, r3, #2
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d104      	bne.n	8011e2c <tcp_enqueue_flags+0x148>
 8011e22:	78fb      	ldrb	r3, [r7, #3]
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d004      	beq.n	8011e36 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e30:	1c5a      	adds	r2, r3, #1
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e36:	78fb      	ldrb	r3, [r7, #3]
 8011e38:	f003 0301 	and.w	r3, r3, #1
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d006      	beq.n	8011e4e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8b5b      	ldrh	r3, [r3, #26]
 8011e44:	f043 0320 	orr.w	r3, r3, #32
 8011e48:	b29a      	uxth	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fa fcee 	bl	800c834 <pbuf_clen>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e62:	4413      	add	r3, r2
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00e      	beq.n	8011e94 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d10a      	bne.n	8011e94 <tcp_enqueue_flags+0x1b0>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d106      	bne.n	8011e94 <tcp_enqueue_flags+0x1b0>
 8011e86:	4b06      	ldr	r3, [pc, #24]	@ (8011ea0 <tcp_enqueue_flags+0x1bc>)
 8011e88:	f240 4265 	movw	r2, #1125	@ 0x465
 8011e8c:	490b      	ldr	r1, [pc, #44]	@ (8011ebc <tcp_enqueue_flags+0x1d8>)
 8011e8e:	4806      	ldr	r0, [pc, #24]	@ (8011ea8 <tcp_enqueue_flags+0x1c4>)
 8011e90:	f004 f9ae 	bl	80161f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011e94:	2300      	movs	r3, #0
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3720      	adds	r7, #32
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	080198f8 	.word	0x080198f8
 8011ea4:	08019d1c 	.word	0x08019d1c
 8011ea8:	0801994c 	.word	0x0801994c
 8011eac:	08019d74 	.word	0x08019d74
 8011eb0:	08019d94 	.word	0x08019d94
 8011eb4:	08019dd0 	.word	0x08019dd0
 8011eb8:	08019de8 	.word	0x08019de8
 8011ebc:	08019e14 	.word	0x08019e14

08011ec0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ec0:	b5b0      	push	{r4, r5, r7, lr}
 8011ec2:	b08a      	sub	sp, #40	@ 0x28
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d106      	bne.n	8011edc <tcp_output+0x1c>
 8011ece:	4b8a      	ldr	r3, [pc, #552]	@ (80120f8 <tcp_output+0x238>)
 8011ed0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011ed4:	4989      	ldr	r1, [pc, #548]	@ (80120fc <tcp_output+0x23c>)
 8011ed6:	488a      	ldr	r0, [pc, #552]	@ (8012100 <tcp_output+0x240>)
 8011ed8:	f004 f98a 	bl	80161f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	7d1b      	ldrb	r3, [r3, #20]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d106      	bne.n	8011ef2 <tcp_output+0x32>
 8011ee4:	4b84      	ldr	r3, [pc, #528]	@ (80120f8 <tcp_output+0x238>)
 8011ee6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011eea:	4986      	ldr	r1, [pc, #536]	@ (8012104 <tcp_output+0x244>)
 8011eec:	4884      	ldr	r0, [pc, #528]	@ (8012100 <tcp_output+0x240>)
 8011eee:	f004 f97f 	bl	80161f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ef2:	4b85      	ldr	r3, [pc, #532]	@ (8012108 <tcp_output+0x248>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d101      	bne.n	8011f00 <tcp_output+0x40>
    return ERR_OK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	e1ce      	b.n	801229e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	bf28      	it	cs
 8011f10:	4613      	movcs	r3, r2
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d10b      	bne.n	8011f3a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8b5b      	ldrh	r3, [r3, #26]
 8011f26:	f003 0302 	and.w	r3, r3, #2
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 81aa 	beq.w	8012284 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 fdcb 	bl	8012acc <tcp_send_empty_ack>
 8011f36:	4603      	mov	r3, r0
 8011f38:	e1b1      	b.n	801229e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f3a:	6879      	ldr	r1, [r7, #4]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	3304      	adds	r3, #4
 8011f40:	461a      	mov	r2, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff f826 	bl	8010f94 <tcp_route>
 8011f48:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d102      	bne.n	8011f56 <tcp_output+0x96>
    return ERR_RTE;
 8011f50:	f06f 0303 	mvn.w	r3, #3
 8011f54:	e1a3      	b.n	801229e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d003      	beq.n	8011f64 <tcp_output+0xa4>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d111      	bne.n	8011f88 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d002      	beq.n	8011f70 <tcp_output+0xb0>
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	e000      	b.n	8011f72 <tcp_output+0xb2>
 8011f70:	2300      	movs	r3, #0
 8011f72:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d102      	bne.n	8011f80 <tcp_output+0xc0>
      return ERR_RTE;
 8011f7a:	f06f 0303 	mvn.w	r3, #3
 8011f7e:	e18e      	b.n	801229e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	681a      	ldr	r2, [r3, #0]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7f8 ffe5 	bl	800af5e <lwip_htonl>
 8011f94:	4602      	mov	r2, r0
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f9a:	1ad3      	subs	r3, r2, r3
 8011f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f9e:	8912      	ldrh	r2, [r2, #8]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	69ba      	ldr	r2, [r7, #24]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d227      	bcs.n	8011ff8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011fae:	461a      	mov	r2, r3
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	d114      	bne.n	8011fe0 <tcp_output+0x120>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d110      	bne.n	8011fe0 <tcp_output+0x120>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10b      	bne.n	8011fe0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	8b5b      	ldrh	r3, [r3, #26]
 8011fe4:	f003 0302 	and.w	r3, r3, #2
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 814d 	beq.w	8012288 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 fd6c 	bl	8012acc <tcp_send_empty_ack>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	e152      	b.n	801229e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012004:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012006:	6a3b      	ldr	r3, [r7, #32]
 8012008:	2b00      	cmp	r3, #0
 801200a:	f000 811c 	beq.w	8012246 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801200e:	e002      	b.n	8012016 <tcp_output+0x156>
 8012010:	6a3b      	ldr	r3, [r7, #32]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	623b      	str	r3, [r7, #32]
 8012016:	6a3b      	ldr	r3, [r7, #32]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d1f8      	bne.n	8012010 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801201e:	e112      	b.n	8012246 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	899b      	ldrh	r3, [r3, #12]
 8012026:	b29b      	uxth	r3, r3
 8012028:	4618      	mov	r0, r3
 801202a:	f7f8 ff83 	bl	800af34 <lwip_htons>
 801202e:	4603      	mov	r3, r0
 8012030:	b2db      	uxtb	r3, r3
 8012032:	f003 0304 	and.w	r3, r3, #4
 8012036:	2b00      	cmp	r3, #0
 8012038:	d006      	beq.n	8012048 <tcp_output+0x188>
 801203a:	4b2f      	ldr	r3, [pc, #188]	@ (80120f8 <tcp_output+0x238>)
 801203c:	f240 5236 	movw	r2, #1334	@ 0x536
 8012040:	4932      	ldr	r1, [pc, #200]	@ (801210c <tcp_output+0x24c>)
 8012042:	482f      	ldr	r0, [pc, #188]	@ (8012100 <tcp_output+0x240>)
 8012044:	f004 f8d4 	bl	80161f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801204c:	2b00      	cmp	r3, #0
 801204e:	d01f      	beq.n	8012090 <tcp_output+0x1d0>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	8b5b      	ldrh	r3, [r3, #26]
 8012054:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012058:	2b00      	cmp	r3, #0
 801205a:	d119      	bne.n	8012090 <tcp_output+0x1d0>
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d00b      	beq.n	801207c <tcp_output+0x1bc>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d110      	bne.n	8012090 <tcp_output+0x1d0>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012072:	891a      	ldrh	r2, [r3, #8]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012078:	429a      	cmp	r2, r3
 801207a:	d209      	bcs.n	8012090 <tcp_output+0x1d0>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012082:	2b00      	cmp	r3, #0
 8012084:	d004      	beq.n	8012090 <tcp_output+0x1d0>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801208c:	2b08      	cmp	r3, #8
 801208e:	d901      	bls.n	8012094 <tcp_output+0x1d4>
 8012090:	2301      	movs	r3, #1
 8012092:	e000      	b.n	8012096 <tcp_output+0x1d6>
 8012094:	2300      	movs	r3, #0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	8b5b      	ldrh	r3, [r3, #26]
 801209e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f000 80e4 	beq.w	8012270 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	7d1b      	ldrb	r3, [r3, #20]
 80120ac:	2b02      	cmp	r3, #2
 80120ae:	d00d      	beq.n	80120cc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80120b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	899b      	ldrh	r3, [r3, #12]
 80120b6:	b29c      	uxth	r4, r3
 80120b8:	2010      	movs	r0, #16
 80120ba:	f7f8 ff3b 	bl	800af34 <lwip_htons>
 80120be:	4603      	mov	r3, r0
 80120c0:	461a      	mov	r2, r3
 80120c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	4322      	orrs	r2, r4
 80120c8:	b292      	uxth	r2, r2
 80120ca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80120cc:	697a      	ldr	r2, [r7, #20]
 80120ce:	6879      	ldr	r1, [r7, #4]
 80120d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120d2:	f000 f909 	bl	80122e8 <tcp_output_segment>
 80120d6:	4603      	mov	r3, r0
 80120d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80120da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d016      	beq.n	8012110 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	8b5b      	ldrh	r3, [r3, #26]
 80120e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	835a      	strh	r2, [r3, #26]
      return err;
 80120f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120f4:	e0d3      	b.n	801229e <tcp_output+0x3de>
 80120f6:	bf00      	nop
 80120f8:	080198f8 	.word	0x080198f8
 80120fc:	08019e3c 	.word	0x08019e3c
 8012100:	0801994c 	.word	0x0801994c
 8012104:	08019e54 	.word	0x08019e54
 8012108:	2000eb88 	.word	0x2000eb88
 801210c:	08019e7c 	.word	0x08019e7c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	7d1b      	ldrb	r3, [r3, #20]
 801211c:	2b02      	cmp	r3, #2
 801211e:	d006      	beq.n	801212e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	8b5b      	ldrh	r3, [r3, #26]
 8012124:	f023 0303 	bic.w	r3, r3, #3
 8012128:	b29a      	uxth	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	f7f8 ff12 	bl	800af5e <lwip_htonl>
 801213a:	4604      	mov	r4, r0
 801213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213e:	891b      	ldrh	r3, [r3, #8]
 8012140:	461d      	mov	r5, r3
 8012142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	899b      	ldrh	r3, [r3, #12]
 8012148:	b29b      	uxth	r3, r3
 801214a:	4618      	mov	r0, r3
 801214c:	f7f8 fef2 	bl	800af34 <lwip_htons>
 8012150:	4603      	mov	r3, r0
 8012152:	b2db      	uxtb	r3, r3
 8012154:	f003 0303 	and.w	r3, r3, #3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d001      	beq.n	8012160 <tcp_output+0x2a0>
 801215c:	2301      	movs	r3, #1
 801215e:	e000      	b.n	8012162 <tcp_output+0x2a2>
 8012160:	2300      	movs	r3, #0
 8012162:	442b      	add	r3, r5
 8012164:	4423      	add	r3, r4
 8012166:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	1ad3      	subs	r3, r2, r3
 8012170:	2b00      	cmp	r3, #0
 8012172:	da02      	bge.n	801217a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	68ba      	ldr	r2, [r7, #8]
 8012178:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217c:	891b      	ldrh	r3, [r3, #8]
 801217e:	461c      	mov	r4, r3
 8012180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	899b      	ldrh	r3, [r3, #12]
 8012186:	b29b      	uxth	r3, r3
 8012188:	4618      	mov	r0, r3
 801218a:	f7f8 fed3 	bl	800af34 <lwip_htons>
 801218e:	4603      	mov	r3, r0
 8012190:	b2db      	uxtb	r3, r3
 8012192:	f003 0303 	and.w	r3, r3, #3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <tcp_output+0x2de>
 801219a:	2301      	movs	r3, #1
 801219c:	e000      	b.n	80121a0 <tcp_output+0x2e0>
 801219e:	2300      	movs	r3, #0
 80121a0:	4423      	add	r3, r4
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d049      	beq.n	801223a <tcp_output+0x37a>
      seg->next = NULL;
 80121a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a8:	2200      	movs	r2, #0
 80121aa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d105      	bne.n	80121c0 <tcp_output+0x300>
        pcb->unacked = seg;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121b8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80121ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121bc:	623b      	str	r3, [r7, #32]
 80121be:	e03f      	b.n	8012240 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7f8 fec9 	bl	800af5e <lwip_htonl>
 80121cc:	4604      	mov	r4, r0
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7f8 fec2 	bl	800af5e <lwip_htonl>
 80121da:	4603      	mov	r3, r0
 80121dc:	1ae3      	subs	r3, r4, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	da24      	bge.n	801222c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	3370      	adds	r3, #112	@ 0x70
 80121e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121e8:	e002      	b.n	80121f0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d011      	beq.n	801221c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	68db      	ldr	r3, [r3, #12]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	f7f8 feac 	bl	800af5e <lwip_htonl>
 8012206:	4604      	mov	r4, r0
 8012208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	4618      	mov	r0, r3
 8012210:	f7f8 fea5 	bl	800af5e <lwip_htonl>
 8012214:	4603      	mov	r3, r0
 8012216:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012218:	2b00      	cmp	r3, #0
 801221a:	dbe6      	blt.n	80121ea <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012222:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012228:	601a      	str	r2, [r3, #0]
 801222a:	e009      	b.n	8012240 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012230:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	623b      	str	r3, [r7, #32]
 8012238:	e002      	b.n	8012240 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801223a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801223c:	f7fb ff17 	bl	800e06e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012244:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012248:	2b00      	cmp	r3, #0
 801224a:	d012      	beq.n	8012272 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	4618      	mov	r0, r3
 8012254:	f7f8 fe83 	bl	800af5e <lwip_htonl>
 8012258:	4602      	mov	r2, r0
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012262:	8912      	ldrh	r2, [r2, #8]
 8012264:	4413      	add	r3, r2
  while (seg != NULL &&
 8012266:	69ba      	ldr	r2, [r7, #24]
 8012268:	429a      	cmp	r2, r3
 801226a:	f4bf aed9 	bcs.w	8012020 <tcp_output+0x160>
 801226e:	e000      	b.n	8012272 <tcp_output+0x3b2>
      break;
 8012270:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012276:	2b00      	cmp	r3, #0
 8012278:	d108      	bne.n	801228c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2200      	movs	r2, #0
 801227e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012282:	e004      	b.n	801228e <tcp_output+0x3ce>
    goto output_done;
 8012284:	bf00      	nop
 8012286:	e002      	b.n	801228e <tcp_output+0x3ce>
    goto output_done;
 8012288:	bf00      	nop
 801228a:	e000      	b.n	801228e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801228c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	8b5b      	ldrh	r3, [r3, #26]
 8012292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801229c:	2300      	movs	r3, #0
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3728      	adds	r7, #40	@ 0x28
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bdb0      	pop	{r4, r5, r7, pc}
 80122a6:	bf00      	nop

080122a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d106      	bne.n	80122c4 <tcp_output_segment_busy+0x1c>
 80122b6:	4b09      	ldr	r3, [pc, #36]	@ (80122dc <tcp_output_segment_busy+0x34>)
 80122b8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80122bc:	4908      	ldr	r1, [pc, #32]	@ (80122e0 <tcp_output_segment_busy+0x38>)
 80122be:	4809      	ldr	r0, [pc, #36]	@ (80122e4 <tcp_output_segment_busy+0x3c>)
 80122c0:	f003 ff96 	bl	80161f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	7b9b      	ldrb	r3, [r3, #14]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d001      	beq.n	80122d2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80122ce:	2301      	movs	r3, #1
 80122d0:	e000      	b.n	80122d4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3708      	adds	r7, #8
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	080198f8 	.word	0x080198f8
 80122e0:	08019e94 	.word	0x08019e94
 80122e4:	0801994c 	.word	0x0801994c

080122e8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80122e8:	b5b0      	push	{r4, r5, r7, lr}
 80122ea:	b08c      	sub	sp, #48	@ 0x30
 80122ec:	af04      	add	r7, sp, #16
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d106      	bne.n	8012308 <tcp_output_segment+0x20>
 80122fa:	4b64      	ldr	r3, [pc, #400]	@ (801248c <tcp_output_segment+0x1a4>)
 80122fc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012300:	4963      	ldr	r1, [pc, #396]	@ (8012490 <tcp_output_segment+0x1a8>)
 8012302:	4864      	ldr	r0, [pc, #400]	@ (8012494 <tcp_output_segment+0x1ac>)
 8012304:	f003 ff74 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d106      	bne.n	801231c <tcp_output_segment+0x34>
 801230e:	4b5f      	ldr	r3, [pc, #380]	@ (801248c <tcp_output_segment+0x1a4>)
 8012310:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012314:	4960      	ldr	r1, [pc, #384]	@ (8012498 <tcp_output_segment+0x1b0>)
 8012316:	485f      	ldr	r0, [pc, #380]	@ (8012494 <tcp_output_segment+0x1ac>)
 8012318:	f003 ff6a 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <tcp_output_segment+0x48>
 8012322:	4b5a      	ldr	r3, [pc, #360]	@ (801248c <tcp_output_segment+0x1a4>)
 8012324:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012328:	495c      	ldr	r1, [pc, #368]	@ (801249c <tcp_output_segment+0x1b4>)
 801232a:	485a      	ldr	r0, [pc, #360]	@ (8012494 <tcp_output_segment+0x1ac>)
 801232c:	f003 ff60 	bl	80161f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f7ff ffb9 	bl	80122a8 <tcp_output_segment_busy>
 8012336:	4603      	mov	r3, r0
 8012338:	2b00      	cmp	r3, #0
 801233a:	d001      	beq.n	8012340 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801233c:	2300      	movs	r3, #0
 801233e:	e0a1      	b.n	8012484 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	68dc      	ldr	r4, [r3, #12]
 8012348:	4610      	mov	r0, r2
 801234a:	f7f8 fe08 	bl	800af5e <lwip_htonl>
 801234e:	4603      	mov	r3, r0
 8012350:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	68dc      	ldr	r4, [r3, #12]
 801235a:	4610      	mov	r0, r2
 801235c:	f7f8 fdea 	bl	800af34 <lwip_htons>
 8012360:	4603      	mov	r3, r0
 8012362:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012368:	68ba      	ldr	r2, [r7, #8]
 801236a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801236c:	441a      	add	r2, r3
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	3314      	adds	r3, #20
 8012378:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	7a9b      	ldrb	r3, [r3, #10]
 801237e:	f003 0301 	and.w	r3, r3, #1
 8012382:	2b00      	cmp	r3, #0
 8012384:	d015      	beq.n	80123b2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	3304      	adds	r3, #4
 801238a:	461a      	mov	r2, r3
 801238c:	6879      	ldr	r1, [r7, #4]
 801238e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012392:	f7fc fa39 	bl	800e808 <tcp_eff_send_mss_netif>
 8012396:	4603      	mov	r3, r0
 8012398:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801239a:	8b7b      	ldrh	r3, [r7, #26]
 801239c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7f8 fddc 	bl	800af5e <lwip_htonl>
 80123a6:	4602      	mov	r2, r0
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	3304      	adds	r3, #4
 80123b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	da02      	bge.n	80123c2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	2200      	movs	r2, #0
 80123c0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d10c      	bne.n	80123e4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80123ca:	4b35      	ldr	r3, [pc, #212]	@ (80124a0 <tcp_output_segment+0x1b8>)
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f8 fdc0 	bl	800af5e <lwip_htonl>
 80123de:	4602      	mov	r2, r0
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	68da      	ldr	r2, [r3, #12]
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	1ad3      	subs	r3, r2, r3
 80123f0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	8959      	ldrh	r1, [r3, #10]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	8b3a      	ldrh	r2, [r7, #24]
 80123fe:	1a8a      	subs	r2, r1, r2
 8012400:	b292      	uxth	r2, r2
 8012402:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	8919      	ldrh	r1, [r3, #8]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	8b3a      	ldrh	r2, [r7, #24]
 8012410:	1a8a      	subs	r2, r1, r2
 8012412:	b292      	uxth	r2, r2
 8012414:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	68d2      	ldr	r2, [r2, #12]
 801241e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	2200      	movs	r2, #0
 8012426:	741a      	strb	r2, [r3, #16]
 8012428:	2200      	movs	r2, #0
 801242a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	68da      	ldr	r2, [r3, #12]
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	7a9b      	ldrb	r3, [r3, #10]
 8012434:	f003 0301 	and.w	r3, r3, #1
 8012438:	2b00      	cmp	r3, #0
 801243a:	d001      	beq.n	8012440 <tcp_output_segment+0x158>
 801243c:	2318      	movs	r3, #24
 801243e:	e000      	b.n	8012442 <tcp_output_segment+0x15a>
 8012440:	2314      	movs	r3, #20
 8012442:	4413      	add	r3, r2
 8012444:	69fa      	ldr	r2, [r7, #28]
 8012446:	429a      	cmp	r2, r3
 8012448:	d006      	beq.n	8012458 <tcp_output_segment+0x170>
 801244a:	4b10      	ldr	r3, [pc, #64]	@ (801248c <tcp_output_segment+0x1a4>)
 801244c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012450:	4914      	ldr	r1, [pc, #80]	@ (80124a4 <tcp_output_segment+0x1bc>)
 8012452:	4810      	ldr	r0, [pc, #64]	@ (8012494 <tcp_output_segment+0x1ac>)
 8012454:	f003 fecc 	bl	80161f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	6858      	ldr	r0, [r3, #4]
 801245c:	68b9      	ldr	r1, [r7, #8]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	1d1c      	adds	r4, r3, #4
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	7add      	ldrb	r5, [r3, #11]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	7a9b      	ldrb	r3, [r3, #10]
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	9202      	str	r2, [sp, #8]
 801246e:	2206      	movs	r2, #6
 8012470:	9201      	str	r2, [sp, #4]
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	462b      	mov	r3, r5
 8012476:	4622      	mov	r2, r4
 8012478:	f002 fbaa 	bl	8014bd0 <ip4_output_if>
 801247c:	4603      	mov	r3, r0
 801247e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012484:	4618      	mov	r0, r3
 8012486:	3720      	adds	r7, #32
 8012488:	46bd      	mov	sp, r7
 801248a:	bdb0      	pop	{r4, r5, r7, pc}
 801248c:	080198f8 	.word	0x080198f8
 8012490:	08019ebc 	.word	0x08019ebc
 8012494:	0801994c 	.word	0x0801994c
 8012498:	08019edc 	.word	0x08019edc
 801249c:	08019efc 	.word	0x08019efc
 80124a0:	2000eb3c 	.word	0x2000eb3c
 80124a4:	08019f20 	.word	0x08019f20

080124a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80124a8:	b5b0      	push	{r4, r5, r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d106      	bne.n	80124c4 <tcp_rexmit_rto_prepare+0x1c>
 80124b6:	4b31      	ldr	r3, [pc, #196]	@ (801257c <tcp_rexmit_rto_prepare+0xd4>)
 80124b8:	f240 6263 	movw	r2, #1635	@ 0x663
 80124bc:	4930      	ldr	r1, [pc, #192]	@ (8012580 <tcp_rexmit_rto_prepare+0xd8>)
 80124be:	4831      	ldr	r0, [pc, #196]	@ (8012584 <tcp_rexmit_rto_prepare+0xdc>)
 80124c0:	f003 fe96 	bl	80161f0 <iprintf>

  if (pcb->unacked == NULL) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d102      	bne.n	80124d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80124cc:	f06f 0305 	mvn.w	r3, #5
 80124d0:	e050      	b.n	8012574 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124d6:	60fb      	str	r3, [r7, #12]
 80124d8:	e00b      	b.n	80124f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80124da:	68f8      	ldr	r0, [r7, #12]
 80124dc:	f7ff fee4 	bl	80122a8 <tcp_output_segment_busy>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d002      	beq.n	80124ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80124e6:	f06f 0305 	mvn.w	r3, #5
 80124ea:	e043      	b.n	8012574 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	60fb      	str	r3, [r7, #12]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1ef      	bne.n	80124da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff fed4 	bl	80122a8 <tcp_output_segment_busy>
 8012500:	4603      	mov	r3, r0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012506:	f06f 0305 	mvn.w	r3, #5
 801250a:	e033      	b.n	8012574 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2200      	movs	r2, #0
 8012520:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	8b5b      	ldrh	r3, [r3, #26]
 8012526:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801252a:	b29a      	uxth	r2, r3
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	4618      	mov	r0, r3
 8012538:	f7f8 fd11 	bl	800af5e <lwip_htonl>
 801253c:	4604      	mov	r4, r0
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	891b      	ldrh	r3, [r3, #8]
 8012542:	461d      	mov	r5, r3
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	899b      	ldrh	r3, [r3, #12]
 801254a:	b29b      	uxth	r3, r3
 801254c:	4618      	mov	r0, r3
 801254e:	f7f8 fcf1 	bl	800af34 <lwip_htons>
 8012552:	4603      	mov	r3, r0
 8012554:	b2db      	uxtb	r3, r3
 8012556:	f003 0303 	and.w	r3, r3, #3
 801255a:	2b00      	cmp	r3, #0
 801255c:	d001      	beq.n	8012562 <tcp_rexmit_rto_prepare+0xba>
 801255e:	2301      	movs	r3, #1
 8012560:	e000      	b.n	8012564 <tcp_rexmit_rto_prepare+0xbc>
 8012562:	2300      	movs	r3, #0
 8012564:	442b      	add	r3, r5
 8012566:	18e2      	adds	r2, r4, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2200      	movs	r2, #0
 8012570:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3710      	adds	r7, #16
 8012578:	46bd      	mov	sp, r7
 801257a:	bdb0      	pop	{r4, r5, r7, pc}
 801257c:	080198f8 	.word	0x080198f8
 8012580:	08019f34 	.word	0x08019f34
 8012584:	0801994c 	.word	0x0801994c

08012588 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d106      	bne.n	80125a4 <tcp_rexmit_rto_commit+0x1c>
 8012596:	4b0d      	ldr	r3, [pc, #52]	@ (80125cc <tcp_rexmit_rto_commit+0x44>)
 8012598:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801259c:	490c      	ldr	r1, [pc, #48]	@ (80125d0 <tcp_rexmit_rto_commit+0x48>)
 801259e:	480d      	ldr	r0, [pc, #52]	@ (80125d4 <tcp_rexmit_rto_commit+0x4c>)
 80125a0:	f003 fe26 	bl	80161f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125aa:	2bff      	cmp	r3, #255	@ 0xff
 80125ac:	d007      	beq.n	80125be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80125b4:	3301      	adds	r3, #1
 80125b6:	b2da      	uxtb	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7ff fc7e 	bl	8011ec0 <tcp_output>
}
 80125c4:	bf00      	nop
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	080198f8 	.word	0x080198f8
 80125d0:	08019f58 	.word	0x08019f58
 80125d4:	0801994c 	.word	0x0801994c

080125d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <tcp_rexmit_rto+0x1c>
 80125e6:	4b0a      	ldr	r3, [pc, #40]	@ (8012610 <tcp_rexmit_rto+0x38>)
 80125e8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80125ec:	4909      	ldr	r1, [pc, #36]	@ (8012614 <tcp_rexmit_rto+0x3c>)
 80125ee:	480a      	ldr	r0, [pc, #40]	@ (8012618 <tcp_rexmit_rto+0x40>)
 80125f0:	f003 fdfe 	bl	80161f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7ff ff57 	bl	80124a8 <tcp_rexmit_rto_prepare>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d102      	bne.n	8012606 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7ff ffc1 	bl	8012588 <tcp_rexmit_rto_commit>
  }
}
 8012606:	bf00      	nop
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	080198f8 	.word	0x080198f8
 8012614:	08019f7c 	.word	0x08019f7c
 8012618:	0801994c 	.word	0x0801994c

0801261c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801261c:	b590      	push	{r4, r7, lr}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <tcp_rexmit+0x1c>
 801262a:	4b2f      	ldr	r3, [pc, #188]	@ (80126e8 <tcp_rexmit+0xcc>)
 801262c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012630:	492e      	ldr	r1, [pc, #184]	@ (80126ec <tcp_rexmit+0xd0>)
 8012632:	482f      	ldr	r0, [pc, #188]	@ (80126f0 <tcp_rexmit+0xd4>)
 8012634:	f003 fddc 	bl	80161f0 <iprintf>

  if (pcb->unacked == NULL) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801263c:	2b00      	cmp	r3, #0
 801263e:	d102      	bne.n	8012646 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012640:	f06f 0305 	mvn.w	r3, #5
 8012644:	e04c      	b.n	80126e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801264a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801264c:	68b8      	ldr	r0, [r7, #8]
 801264e:	f7ff fe2b 	bl	80122a8 <tcp_output_segment_busy>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d002      	beq.n	801265e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012658:	f06f 0305 	mvn.w	r3, #5
 801265c:	e040      	b.n	80126e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	336c      	adds	r3, #108	@ 0x6c
 801266a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801266c:	e002      	b.n	8012674 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d011      	beq.n	80126a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	4618      	mov	r0, r3
 8012686:	f7f8 fc6a 	bl	800af5e <lwip_htonl>
 801268a:	4604      	mov	r4, r0
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	4618      	mov	r0, r3
 8012694:	f7f8 fc63 	bl	800af5e <lwip_htonl>
 8012698:	4603      	mov	r3, r0
 801269a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801269c:	2b00      	cmp	r3, #0
 801269e:	dbe6      	blt.n	801266e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d103      	bne.n	80126be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2200      	movs	r2, #0
 80126ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126c4:	2bff      	cmp	r3, #255	@ 0xff
 80126c6:	d007      	beq.n	80126d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126ce:	3301      	adds	r3, #1
 80126d0:	b2da      	uxtb	r2, r3
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2200      	movs	r2, #0
 80126dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3714      	adds	r7, #20
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd90      	pop	{r4, r7, pc}
 80126e8:	080198f8 	.word	0x080198f8
 80126ec:	08019f98 	.word	0x08019f98
 80126f0:	0801994c 	.word	0x0801994c

080126f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d106      	bne.n	8012710 <tcp_rexmit_fast+0x1c>
 8012702:	4b2a      	ldr	r3, [pc, #168]	@ (80127ac <tcp_rexmit_fast+0xb8>)
 8012704:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012708:	4929      	ldr	r1, [pc, #164]	@ (80127b0 <tcp_rexmit_fast+0xbc>)
 801270a:	482a      	ldr	r0, [pc, #168]	@ (80127b4 <tcp_rexmit_fast+0xc0>)
 801270c:	f003 fd70 	bl	80161f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012714:	2b00      	cmp	r3, #0
 8012716:	d044      	beq.n	80127a2 <tcp_rexmit_fast+0xae>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	8b5b      	ldrh	r3, [r3, #26]
 801271c:	f003 0304 	and.w	r3, r3, #4
 8012720:	2b00      	cmp	r3, #0
 8012722:	d13e      	bne.n	80127a2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ff ff79 	bl	801261c <tcp_rexmit>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d138      	bne.n	80127a2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801273c:	4293      	cmp	r3, r2
 801273e:	bf28      	it	cs
 8012740:	4613      	movcs	r3, r2
 8012742:	b29b      	uxth	r3, r3
 8012744:	0fda      	lsrs	r2, r3, #31
 8012746:	4413      	add	r3, r2
 8012748:	105b      	asrs	r3, r3, #1
 801274a:	b29a      	uxth	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012758:	461a      	mov	r2, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	429a      	cmp	r2, r3
 8012762:	d206      	bcs.n	8012772 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	b29a      	uxth	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801277c:	4619      	mov	r1, r3
 801277e:	0049      	lsls	r1, r1, #1
 8012780:	440b      	add	r3, r1
 8012782:	b29b      	uxth	r3, r3
 8012784:	4413      	add	r3, r2
 8012786:	b29a      	uxth	r2, r3
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	8b5b      	ldrh	r3, [r3, #26]
 8012792:	f043 0304 	orr.w	r3, r3, #4
 8012796:	b29a      	uxth	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80127a2:	bf00      	nop
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	080198f8 	.word	0x080198f8
 80127b0:	08019fb0 	.word	0x08019fb0
 80127b4:	0801994c 	.word	0x0801994c

080127b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	607b      	str	r3, [r7, #4]
 80127c2:	460b      	mov	r3, r1
 80127c4:	817b      	strh	r3, [r7, #10]
 80127c6:	4613      	mov	r3, r2
 80127c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80127ca:	897a      	ldrh	r2, [r7, #10]
 80127cc:	893b      	ldrh	r3, [r7, #8]
 80127ce:	4413      	add	r3, r2
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	3314      	adds	r3, #20
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80127da:	4619      	mov	r1, r3
 80127dc:	2022      	movs	r0, #34	@ 0x22
 80127de:	f7f9 fcb7 	bl	800c150 <pbuf_alloc>
 80127e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d04d      	beq.n	8012886 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80127ea:	897b      	ldrh	r3, [r7, #10]
 80127ec:	3313      	adds	r3, #19
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	8952      	ldrh	r2, [r2, #10]
 80127f2:	4293      	cmp	r3, r2
 80127f4:	db06      	blt.n	8012804 <tcp_output_alloc_header_common+0x4c>
 80127f6:	4b26      	ldr	r3, [pc, #152]	@ (8012890 <tcp_output_alloc_header_common+0xd8>)
 80127f8:	f240 7223 	movw	r2, #1827	@ 0x723
 80127fc:	4925      	ldr	r1, [pc, #148]	@ (8012894 <tcp_output_alloc_header_common+0xdc>)
 80127fe:	4826      	ldr	r0, [pc, #152]	@ (8012898 <tcp_output_alloc_header_common+0xe0>)
 8012800:	f003 fcf6 	bl	80161f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801280a:	8c3b      	ldrh	r3, [r7, #32]
 801280c:	4618      	mov	r0, r3
 801280e:	f7f8 fb91 	bl	800af34 <lwip_htons>
 8012812:	4603      	mov	r3, r0
 8012814:	461a      	mov	r2, r3
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801281a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801281c:	4618      	mov	r0, r3
 801281e:	f7f8 fb89 	bl	800af34 <lwip_htons>
 8012822:	4603      	mov	r3, r0
 8012824:	461a      	mov	r2, r3
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f7f8 fb94 	bl	800af5e <lwip_htonl>
 8012836:	4602      	mov	r2, r0
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801283c:	897b      	ldrh	r3, [r7, #10]
 801283e:	089b      	lsrs	r3, r3, #2
 8012840:	b29b      	uxth	r3, r3
 8012842:	3305      	adds	r3, #5
 8012844:	b29b      	uxth	r3, r3
 8012846:	031b      	lsls	r3, r3, #12
 8012848:	b29a      	uxth	r2, r3
 801284a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801284e:	b29b      	uxth	r3, r3
 8012850:	4313      	orrs	r3, r2
 8012852:	b29b      	uxth	r3, r3
 8012854:	4618      	mov	r0, r3
 8012856:	f7f8 fb6d 	bl	800af34 <lwip_htons>
 801285a:	4603      	mov	r3, r0
 801285c:	461a      	mov	r2, r3
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012862:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012864:	4618      	mov	r0, r3
 8012866:	f7f8 fb65 	bl	800af34 <lwip_htons>
 801286a:	4603      	mov	r3, r0
 801286c:	461a      	mov	r2, r3
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	2200      	movs	r2, #0
 8012876:	741a      	strb	r2, [r3, #16]
 8012878:	2200      	movs	r2, #0
 801287a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	2200      	movs	r2, #0
 8012880:	749a      	strb	r2, [r3, #18]
 8012882:	2200      	movs	r2, #0
 8012884:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012886:	697b      	ldr	r3, [r7, #20]
}
 8012888:	4618      	mov	r0, r3
 801288a:	3718      	adds	r7, #24
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	080198f8 	.word	0x080198f8
 8012894:	08019fd0 	.word	0x08019fd0
 8012898:	0801994c 	.word	0x0801994c

0801289c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801289c:	b5b0      	push	{r4, r5, r7, lr}
 801289e:	b08a      	sub	sp, #40	@ 0x28
 80128a0:	af04      	add	r7, sp, #16
 80128a2:	60f8      	str	r0, [r7, #12]
 80128a4:	607b      	str	r3, [r7, #4]
 80128a6:	460b      	mov	r3, r1
 80128a8:	817b      	strh	r3, [r7, #10]
 80128aa:	4613      	mov	r3, r2
 80128ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d106      	bne.n	80128c2 <tcp_output_alloc_header+0x26>
 80128b4:	4b15      	ldr	r3, [pc, #84]	@ (801290c <tcp_output_alloc_header+0x70>)
 80128b6:	f240 7242 	movw	r2, #1858	@ 0x742
 80128ba:	4915      	ldr	r1, [pc, #84]	@ (8012910 <tcp_output_alloc_header+0x74>)
 80128bc:	4815      	ldr	r0, [pc, #84]	@ (8012914 <tcp_output_alloc_header+0x78>)
 80128be:	f003 fc97 	bl	80161f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	8adb      	ldrh	r3, [r3, #22]
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	8b12      	ldrh	r2, [r2, #24]
 80128ce:	68f9      	ldr	r1, [r7, #12]
 80128d0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80128d2:	893d      	ldrh	r5, [r7, #8]
 80128d4:	897c      	ldrh	r4, [r7, #10]
 80128d6:	9103      	str	r1, [sp, #12]
 80128d8:	2110      	movs	r1, #16
 80128da:	9102      	str	r1, [sp, #8]
 80128dc:	9201      	str	r2, [sp, #4]
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	462a      	mov	r2, r5
 80128e4:	4621      	mov	r1, r4
 80128e6:	f7ff ff67 	bl	80127b8 <tcp_output_alloc_header_common>
 80128ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d006      	beq.n	8012900 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128f6:	68fa      	ldr	r2, [r7, #12]
 80128f8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80128fa:	441a      	add	r2, r3
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012900:	697b      	ldr	r3, [r7, #20]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bdb0      	pop	{r4, r5, r7, pc}
 801290a:	bf00      	nop
 801290c:	080198f8 	.word	0x080198f8
 8012910:	0801a000 	.word	0x0801a000
 8012914:	0801994c 	.word	0x0801994c

08012918 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b088      	sub	sp, #32
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	4611      	mov	r1, r2
 8012924:	461a      	mov	r2, r3
 8012926:	460b      	mov	r3, r1
 8012928:	71fb      	strb	r3, [r7, #7]
 801292a:	4613      	mov	r3, r2
 801292c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801292e:	2300      	movs	r3, #0
 8012930:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d106      	bne.n	8012946 <tcp_output_fill_options+0x2e>
 8012938:	4b12      	ldr	r3, [pc, #72]	@ (8012984 <tcp_output_fill_options+0x6c>)
 801293a:	f240 7256 	movw	r2, #1878	@ 0x756
 801293e:	4912      	ldr	r1, [pc, #72]	@ (8012988 <tcp_output_fill_options+0x70>)
 8012940:	4812      	ldr	r0, [pc, #72]	@ (801298c <tcp_output_fill_options+0x74>)
 8012942:	f003 fc55 	bl	80161f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	3314      	adds	r3, #20
 8012950:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012952:	8bfb      	ldrh	r3, [r7, #30]
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	461a      	mov	r2, r3
 8012958:	79fb      	ldrb	r3, [r7, #7]
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	f003 0304 	and.w	r3, r3, #4
 8012960:	4413      	add	r3, r2
 8012962:	3314      	adds	r3, #20
 8012964:	69ba      	ldr	r2, [r7, #24]
 8012966:	4413      	add	r3, r2
 8012968:	697a      	ldr	r2, [r7, #20]
 801296a:	429a      	cmp	r2, r3
 801296c:	d006      	beq.n	801297c <tcp_output_fill_options+0x64>
 801296e:	4b05      	ldr	r3, [pc, #20]	@ (8012984 <tcp_output_fill_options+0x6c>)
 8012970:	f240 7275 	movw	r2, #1909	@ 0x775
 8012974:	4906      	ldr	r1, [pc, #24]	@ (8012990 <tcp_output_fill_options+0x78>)
 8012976:	4805      	ldr	r0, [pc, #20]	@ (801298c <tcp_output_fill_options+0x74>)
 8012978:	f003 fc3a 	bl	80161f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801297c:	bf00      	nop
 801297e:	3720      	adds	r7, #32
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	080198f8 	.word	0x080198f8
 8012988:	0801a028 	.word	0x0801a028
 801298c:	0801994c 	.word	0x0801994c
 8012990:	08019f20 	.word	0x08019f20

08012994 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08a      	sub	sp, #40	@ 0x28
 8012998:	af04      	add	r7, sp, #16
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
 80129a0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d106      	bne.n	80129b6 <tcp_output_control_segment+0x22>
 80129a8:	4b1c      	ldr	r3, [pc, #112]	@ (8012a1c <tcp_output_control_segment+0x88>)
 80129aa:	f240 7287 	movw	r2, #1927	@ 0x787
 80129ae:	491c      	ldr	r1, [pc, #112]	@ (8012a20 <tcp_output_control_segment+0x8c>)
 80129b0:	481c      	ldr	r0, [pc, #112]	@ (8012a24 <tcp_output_control_segment+0x90>)
 80129b2:	f003 fc1d 	bl	80161f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	6879      	ldr	r1, [r7, #4]
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f7fe faea 	bl	8010f94 <tcp_route>
 80129c0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d102      	bne.n	80129ce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80129c8:	23fc      	movs	r3, #252	@ 0xfc
 80129ca:	75fb      	strb	r3, [r7, #23]
 80129cc:	e01c      	b.n	8012a08 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d006      	beq.n	80129e2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	7adb      	ldrb	r3, [r3, #11]
 80129d8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	7a9b      	ldrb	r3, [r3, #10]
 80129de:	757b      	strb	r3, [r7, #21]
 80129e0:	e003      	b.n	80129ea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80129e2:	23ff      	movs	r3, #255	@ 0xff
 80129e4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80129ea:	7dba      	ldrb	r2, [r7, #22]
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	9302      	str	r3, [sp, #8]
 80129f0:	2306      	movs	r3, #6
 80129f2:	9301      	str	r3, [sp, #4]
 80129f4:	7d7b      	ldrb	r3, [r7, #21]
 80129f6:	9300      	str	r3, [sp, #0]
 80129f8:	4613      	mov	r3, r2
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	6879      	ldr	r1, [r7, #4]
 80129fe:	68b8      	ldr	r0, [r7, #8]
 8012a00:	f002 f8e6 	bl	8014bd0 <ip4_output_if>
 8012a04:	4603      	mov	r3, r0
 8012a06:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012a08:	68b8      	ldr	r0, [r7, #8]
 8012a0a:	f7f9 fe85 	bl	800c718 <pbuf_free>
  return err;
 8012a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3718      	adds	r7, #24
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	080198f8 	.word	0x080198f8
 8012a20:	0801a050 	.word	0x0801a050
 8012a24:	0801994c 	.word	0x0801994c

08012a28 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b08b      	sub	sp, #44	@ 0x2c
 8012a2c:	af04      	add	r7, sp, #16
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	607a      	str	r2, [r7, #4]
 8012a34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d106      	bne.n	8012a4a <tcp_rst+0x22>
 8012a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8012abc <tcp_rst+0x94>)
 8012a3e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012a42:	491f      	ldr	r1, [pc, #124]	@ (8012ac0 <tcp_rst+0x98>)
 8012a44:	481f      	ldr	r0, [pc, #124]	@ (8012ac4 <tcp_rst+0x9c>)
 8012a46:	f003 fbd3 	bl	80161f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d106      	bne.n	8012a5e <tcp_rst+0x36>
 8012a50:	4b1a      	ldr	r3, [pc, #104]	@ (8012abc <tcp_rst+0x94>)
 8012a52:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012a56:	491c      	ldr	r1, [pc, #112]	@ (8012ac8 <tcp_rst+0xa0>)
 8012a58:	481a      	ldr	r0, [pc, #104]	@ (8012ac4 <tcp_rst+0x9c>)
 8012a5a:	f003 fbc9 	bl	80161f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a5e:	2300      	movs	r3, #0
 8012a60:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012a62:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012a66:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012a68:	7dfb      	ldrb	r3, [r7, #23]
 8012a6a:	b29c      	uxth	r4, r3
 8012a6c:	68b8      	ldr	r0, [r7, #8]
 8012a6e:	f7f8 fa76 	bl	800af5e <lwip_htonl>
 8012a72:	4602      	mov	r2, r0
 8012a74:	8abb      	ldrh	r3, [r7, #20]
 8012a76:	9303      	str	r3, [sp, #12]
 8012a78:	2314      	movs	r3, #20
 8012a7a:	9302      	str	r3, [sp, #8]
 8012a7c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012a7e:	9301      	str	r3, [sp, #4]
 8012a80:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	4613      	mov	r3, r2
 8012a86:	2200      	movs	r2, #0
 8012a88:	4621      	mov	r1, r4
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f7ff fe94 	bl	80127b8 <tcp_output_alloc_header_common>
 8012a90:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d00c      	beq.n	8012ab2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a98:	7dfb      	ldrb	r3, [r7, #23]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	6939      	ldr	r1, [r7, #16]
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f7ff ff3a 	bl	8012918 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aa6:	683a      	ldr	r2, [r7, #0]
 8012aa8:	6939      	ldr	r1, [r7, #16]
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f7ff ff72 	bl	8012994 <tcp_output_control_segment>
 8012ab0:	e000      	b.n	8012ab4 <tcp_rst+0x8c>
    return;
 8012ab2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012ab4:	371c      	adds	r7, #28
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd90      	pop	{r4, r7, pc}
 8012aba:	bf00      	nop
 8012abc:	080198f8 	.word	0x080198f8
 8012ac0:	0801a07c 	.word	0x0801a07c
 8012ac4:	0801994c 	.word	0x0801994c
 8012ac8:	0801a098 	.word	0x0801a098

08012acc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012acc:	b590      	push	{r4, r7, lr}
 8012ace:	b087      	sub	sp, #28
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <tcp_send_empty_ack+0x24>
 8012ae2:	4b28      	ldr	r3, [pc, #160]	@ (8012b84 <tcp_send_empty_ack+0xb8>)
 8012ae4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012ae8:	4927      	ldr	r1, [pc, #156]	@ (8012b88 <tcp_send_empty_ack+0xbc>)
 8012aea:	4828      	ldr	r0, [pc, #160]	@ (8012b8c <tcp_send_empty_ack+0xc0>)
 8012aec:	f003 fb80 	bl	80161f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012af0:	7dfb      	ldrb	r3, [r7, #23]
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	f003 0304 	and.w	r3, r3, #4
 8012afa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012afc:	7d7b      	ldrb	r3, [r7, #21]
 8012afe:	b29c      	uxth	r4, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7f8 fa2a 	bl	800af5e <lwip_htonl>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	4621      	mov	r1, r4
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7ff fec3 	bl	801289c <tcp_output_alloc_header>
 8012b16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d109      	bne.n	8012b32 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	8b5b      	ldrh	r3, [r3, #26]
 8012b22:	f043 0303 	orr.w	r3, r3, #3
 8012b26:	b29a      	uxth	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012b2c:	f06f 0301 	mvn.w	r3, #1
 8012b30:	e023      	b.n	8012b7a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012b32:	7dbb      	ldrb	r3, [r7, #22]
 8012b34:	7dfa      	ldrb	r2, [r7, #23]
 8012b36:	6939      	ldr	r1, [r7, #16]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff feed 	bl	8012918 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	3304      	adds	r3, #4
 8012b44:	6939      	ldr	r1, [r7, #16]
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7ff ff24 	bl	8012994 <tcp_output_control_segment>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d007      	beq.n	8012b68 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	8b5b      	ldrh	r3, [r3, #26]
 8012b5c:	f043 0303 	orr.w	r3, r3, #3
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	835a      	strh	r2, [r3, #26]
 8012b66:	e006      	b.n	8012b76 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	8b5b      	ldrh	r3, [r3, #26]
 8012b6c:	f023 0303 	bic.w	r3, r3, #3
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	371c      	adds	r7, #28
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd90      	pop	{r4, r7, pc}
 8012b82:	bf00      	nop
 8012b84:	080198f8 	.word	0x080198f8
 8012b88:	0801a0b4 	.word	0x0801a0b4
 8012b8c:	0801994c 	.word	0x0801994c

08012b90 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012b90:	b590      	push	{r4, r7, lr}
 8012b92:	b087      	sub	sp, #28
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b98:	2300      	movs	r3, #0
 8012b9a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d106      	bne.n	8012bb0 <tcp_keepalive+0x20>
 8012ba2:	4b18      	ldr	r3, [pc, #96]	@ (8012c04 <tcp_keepalive+0x74>)
 8012ba4:	f640 0224 	movw	r2, #2084	@ 0x824
 8012ba8:	4917      	ldr	r1, [pc, #92]	@ (8012c08 <tcp_keepalive+0x78>)
 8012baa:	4818      	ldr	r0, [pc, #96]	@ (8012c0c <tcp_keepalive+0x7c>)
 8012bac:	f003 fb20 	bl	80161f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012bb0:	7dfb      	ldrb	r3, [r7, #23]
 8012bb2:	b29c      	uxth	r4, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f8 f9cf 	bl	800af5e <lwip_htonl>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f7ff fe68 	bl	801289c <tcp_output_alloc_header>
 8012bcc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d102      	bne.n	8012bda <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bd8:	e010      	b.n	8012bfc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bda:	7dfb      	ldrb	r3, [r7, #23]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	6939      	ldr	r1, [r7, #16]
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f7ff fe99 	bl	8012918 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	3304      	adds	r3, #4
 8012bec:	6939      	ldr	r1, [r7, #16]
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f7ff fed0 	bl	8012994 <tcp_output_control_segment>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	371c      	adds	r7, #28
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd90      	pop	{r4, r7, pc}
 8012c04:	080198f8 	.word	0x080198f8
 8012c08:	0801a0d4 	.word	0x0801a0d4
 8012c0c:	0801994c 	.word	0x0801994c

08012c10 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b08b      	sub	sp, #44	@ 0x2c
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d106      	bne.n	8012c32 <tcp_zero_window_probe+0x22>
 8012c24:	4b4c      	ldr	r3, [pc, #304]	@ (8012d58 <tcp_zero_window_probe+0x148>)
 8012c26:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012c2a:	494c      	ldr	r1, [pc, #304]	@ (8012d5c <tcp_zero_window_probe+0x14c>)
 8012c2c:	484c      	ldr	r0, [pc, #304]	@ (8012d60 <tcp_zero_window_probe+0x150>)
 8012c2e:	f003 fadf 	bl	80161f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c36:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c38:	6a3b      	ldr	r3, [r7, #32]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d101      	bne.n	8012c42 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e086      	b.n	8012d50 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8012c48:	2bff      	cmp	r3, #255	@ 0xff
 8012c4a:	d007      	beq.n	8012c5c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8012c52:	3301      	adds	r3, #1
 8012c54:	b2da      	uxtb	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	899b      	ldrh	r3, [r3, #12]
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7f8 f965 	bl	800af34 <lwip_htons>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	f003 0301 	and.w	r3, r3, #1
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d005      	beq.n	8012c82 <tcp_zero_window_probe+0x72>
 8012c76:	6a3b      	ldr	r3, [r7, #32]
 8012c78:	891b      	ldrh	r3, [r3, #8]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d101      	bne.n	8012c82 <tcp_zero_window_probe+0x72>
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e000      	b.n	8012c84 <tcp_zero_window_probe+0x74>
 8012c82:	2300      	movs	r3, #0
 8012c84:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012c86:	7ffb      	ldrb	r3, [r7, #31]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	bf0c      	ite	eq
 8012c8c:	2301      	moveq	r3, #1
 8012c8e:	2300      	movne	r3, #0
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c98:	b299      	uxth	r1, r3
 8012c9a:	6a3b      	ldr	r3, [r7, #32]
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	8bba      	ldrh	r2, [r7, #28]
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff fdfa 	bl	801289c <tcp_output_alloc_header>
 8012ca8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d102      	bne.n	8012cb6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cb4:	e04c      	b.n	8012d50 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012cbc:	7ffb      	ldrb	r3, [r7, #31]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d011      	beq.n	8012ce6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	899b      	ldrh	r3, [r3, #12]
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	b21b      	sxth	r3, r3
 8012cca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012cce:	b21c      	sxth	r4, r3
 8012cd0:	2011      	movs	r0, #17
 8012cd2:	f7f8 f92f 	bl	800af34 <lwip_htons>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	b21b      	sxth	r3, r3
 8012cda:	4323      	orrs	r3, r4
 8012cdc:	b21b      	sxth	r3, r3
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	819a      	strh	r2, [r3, #12]
 8012ce4:	e010      	b.n	8012d08 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	3314      	adds	r3, #20
 8012cec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012cee:	6a3b      	ldr	r3, [r7, #32]
 8012cf0:	6858      	ldr	r0, [r3, #4]
 8012cf2:	6a3b      	ldr	r3, [r7, #32]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	891a      	ldrh	r2, [r3, #8]
 8012cf8:	6a3b      	ldr	r3, [r7, #32]
 8012cfa:	891b      	ldrh	r3, [r3, #8]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	2201      	movs	r2, #1
 8012d02:	6939      	ldr	r1, [r7, #16]
 8012d04:	f7f9 fefe 	bl	800cb04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012d08:	6a3b      	ldr	r3, [r7, #32]
 8012d0a:	68db      	ldr	r3, [r3, #12]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7f8 f925 	bl	800af5e <lwip_htonl>
 8012d14:	4603      	mov	r3, r0
 8012d16:	3301      	adds	r3, #1
 8012d18:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	1ad3      	subs	r3, r2, r3
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	da02      	bge.n	8012d2c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	68fa      	ldr	r2, [r7, #12]
 8012d2a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d30:	2200      	movs	r2, #0
 8012d32:	69b9      	ldr	r1, [r7, #24]
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f7ff fdef 	bl	8012918 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	3304      	adds	r3, #4
 8012d40:	69b9      	ldr	r1, [r7, #24]
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f7ff fe26 	bl	8012994 <tcp_output_control_segment>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	372c      	adds	r7, #44	@ 0x2c
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd90      	pop	{r4, r7, pc}
 8012d58:	080198f8 	.word	0x080198f8
 8012d5c:	0801a0f0 	.word	0x0801a0f0
 8012d60:	0801994c 	.word	0x0801994c

08012d64 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012d6c:	f7f9 ffda 	bl	800cd24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012d70:	4b0a      	ldr	r3, [pc, #40]	@ (8012d9c <tcpip_tcp_timer+0x38>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d103      	bne.n	8012d80 <tcpip_tcp_timer+0x1c>
 8012d78:	4b09      	ldr	r3, [pc, #36]	@ (8012da0 <tcpip_tcp_timer+0x3c>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d005      	beq.n	8012d8c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012d80:	2200      	movs	r2, #0
 8012d82:	4908      	ldr	r1, [pc, #32]	@ (8012da4 <tcpip_tcp_timer+0x40>)
 8012d84:	20fa      	movs	r0, #250	@ 0xfa
 8012d86:	f000 f8f3 	bl	8012f70 <sys_timeout>
 8012d8a:	e003      	b.n	8012d94 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012d8c:	4b06      	ldr	r3, [pc, #24]	@ (8012da8 <tcpip_tcp_timer+0x44>)
 8012d8e:	2200      	movs	r2, #0
 8012d90:	601a      	str	r2, [r3, #0]
  }
}
 8012d92:	bf00      	nop
 8012d94:	bf00      	nop
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	2000eb48 	.word	0x2000eb48
 8012da0:	2000eb4c 	.word	0x2000eb4c
 8012da4:	08012d65 	.word	0x08012d65
 8012da8:	2000eb94 	.word	0x2000eb94

08012dac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012db0:	4b0a      	ldr	r3, [pc, #40]	@ (8012ddc <tcp_timer_needed+0x30>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d10f      	bne.n	8012dd8 <tcp_timer_needed+0x2c>
 8012db8:	4b09      	ldr	r3, [pc, #36]	@ (8012de0 <tcp_timer_needed+0x34>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d103      	bne.n	8012dc8 <tcp_timer_needed+0x1c>
 8012dc0:	4b08      	ldr	r3, [pc, #32]	@ (8012de4 <tcp_timer_needed+0x38>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d007      	beq.n	8012dd8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012dc8:	4b04      	ldr	r3, [pc, #16]	@ (8012ddc <tcp_timer_needed+0x30>)
 8012dca:	2201      	movs	r2, #1
 8012dcc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012dce:	2200      	movs	r2, #0
 8012dd0:	4905      	ldr	r1, [pc, #20]	@ (8012de8 <tcp_timer_needed+0x3c>)
 8012dd2:	20fa      	movs	r0, #250	@ 0xfa
 8012dd4:	f000 f8cc 	bl	8012f70 <sys_timeout>
  }
}
 8012dd8:	bf00      	nop
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	2000eb94 	.word	0x2000eb94
 8012de0:	2000eb48 	.word	0x2000eb48
 8012de4:	2000eb4c 	.word	0x2000eb4c
 8012de8:	08012d65 	.word	0x08012d65

08012dec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b086      	sub	sp, #24
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	60f8      	str	r0, [r7, #12]
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012df8:	200a      	movs	r0, #10
 8012dfa:	f7f8 fd73 	bl	800b8e4 <memp_malloc>
 8012dfe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d109      	bne.n	8012e1a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d151      	bne.n	8012eb0 <sys_timeout_abs+0xc4>
 8012e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8012eb8 <sys_timeout_abs+0xcc>)
 8012e0e:	22be      	movs	r2, #190	@ 0xbe
 8012e10:	492a      	ldr	r1, [pc, #168]	@ (8012ebc <sys_timeout_abs+0xd0>)
 8012e12:	482b      	ldr	r0, [pc, #172]	@ (8012ec0 <sys_timeout_abs+0xd4>)
 8012e14:	f003 f9ec 	bl	80161f0 <iprintf>
    return;
 8012e18:	e04a      	b.n	8012eb0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	68fa      	ldr	r2, [r7, #12]
 8012e30:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012e32:	4b24      	ldr	r3, [pc, #144]	@ (8012ec4 <sys_timeout_abs+0xd8>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d103      	bne.n	8012e42 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e3a:	4a22      	ldr	r2, [pc, #136]	@ (8012ec4 <sys_timeout_abs+0xd8>)
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	6013      	str	r3, [r2, #0]
    return;
 8012e40:	e037      	b.n	8012eb2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	685a      	ldr	r2, [r3, #4]
 8012e46:	4b1f      	ldr	r3, [pc, #124]	@ (8012ec4 <sys_timeout_abs+0xd8>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	1ad3      	subs	r3, r2, r3
 8012e4e:	0fdb      	lsrs	r3, r3, #31
 8012e50:	f003 0301 	and.w	r3, r3, #1
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d007      	beq.n	8012e6a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8012ec4 <sys_timeout_abs+0xd8>)
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012e62:	4a18      	ldr	r2, [pc, #96]	@ (8012ec4 <sys_timeout_abs+0xd8>)
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	6013      	str	r3, [r2, #0]
 8012e68:	e023      	b.n	8012eb2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e6a:	4b16      	ldr	r3, [pc, #88]	@ (8012ec4 <sys_timeout_abs+0xd8>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	617b      	str	r3, [r7, #20]
 8012e70:	e01a      	b.n	8012ea8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00b      	beq.n	8012e92 <sys_timeout_abs+0xa6>
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	685a      	ldr	r2, [r3, #4]
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	0fdb      	lsrs	r3, r3, #31
 8012e88:	f003 0301 	and.w	r3, r3, #1
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d007      	beq.n	8012ea2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	693a      	ldr	r2, [r7, #16]
 8012e9e:	601a      	str	r2, [r3, #0]
        break;
 8012ea0:	e007      	b.n	8012eb2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	617b      	str	r3, [r7, #20]
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d1e1      	bne.n	8012e72 <sys_timeout_abs+0x86>
 8012eae:	e000      	b.n	8012eb2 <sys_timeout_abs+0xc6>
    return;
 8012eb0:	bf00      	nop
      }
    }
  }
}
 8012eb2:	3718      	adds	r7, #24
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	0801a114 	.word	0x0801a114
 8012ebc:	0801a148 	.word	0x0801a148
 8012ec0:	0801a188 	.word	0x0801a188
 8012ec4:	2000eb8c 	.word	0x2000eb8c

08012ec8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b086      	sub	sp, #24
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	4798      	blx	r3

  now = sys_now();
 8012eda:	f7f2 fad3 	bl	8005484 <sys_now>
 8012ede:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8012f24 <lwip_cyclic_timer+0x5c>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4413      	add	r3, r2
 8012eea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012eec:	68fa      	ldr	r2, [r7, #12]
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	0fdb      	lsrs	r3, r3, #31
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d009      	beq.n	8012f12 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	4413      	add	r3, r2
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	4907      	ldr	r1, [pc, #28]	@ (8012f28 <lwip_cyclic_timer+0x60>)
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ff6e 	bl	8012dec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012f10:	e004      	b.n	8012f1c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	4904      	ldr	r1, [pc, #16]	@ (8012f28 <lwip_cyclic_timer+0x60>)
 8012f16:	68f8      	ldr	r0, [r7, #12]
 8012f18:	f7ff ff68 	bl	8012dec <sys_timeout_abs>
}
 8012f1c:	bf00      	nop
 8012f1e:	3718      	adds	r7, #24
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	2000eb90 	.word	0x2000eb90
 8012f28:	08012ec9 	.word	0x08012ec9

08012f2c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f32:	2301      	movs	r3, #1
 8012f34:	607b      	str	r3, [r7, #4]
 8012f36:	e00e      	b.n	8012f56 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f38:	4a0b      	ldr	r2, [pc, #44]	@ (8012f68 <sys_timeouts_init+0x3c>)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	4a08      	ldr	r2, [pc, #32]	@ (8012f68 <sys_timeouts_init+0x3c>)
 8012f46:	4413      	add	r3, r2
 8012f48:	461a      	mov	r2, r3
 8012f4a:	4908      	ldr	r1, [pc, #32]	@ (8012f6c <sys_timeouts_init+0x40>)
 8012f4c:	f000 f810 	bl	8012f70 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	3301      	adds	r3, #1
 8012f54:	607b      	str	r3, [r7, #4]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d9ed      	bls.n	8012f38 <sys_timeouts_init+0xc>
  }
}
 8012f5c:	bf00      	nop
 8012f5e:	bf00      	nop
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	0801ad44 	.word	0x0801ad44
 8012f6c:	08012ec9 	.word	0x08012ec9

08012f70 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b086      	sub	sp, #24
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f82:	d306      	bcc.n	8012f92 <sys_timeout+0x22>
 8012f84:	4b0a      	ldr	r3, [pc, #40]	@ (8012fb0 <sys_timeout+0x40>)
 8012f86:	f240 1229 	movw	r2, #297	@ 0x129
 8012f8a:	490a      	ldr	r1, [pc, #40]	@ (8012fb4 <sys_timeout+0x44>)
 8012f8c:	480a      	ldr	r0, [pc, #40]	@ (8012fb8 <sys_timeout+0x48>)
 8012f8e:	f003 f92f 	bl	80161f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012f92:	f7f2 fa77 	bl	8005484 <sys_now>
 8012f96:	4602      	mov	r2, r0
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	68b9      	ldr	r1, [r7, #8]
 8012fa2:	6978      	ldr	r0, [r7, #20]
 8012fa4:	f7ff ff22 	bl	8012dec <sys_timeout_abs>
#endif
}
 8012fa8:	bf00      	nop
 8012faa:	3718      	adds	r7, #24
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	0801a114 	.word	0x0801a114
 8012fb4:	0801a1b0 	.word	0x0801a1b0
 8012fb8:	0801a188 	.word	0x0801a188

08012fbc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b084      	sub	sp, #16
 8012fc0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012fc2:	f7f2 fa5f 	bl	8005484 <sys_now>
 8012fc6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012fc8:	4b17      	ldr	r3, [pc, #92]	@ (8013028 <sys_check_timeouts+0x6c>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d022      	beq.n	801301a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	68fa      	ldr	r2, [r7, #12]
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	0fdb      	lsrs	r3, r3, #31
 8012fde:	f003 0301 	and.w	r3, r3, #1
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d11a      	bne.n	801301e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4a0e      	ldr	r2, [pc, #56]	@ (8013028 <sys_check_timeouts+0x6c>)
 8012fee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	689b      	ldr	r3, [r3, #8]
 8012ff4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	4a0a      	ldr	r2, [pc, #40]	@ (801302c <sys_check_timeouts+0x70>)
 8013002:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013004:	68b9      	ldr	r1, [r7, #8]
 8013006:	200a      	movs	r0, #10
 8013008:	f7f8 fce2 	bl	800b9d0 <memp_free>
    if (handler != NULL) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d0da      	beq.n	8012fc8 <sys_check_timeouts+0xc>
      handler(arg);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6838      	ldr	r0, [r7, #0]
 8013016:	4798      	blx	r3
  do {
 8013018:	e7d6      	b.n	8012fc8 <sys_check_timeouts+0xc>
      return;
 801301a:	bf00      	nop
 801301c:	e000      	b.n	8013020 <sys_check_timeouts+0x64>
      return;
 801301e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	2000eb8c 	.word	0x2000eb8c
 801302c:	2000eb90 	.word	0x2000eb90

08013030 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013036:	4b16      	ldr	r3, [pc, #88]	@ (8013090 <sys_timeouts_sleeptime+0x60>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d102      	bne.n	8013044 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801303e:	f04f 33ff 	mov.w	r3, #4294967295
 8013042:	e020      	b.n	8013086 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013044:	f7f2 fa1e 	bl	8005484 <sys_now>
 8013048:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801304a:	4b11      	ldr	r3, [pc, #68]	@ (8013090 <sys_timeouts_sleeptime+0x60>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	685a      	ldr	r2, [r3, #4]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	0fdb      	lsrs	r3, r3, #31
 8013056:	f003 0301 	and.w	r3, r3, #1
 801305a:	b2db      	uxtb	r3, r3
 801305c:	2b00      	cmp	r3, #0
 801305e:	d001      	beq.n	8013064 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013060:	2300      	movs	r3, #0
 8013062:	e010      	b.n	8013086 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013064:	4b0a      	ldr	r3, [pc, #40]	@ (8013090 <sys_timeouts_sleeptime+0x60>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	685a      	ldr	r2, [r3, #4]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	1ad3      	subs	r3, r2, r3
 801306e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	da06      	bge.n	8013084 <sys_timeouts_sleeptime+0x54>
 8013076:	4b07      	ldr	r3, [pc, #28]	@ (8013094 <sys_timeouts_sleeptime+0x64>)
 8013078:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801307c:	4906      	ldr	r1, [pc, #24]	@ (8013098 <sys_timeouts_sleeptime+0x68>)
 801307e:	4807      	ldr	r0, [pc, #28]	@ (801309c <sys_timeouts_sleeptime+0x6c>)
 8013080:	f003 f8b6 	bl	80161f0 <iprintf>
    return ret;
 8013084:	683b      	ldr	r3, [r7, #0]
  }
}
 8013086:	4618      	mov	r0, r3
 8013088:	3708      	adds	r7, #8
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	2000eb8c 	.word	0x2000eb8c
 8013094:	0801a114 	.word	0x0801a114
 8013098:	0801a1e8 	.word	0x0801a1e8
 801309c:	0801a188 	.word	0x0801a188

080130a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80130a4:	f002 ffa4 	bl	8015ff0 <rand>
 80130a8:	4603      	mov	r3, r0
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	4b01      	ldr	r3, [pc, #4]	@ (80130c0 <udp_init+0x20>)
 80130ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80130bc:	bf00      	nop
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	2000012c 	.word	0x2000012c

080130c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80130ca:	2300      	movs	r3, #0
 80130cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80130ce:	4b17      	ldr	r3, [pc, #92]	@ (801312c <udp_new_port+0x68>)
 80130d0:	881b      	ldrh	r3, [r3, #0]
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	b291      	uxth	r1, r2
 80130d6:	4a15      	ldr	r2, [pc, #84]	@ (801312c <udp_new_port+0x68>)
 80130d8:	8011      	strh	r1, [r2, #0]
 80130da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130de:	4293      	cmp	r3, r2
 80130e0:	d103      	bne.n	80130ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80130e2:	4b12      	ldr	r3, [pc, #72]	@ (801312c <udp_new_port+0x68>)
 80130e4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80130e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130ea:	4b11      	ldr	r3, [pc, #68]	@ (8013130 <udp_new_port+0x6c>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	603b      	str	r3, [r7, #0]
 80130f0:	e011      	b.n	8013116 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	8a5a      	ldrh	r2, [r3, #18]
 80130f6:	4b0d      	ldr	r3, [pc, #52]	@ (801312c <udp_new_port+0x68>)
 80130f8:	881b      	ldrh	r3, [r3, #0]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d108      	bne.n	8013110 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80130fe:	88fb      	ldrh	r3, [r7, #6]
 8013100:	3301      	adds	r3, #1
 8013102:	80fb      	strh	r3, [r7, #6]
 8013104:	88fb      	ldrh	r3, [r7, #6]
 8013106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801310a:	d3e0      	bcc.n	80130ce <udp_new_port+0xa>
        return 0;
 801310c:	2300      	movs	r3, #0
 801310e:	e007      	b.n	8013120 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	603b      	str	r3, [r7, #0]
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1ea      	bne.n	80130f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801311c:	4b03      	ldr	r3, [pc, #12]	@ (801312c <udp_new_port+0x68>)
 801311e:	881b      	ldrh	r3, [r3, #0]
}
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr
 801312c:	2000012c 	.word	0x2000012c
 8013130:	2000eb98 	.word	0x2000eb98

08013134 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	4613      	mov	r3, r2
 8013140:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d105      	bne.n	8013154 <udp_input_local_match+0x20>
 8013148:	4b27      	ldr	r3, [pc, #156]	@ (80131e8 <udp_input_local_match+0xb4>)
 801314a:	2287      	movs	r2, #135	@ 0x87
 801314c:	4927      	ldr	r1, [pc, #156]	@ (80131ec <udp_input_local_match+0xb8>)
 801314e:	4828      	ldr	r0, [pc, #160]	@ (80131f0 <udp_input_local_match+0xbc>)
 8013150:	f003 f84e 	bl	80161f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d105      	bne.n	8013166 <udp_input_local_match+0x32>
 801315a:	4b23      	ldr	r3, [pc, #140]	@ (80131e8 <udp_input_local_match+0xb4>)
 801315c:	2288      	movs	r2, #136	@ 0x88
 801315e:	4925      	ldr	r1, [pc, #148]	@ (80131f4 <udp_input_local_match+0xc0>)
 8013160:	4823      	ldr	r0, [pc, #140]	@ (80131f0 <udp_input_local_match+0xbc>)
 8013162:	f003 f845 	bl	80161f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	7a1b      	ldrb	r3, [r3, #8]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d00b      	beq.n	8013186 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	7a1a      	ldrb	r2, [r3, #8]
 8013172:	4b21      	ldr	r3, [pc, #132]	@ (80131f8 <udp_input_local_match+0xc4>)
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801317a:	3301      	adds	r3, #1
 801317c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801317e:	429a      	cmp	r2, r3
 8013180:	d001      	beq.n	8013186 <udp_input_local_match+0x52>
    return 0;
 8013182:	2300      	movs	r3, #0
 8013184:	e02b      	b.n	80131de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013186:	79fb      	ldrb	r3, [r7, #7]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d018      	beq.n	80131be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d013      	beq.n	80131ba <udp_input_local_match+0x86>
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00f      	beq.n	80131ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801319a:	4b17      	ldr	r3, [pc, #92]	@ (80131f8 <udp_input_local_match+0xc4>)
 801319c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a2:	d00a      	beq.n	80131ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	4b13      	ldr	r3, [pc, #76]	@ (80131f8 <udp_input_local_match+0xc4>)
 80131aa:	695b      	ldr	r3, [r3, #20]
 80131ac:	405a      	eors	r2, r3
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	3308      	adds	r3, #8
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d110      	bne.n	80131dc <udp_input_local_match+0xa8>
          return 1;
 80131ba:	2301      	movs	r3, #1
 80131bc:	e00f      	b.n	80131de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d009      	beq.n	80131d8 <udp_input_local_match+0xa4>
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d005      	beq.n	80131d8 <udp_input_local_match+0xa4>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	4b09      	ldr	r3, [pc, #36]	@ (80131f8 <udp_input_local_match+0xc4>)
 80131d2:	695b      	ldr	r3, [r3, #20]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d101      	bne.n	80131dc <udp_input_local_match+0xa8>
        return 1;
 80131d8:	2301      	movs	r3, #1
 80131da:	e000      	b.n	80131de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	0801a1fc 	.word	0x0801a1fc
 80131ec:	0801a22c 	.word	0x0801a22c
 80131f0:	0801a250 	.word	0x0801a250
 80131f4:	0801a278 	.word	0x0801a278
 80131f8:	200091f0 	.word	0x200091f0

080131fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80131fc:	b590      	push	{r4, r7, lr}
 80131fe:	b08d      	sub	sp, #52	@ 0x34
 8013200:	af02      	add	r7, sp, #8
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d105      	bne.n	801321c <udp_input+0x20>
 8013210:	4b7c      	ldr	r3, [pc, #496]	@ (8013404 <udp_input+0x208>)
 8013212:	22cf      	movs	r2, #207	@ 0xcf
 8013214:	497c      	ldr	r1, [pc, #496]	@ (8013408 <udp_input+0x20c>)
 8013216:	487d      	ldr	r0, [pc, #500]	@ (801340c <udp_input+0x210>)
 8013218:	f002 ffea 	bl	80161f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d105      	bne.n	801322e <udp_input+0x32>
 8013222:	4b78      	ldr	r3, [pc, #480]	@ (8013404 <udp_input+0x208>)
 8013224:	22d0      	movs	r2, #208	@ 0xd0
 8013226:	497a      	ldr	r1, [pc, #488]	@ (8013410 <udp_input+0x214>)
 8013228:	4878      	ldr	r0, [pc, #480]	@ (801340c <udp_input+0x210>)
 801322a:	f002 ffe1 	bl	80161f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	895b      	ldrh	r3, [r3, #10]
 8013232:	2b07      	cmp	r3, #7
 8013234:	d803      	bhi.n	801323e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7f9 fa6e 	bl	800c718 <pbuf_free>
    goto end;
 801323c:	e0de      	b.n	80133fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013244:	4b73      	ldr	r3, [pc, #460]	@ (8013414 <udp_input+0x218>)
 8013246:	695b      	ldr	r3, [r3, #20]
 8013248:	4a72      	ldr	r2, [pc, #456]	@ (8013414 <udp_input+0x218>)
 801324a:	6812      	ldr	r2, [r2, #0]
 801324c:	4611      	mov	r1, r2
 801324e:	4618      	mov	r0, r3
 8013250:	f001 fd96 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8013254:	4603      	mov	r3, r0
 8013256:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	b29b      	uxth	r3, r3
 801325e:	4618      	mov	r0, r3
 8013260:	f7f7 fe68 	bl	800af34 <lwip_htons>
 8013264:	4603      	mov	r3, r0
 8013266:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	885b      	ldrh	r3, [r3, #2]
 801326c:	b29b      	uxth	r3, r3
 801326e:	4618      	mov	r0, r3
 8013270:	f7f7 fe60 	bl	800af34 <lwip_htons>
 8013274:	4603      	mov	r3, r0
 8013276:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013278:	2300      	movs	r3, #0
 801327a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801327c:	2300      	movs	r3, #0
 801327e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013280:	2300      	movs	r3, #0
 8013282:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013284:	4b64      	ldr	r3, [pc, #400]	@ (8013418 <udp_input+0x21c>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	627b      	str	r3, [r7, #36]	@ 0x24
 801328a:	e054      	b.n	8013336 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801328e:	8a5b      	ldrh	r3, [r3, #18]
 8013290:	89fa      	ldrh	r2, [r7, #14]
 8013292:	429a      	cmp	r2, r3
 8013294:	d14a      	bne.n	801332c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013296:	7cfb      	ldrb	r3, [r7, #19]
 8013298:	461a      	mov	r2, r3
 801329a:	6839      	ldr	r1, [r7, #0]
 801329c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801329e:	f7ff ff49 	bl	8013134 <udp_input_local_match>
 80132a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d041      	beq.n	801332c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80132a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132aa:	7c1b      	ldrb	r3, [r3, #16]
 80132ac:	f003 0304 	and.w	r3, r3, #4
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d11d      	bne.n	80132f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80132b4:	69fb      	ldr	r3, [r7, #28]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d102      	bne.n	80132c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80132ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132bc:	61fb      	str	r3, [r7, #28]
 80132be:	e017      	b.n	80132f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80132c0:	7cfb      	ldrb	r3, [r7, #19]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d014      	beq.n	80132f0 <udp_input+0xf4>
 80132c6:	4b53      	ldr	r3, [pc, #332]	@ (8013414 <udp_input+0x218>)
 80132c8:	695b      	ldr	r3, [r3, #20]
 80132ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ce:	d10f      	bne.n	80132f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	3304      	adds	r3, #4
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d008      	beq.n	80132f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80132de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	3304      	adds	r3, #4
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d101      	bne.n	80132f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80132ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80132f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f2:	8a9b      	ldrh	r3, [r3, #20]
 80132f4:	8a3a      	ldrh	r2, [r7, #16]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d118      	bne.n	801332c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d005      	beq.n	801330e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013304:	685a      	ldr	r2, [r3, #4]
 8013306:	4b43      	ldr	r3, [pc, #268]	@ (8013414 <udp_input+0x218>)
 8013308:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801330a:	429a      	cmp	r2, r3
 801330c:	d10e      	bne.n	801332c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801330e:	6a3b      	ldr	r3, [r7, #32]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d014      	beq.n	801333e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013316:	68da      	ldr	r2, [r3, #12]
 8013318:	6a3b      	ldr	r3, [r7, #32]
 801331a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801331c:	4b3e      	ldr	r3, [pc, #248]	@ (8013418 <udp_input+0x21c>)
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013322:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013324:	4a3c      	ldr	r2, [pc, #240]	@ (8013418 <udp_input+0x21c>)
 8013326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013328:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801332a:	e008      	b.n	801333e <udp_input+0x142>
      }
    }

    prev = pcb;
 801332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801332e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	627b      	str	r3, [r7, #36]	@ 0x24
 8013336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d1a7      	bne.n	801328c <udp_input+0x90>
 801333c:	e000      	b.n	8013340 <udp_input+0x144>
        break;
 801333e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801334c:	2b00      	cmp	r3, #0
 801334e:	d002      	beq.n	8013356 <udp_input+0x15a>
    for_us = 1;
 8013350:	2301      	movs	r3, #1
 8013352:	76fb      	strb	r3, [r7, #27]
 8013354:	e00a      	b.n	801336c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	3304      	adds	r3, #4
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	4b2d      	ldr	r3, [pc, #180]	@ (8013414 <udp_input+0x218>)
 801335e:	695b      	ldr	r3, [r3, #20]
 8013360:	429a      	cmp	r2, r3
 8013362:	bf0c      	ite	eq
 8013364:	2301      	moveq	r3, #1
 8013366:	2300      	movne	r3, #0
 8013368:	b2db      	uxtb	r3, r3
 801336a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801336c:	7efb      	ldrb	r3, [r7, #27]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d041      	beq.n	80133f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013372:	2108      	movs	r1, #8
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7f9 f949 	bl	800c60c <pbuf_remove_header>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00a      	beq.n	8013396 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013380:	4b20      	ldr	r3, [pc, #128]	@ (8013404 <udp_input+0x208>)
 8013382:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013386:	4925      	ldr	r1, [pc, #148]	@ (801341c <udp_input+0x220>)
 8013388:	4820      	ldr	r0, [pc, #128]	@ (801340c <udp_input+0x210>)
 801338a:	f002 ff31 	bl	80161f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f7f9 f9c2 	bl	800c718 <pbuf_free>
      goto end;
 8013394:	e032      	b.n	80133fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013398:	2b00      	cmp	r3, #0
 801339a:	d012      	beq.n	80133c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801339e:	699b      	ldr	r3, [r3, #24]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d00a      	beq.n	80133ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80133a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133a6:	699c      	ldr	r4, [r3, #24]
 80133a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133aa:	69d8      	ldr	r0, [r3, #28]
 80133ac:	8a3b      	ldrh	r3, [r7, #16]
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	4b1b      	ldr	r3, [pc, #108]	@ (8013420 <udp_input+0x224>)
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80133b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80133b8:	e021      	b.n	80133fe <udp_input+0x202>
        pbuf_free(p);
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f7f9 f9ac 	bl	800c718 <pbuf_free>
        goto end;
 80133c0:	e01c      	b.n	80133fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80133c2:	7cfb      	ldrb	r3, [r7, #19]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d112      	bne.n	80133ee <udp_input+0x1f2>
 80133c8:	4b12      	ldr	r3, [pc, #72]	@ (8013414 <udp_input+0x218>)
 80133ca:	695b      	ldr	r3, [r3, #20]
 80133cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80133d0:	2be0      	cmp	r3, #224	@ 0xe0
 80133d2:	d00c      	beq.n	80133ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80133d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013414 <udp_input+0x218>)
 80133d6:	899b      	ldrh	r3, [r3, #12]
 80133d8:	3308      	adds	r3, #8
 80133da:	b29b      	uxth	r3, r3
 80133dc:	b21b      	sxth	r3, r3
 80133de:	4619      	mov	r1, r3
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7f9 f986 	bl	800c6f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80133e6:	2103      	movs	r1, #3
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f001 f9a9 	bl	8014740 <icmp_dest_unreach>
      pbuf_free(p);
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f7f9 f992 	bl	800c718 <pbuf_free>
  return;
 80133f4:	e003      	b.n	80133fe <udp_input+0x202>
    pbuf_free(p);
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7f9 f98e 	bl	800c718 <pbuf_free>
  return;
 80133fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80133fe:	372c      	adds	r7, #44	@ 0x2c
 8013400:	46bd      	mov	sp, r7
 8013402:	bd90      	pop	{r4, r7, pc}
 8013404:	0801a1fc 	.word	0x0801a1fc
 8013408:	0801a2a0 	.word	0x0801a2a0
 801340c:	0801a250 	.word	0x0801a250
 8013410:	0801a2b8 	.word	0x0801a2b8
 8013414:	200091f0 	.word	0x200091f0
 8013418:	2000eb98 	.word	0x2000eb98
 801341c:	0801a2d4 	.word	0x0801a2d4
 8013420:	20009200 	.word	0x20009200

08013424 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b086      	sub	sp, #24
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	4613      	mov	r3, r2
 8013430:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d101      	bne.n	801343c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013438:	4b39      	ldr	r3, [pc, #228]	@ (8013520 <udp_bind+0xfc>)
 801343a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <udp_bind+0x32>
 8013442:	4b38      	ldr	r3, [pc, #224]	@ (8013524 <udp_bind+0x100>)
 8013444:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013448:	4937      	ldr	r1, [pc, #220]	@ (8013528 <udp_bind+0x104>)
 801344a:	4838      	ldr	r0, [pc, #224]	@ (801352c <udp_bind+0x108>)
 801344c:	f002 fed0 	bl	80161f0 <iprintf>
 8013450:	f06f 030f 	mvn.w	r3, #15
 8013454:	e060      	b.n	8013518 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801345a:	4b35      	ldr	r3, [pc, #212]	@ (8013530 <udp_bind+0x10c>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	617b      	str	r3, [r7, #20]
 8013460:	e009      	b.n	8013476 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	429a      	cmp	r2, r3
 8013468:	d102      	bne.n	8013470 <udp_bind+0x4c>
      rebind = 1;
 801346a:	2301      	movs	r3, #1
 801346c:	74fb      	strb	r3, [r7, #19]
      break;
 801346e:	e005      	b.n	801347c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	617b      	str	r3, [r7, #20]
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d1f2      	bne.n	8013462 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801347c:	88fb      	ldrh	r3, [r7, #6]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d109      	bne.n	8013496 <udp_bind+0x72>
    port = udp_new_port();
 8013482:	f7ff fe1f 	bl	80130c4 <udp_new_port>
 8013486:	4603      	mov	r3, r0
 8013488:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801348a:	88fb      	ldrh	r3, [r7, #6]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d12c      	bne.n	80134ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013490:	f06f 0307 	mvn.w	r3, #7
 8013494:	e040      	b.n	8013518 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013496:	4b26      	ldr	r3, [pc, #152]	@ (8013530 <udp_bind+0x10c>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	617b      	str	r3, [r7, #20]
 801349c:	e022      	b.n	80134e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801349e:	68fa      	ldr	r2, [r7, #12]
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d01b      	beq.n	80134de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	8a5b      	ldrh	r3, [r3, #18]
 80134aa:	88fa      	ldrh	r2, [r7, #6]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d116      	bne.n	80134de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d00d      	beq.n	80134d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d00a      	beq.n	80134d8 <udp_bind+0xb4>
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d006      	beq.n	80134d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80134ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d003      	beq.n	80134d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d102      	bne.n	80134de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80134d8:	f06f 0307 	mvn.w	r3, #7
 80134dc:	e01c      	b.n	8013518 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	68db      	ldr	r3, [r3, #12]
 80134e2:	617b      	str	r3, [r7, #20]
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1d9      	bne.n	801349e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d002      	beq.n	80134f6 <udp_bind+0xd2>
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	e000      	b.n	80134f8 <udp_bind+0xd4>
 80134f6:	2300      	movs	r3, #0
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	88fa      	ldrh	r2, [r7, #6]
 8013500:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013502:	7cfb      	ldrb	r3, [r7, #19]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d106      	bne.n	8013516 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013508:	4b09      	ldr	r3, [pc, #36]	@ (8013530 <udp_bind+0x10c>)
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013510:	4a07      	ldr	r2, [pc, #28]	@ (8013530 <udp_bind+0x10c>)
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013516:	2300      	movs	r3, #0
}
 8013518:	4618      	mov	r0, r3
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	0801ad5c 	.word	0x0801ad5c
 8013524:	0801a1fc 	.word	0x0801a1fc
 8013528:	0801a4c4 	.word	0x0801a4c4
 801352c:	0801a250 	.word	0x0801a250
 8013530:	2000eb98 	.word	0x2000eb98

08013534 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d107      	bne.n	8013556 <udp_recv+0x22>
 8013546:	4b08      	ldr	r3, [pc, #32]	@ (8013568 <udp_recv+0x34>)
 8013548:	f240 428a 	movw	r2, #1162	@ 0x48a
 801354c:	4907      	ldr	r1, [pc, #28]	@ (801356c <udp_recv+0x38>)
 801354e:	4808      	ldr	r0, [pc, #32]	@ (8013570 <udp_recv+0x3c>)
 8013550:	f002 fe4e 	bl	80161f0 <iprintf>
 8013554:	e005      	b.n	8013562 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	68ba      	ldr	r2, [r7, #8]
 801355a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	61da      	str	r2, [r3, #28]
}
 8013562:	3710      	adds	r7, #16
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	0801a1fc 	.word	0x0801a1fc
 801356c:	0801a530 	.word	0x0801a530
 8013570:	0801a250 	.word	0x0801a250

08013574 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d107      	bne.n	8013592 <udp_remove+0x1e>
 8013582:	4b19      	ldr	r3, [pc, #100]	@ (80135e8 <udp_remove+0x74>)
 8013584:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013588:	4918      	ldr	r1, [pc, #96]	@ (80135ec <udp_remove+0x78>)
 801358a:	4819      	ldr	r0, [pc, #100]	@ (80135f0 <udp_remove+0x7c>)
 801358c:	f002 fe30 	bl	80161f0 <iprintf>
 8013590:	e026      	b.n	80135e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013592:	4b18      	ldr	r3, [pc, #96]	@ (80135f4 <udp_remove+0x80>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	429a      	cmp	r2, r3
 801359a:	d105      	bne.n	80135a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801359c:	4b15      	ldr	r3, [pc, #84]	@ (80135f4 <udp_remove+0x80>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	4a14      	ldr	r2, [pc, #80]	@ (80135f4 <udp_remove+0x80>)
 80135a4:	6013      	str	r3, [r2, #0]
 80135a6:	e017      	b.n	80135d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135a8:	4b12      	ldr	r3, [pc, #72]	@ (80135f4 <udp_remove+0x80>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	60fb      	str	r3, [r7, #12]
 80135ae:	e010      	b.n	80135d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d009      	beq.n	80135cc <udp_remove+0x58>
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	687a      	ldr	r2, [r7, #4]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d104      	bne.n	80135cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	68da      	ldr	r2, [r3, #12]
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	60da      	str	r2, [r3, #12]
        break;
 80135ca:	e005      	b.n	80135d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	60fb      	str	r3, [r7, #12]
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d1eb      	bne.n	80135b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80135d8:	6879      	ldr	r1, [r7, #4]
 80135da:	2000      	movs	r0, #0
 80135dc:	f7f8 f9f8 	bl	800b9d0 <memp_free>
}
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	0801a1fc 	.word	0x0801a1fc
 80135ec:	0801a548 	.word	0x0801a548
 80135f0:	0801a250 	.word	0x0801a250
 80135f4:	2000eb98 	.word	0x2000eb98

080135f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80135fe:	2000      	movs	r0, #0
 8013600:	f7f8 f970 	bl	800b8e4 <memp_malloc>
 8013604:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d007      	beq.n	801361c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801360c:	2220      	movs	r2, #32
 801360e:	2100      	movs	r1, #0
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f002 fe8c 	bl	801632e <memset>
    pcb->ttl = UDP_TTL;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	22ff      	movs	r2, #255	@ 0xff
 801361a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801361c:	687b      	ldr	r3, [r7, #4]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3708      	adds	r7, #8
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013626:	b580      	push	{r7, lr}
 8013628:	b084      	sub	sp, #16
 801362a:	af00      	add	r7, sp, #0
 801362c:	4603      	mov	r3, r0
 801362e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013630:	f7ff ffe2 	bl	80135f8 <udp_new>
 8013634:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013636:	68fb      	ldr	r3, [r7, #12]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3710      	adds	r7, #16
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013640:	b480      	push	{r7}
 8013642:	b085      	sub	sp, #20
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d01e      	beq.n	801368e <udp_netif_ip_addr_changed+0x4e>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d01a      	beq.n	801368e <udp_netif_ip_addr_changed+0x4e>
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d017      	beq.n	801368e <udp_netif_ip_addr_changed+0x4e>
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d013      	beq.n	801368e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013666:	4b0d      	ldr	r3, [pc, #52]	@ (801369c <udp_netif_ip_addr_changed+0x5c>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	60fb      	str	r3, [r7, #12]
 801366c:	e00c      	b.n	8013688 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681a      	ldr	r2, [r3, #0]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	429a      	cmp	r2, r3
 8013678:	d103      	bne.n	8013682 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	60fb      	str	r3, [r7, #12]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1ef      	bne.n	801366e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801368e:	bf00      	nop
 8013690:	3714      	adds	r7, #20
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr
 801369a:	bf00      	nop
 801369c:	2000eb98 	.word	0x2000eb98

080136a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80136a8:	4915      	ldr	r1, [pc, #84]	@ (8013700 <etharp_free_entry+0x60>)
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	4613      	mov	r3, r2
 80136ae:	005b      	lsls	r3, r3, #1
 80136b0:	4413      	add	r3, r2
 80136b2:	00db      	lsls	r3, r3, #3
 80136b4:	440b      	add	r3, r1
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d013      	beq.n	80136e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80136bc:	4910      	ldr	r1, [pc, #64]	@ (8013700 <etharp_free_entry+0x60>)
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	4613      	mov	r3, r2
 80136c2:	005b      	lsls	r3, r3, #1
 80136c4:	4413      	add	r3, r2
 80136c6:	00db      	lsls	r3, r3, #3
 80136c8:	440b      	add	r3, r1
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f9 f823 	bl	800c718 <pbuf_free>
    arp_table[i].q = NULL;
 80136d2:	490b      	ldr	r1, [pc, #44]	@ (8013700 <etharp_free_entry+0x60>)
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	4613      	mov	r3, r2
 80136d8:	005b      	lsls	r3, r3, #1
 80136da:	4413      	add	r3, r2
 80136dc:	00db      	lsls	r3, r3, #3
 80136de:	440b      	add	r3, r1
 80136e0:	2200      	movs	r2, #0
 80136e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80136e4:	4906      	ldr	r1, [pc, #24]	@ (8013700 <etharp_free_entry+0x60>)
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	4613      	mov	r3, r2
 80136ea:	005b      	lsls	r3, r3, #1
 80136ec:	4413      	add	r3, r2
 80136ee:	00db      	lsls	r3, r3, #3
 80136f0:	440b      	add	r3, r1
 80136f2:	3314      	adds	r3, #20
 80136f4:	2200      	movs	r2, #0
 80136f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80136f8:	bf00      	nop
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	2000eb9c 	.word	0x2000eb9c

08013704 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801370a:	2300      	movs	r3, #0
 801370c:	607b      	str	r3, [r7, #4]
 801370e:	e096      	b.n	801383e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013710:	494f      	ldr	r1, [pc, #316]	@ (8013850 <etharp_tmr+0x14c>)
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	4613      	mov	r3, r2
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	4413      	add	r3, r2
 801371a:	00db      	lsls	r3, r3, #3
 801371c:	440b      	add	r3, r1
 801371e:	3314      	adds	r3, #20
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013724:	78fb      	ldrb	r3, [r7, #3]
 8013726:	2b00      	cmp	r3, #0
 8013728:	f000 8086 	beq.w	8013838 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801372c:	4948      	ldr	r1, [pc, #288]	@ (8013850 <etharp_tmr+0x14c>)
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	4613      	mov	r3, r2
 8013732:	005b      	lsls	r3, r3, #1
 8013734:	4413      	add	r3, r2
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	440b      	add	r3, r1
 801373a:	3312      	adds	r3, #18
 801373c:	881b      	ldrh	r3, [r3, #0]
 801373e:	3301      	adds	r3, #1
 8013740:	b298      	uxth	r0, r3
 8013742:	4943      	ldr	r1, [pc, #268]	@ (8013850 <etharp_tmr+0x14c>)
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	4613      	mov	r3, r2
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	4413      	add	r3, r2
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	440b      	add	r3, r1
 8013750:	3312      	adds	r3, #18
 8013752:	4602      	mov	r2, r0
 8013754:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013756:	493e      	ldr	r1, [pc, #248]	@ (8013850 <etharp_tmr+0x14c>)
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	4613      	mov	r3, r2
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	4413      	add	r3, r2
 8013760:	00db      	lsls	r3, r3, #3
 8013762:	440b      	add	r3, r1
 8013764:	3312      	adds	r3, #18
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801376c:	d215      	bcs.n	801379a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801376e:	4938      	ldr	r1, [pc, #224]	@ (8013850 <etharp_tmr+0x14c>)
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	3314      	adds	r3, #20
 801377e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013780:	2b01      	cmp	r3, #1
 8013782:	d10e      	bne.n	80137a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013784:	4932      	ldr	r1, [pc, #200]	@ (8013850 <etharp_tmr+0x14c>)
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	4613      	mov	r3, r2
 801378a:	005b      	lsls	r3, r3, #1
 801378c:	4413      	add	r3, r2
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	440b      	add	r3, r1
 8013792:	3312      	adds	r3, #18
 8013794:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013796:	2b04      	cmp	r3, #4
 8013798:	d903      	bls.n	80137a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f7ff ff80 	bl	80136a0 <etharp_free_entry>
 80137a0:	e04a      	b.n	8013838 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80137a2:	492b      	ldr	r1, [pc, #172]	@ (8013850 <etharp_tmr+0x14c>)
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	4613      	mov	r3, r2
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	4413      	add	r3, r2
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	440b      	add	r3, r1
 80137b0:	3314      	adds	r3, #20
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	d10a      	bne.n	80137ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80137b8:	4925      	ldr	r1, [pc, #148]	@ (8013850 <etharp_tmr+0x14c>)
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	4613      	mov	r3, r2
 80137be:	005b      	lsls	r3, r3, #1
 80137c0:	4413      	add	r3, r2
 80137c2:	00db      	lsls	r3, r3, #3
 80137c4:	440b      	add	r3, r1
 80137c6:	3314      	adds	r3, #20
 80137c8:	2204      	movs	r2, #4
 80137ca:	701a      	strb	r2, [r3, #0]
 80137cc:	e034      	b.n	8013838 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80137ce:	4920      	ldr	r1, [pc, #128]	@ (8013850 <etharp_tmr+0x14c>)
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	4613      	mov	r3, r2
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	4413      	add	r3, r2
 80137d8:	00db      	lsls	r3, r3, #3
 80137da:	440b      	add	r3, r1
 80137dc:	3314      	adds	r3, #20
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b04      	cmp	r3, #4
 80137e2:	d10a      	bne.n	80137fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80137e4:	491a      	ldr	r1, [pc, #104]	@ (8013850 <etharp_tmr+0x14c>)
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	4613      	mov	r3, r2
 80137ea:	005b      	lsls	r3, r3, #1
 80137ec:	4413      	add	r3, r2
 80137ee:	00db      	lsls	r3, r3, #3
 80137f0:	440b      	add	r3, r1
 80137f2:	3314      	adds	r3, #20
 80137f4:	2202      	movs	r2, #2
 80137f6:	701a      	strb	r2, [r3, #0]
 80137f8:	e01e      	b.n	8013838 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80137fa:	4915      	ldr	r1, [pc, #84]	@ (8013850 <etharp_tmr+0x14c>)
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	4613      	mov	r3, r2
 8013800:	005b      	lsls	r3, r3, #1
 8013802:	4413      	add	r3, r2
 8013804:	00db      	lsls	r3, r3, #3
 8013806:	440b      	add	r3, r1
 8013808:	3314      	adds	r3, #20
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	2b01      	cmp	r3, #1
 801380e:	d113      	bne.n	8013838 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013810:	490f      	ldr	r1, [pc, #60]	@ (8013850 <etharp_tmr+0x14c>)
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	4613      	mov	r3, r2
 8013816:	005b      	lsls	r3, r3, #1
 8013818:	4413      	add	r3, r2
 801381a:	00db      	lsls	r3, r3, #3
 801381c:	440b      	add	r3, r1
 801381e:	3308      	adds	r3, #8
 8013820:	6818      	ldr	r0, [r3, #0]
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	4613      	mov	r3, r2
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	4413      	add	r3, r2
 801382a:	00db      	lsls	r3, r3, #3
 801382c:	4a08      	ldr	r2, [pc, #32]	@ (8013850 <etharp_tmr+0x14c>)
 801382e:	4413      	add	r3, r2
 8013830:	3304      	adds	r3, #4
 8013832:	4619      	mov	r1, r3
 8013834:	f000 fe6e 	bl	8014514 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	3301      	adds	r3, #1
 801383c:	607b      	str	r3, [r7, #4]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b09      	cmp	r3, #9
 8013842:	f77f af65 	ble.w	8013710 <etharp_tmr+0xc>
      }
    }
  }
}
 8013846:	bf00      	nop
 8013848:	bf00      	nop
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}
 8013850:	2000eb9c 	.word	0x2000eb9c

08013854 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b08a      	sub	sp, #40	@ 0x28
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	460b      	mov	r3, r1
 801385e:	607a      	str	r2, [r7, #4]
 8013860:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013862:	230a      	movs	r3, #10
 8013864:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013866:	230a      	movs	r3, #10
 8013868:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801386a:	230a      	movs	r3, #10
 801386c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013872:	230a      	movs	r3, #10
 8013874:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	83bb      	strh	r3, [r7, #28]
 801387a:	2300      	movs	r3, #0
 801387c:	837b      	strh	r3, [r7, #26]
 801387e:	2300      	movs	r3, #0
 8013880:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013882:	2300      	movs	r3, #0
 8013884:	843b      	strh	r3, [r7, #32]
 8013886:	e0ae      	b.n	80139e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801388c:	49a6      	ldr	r1, [pc, #664]	@ (8013b28 <etharp_find_entry+0x2d4>)
 801388e:	4613      	mov	r3, r2
 8013890:	005b      	lsls	r3, r3, #1
 8013892:	4413      	add	r3, r2
 8013894:	00db      	lsls	r3, r3, #3
 8013896:	440b      	add	r3, r1
 8013898:	3314      	adds	r3, #20
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801389e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80138a2:	2b0a      	cmp	r3, #10
 80138a4:	d105      	bne.n	80138b2 <etharp_find_entry+0x5e>
 80138a6:	7dfb      	ldrb	r3, [r7, #23]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d102      	bne.n	80138b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80138ac:	8c3b      	ldrh	r3, [r7, #32]
 80138ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80138b0:	e095      	b.n	80139de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f000 8092 	beq.w	80139de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d009      	beq.n	80138d4 <etharp_find_entry+0x80>
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d806      	bhi.n	80138d4 <etharp_find_entry+0x80>
 80138c6:	4b99      	ldr	r3, [pc, #612]	@ (8013b2c <etharp_find_entry+0x2d8>)
 80138c8:	f240 1223 	movw	r2, #291	@ 0x123
 80138cc:	4998      	ldr	r1, [pc, #608]	@ (8013b30 <etharp_find_entry+0x2dc>)
 80138ce:	4899      	ldr	r0, [pc, #612]	@ (8013b34 <etharp_find_entry+0x2e0>)
 80138d0:	f002 fc8e 	bl	80161f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d020      	beq.n	801391c <etharp_find_entry+0xc8>
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	6819      	ldr	r1, [r3, #0]
 80138de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138e2:	4891      	ldr	r0, [pc, #580]	@ (8013b28 <etharp_find_entry+0x2d4>)
 80138e4:	4613      	mov	r3, r2
 80138e6:	005b      	lsls	r3, r3, #1
 80138e8:	4413      	add	r3, r2
 80138ea:	00db      	lsls	r3, r3, #3
 80138ec:	4403      	add	r3, r0
 80138ee:	3304      	adds	r3, #4
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	4299      	cmp	r1, r3
 80138f4:	d112      	bne.n	801391c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00c      	beq.n	8013916 <etharp_find_entry+0xc2>
 80138fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013900:	4989      	ldr	r1, [pc, #548]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013902:	4613      	mov	r3, r2
 8013904:	005b      	lsls	r3, r3, #1
 8013906:	4413      	add	r3, r2
 8013908:	00db      	lsls	r3, r3, #3
 801390a:	440b      	add	r3, r1
 801390c:	3308      	adds	r3, #8
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	429a      	cmp	r2, r3
 8013914:	d102      	bne.n	801391c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013916:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801391a:	e100      	b.n	8013b1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801391c:	7dfb      	ldrb	r3, [r7, #23]
 801391e:	2b01      	cmp	r3, #1
 8013920:	d140      	bne.n	80139a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013926:	4980      	ldr	r1, [pc, #512]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013928:	4613      	mov	r3, r2
 801392a:	005b      	lsls	r3, r3, #1
 801392c:	4413      	add	r3, r2
 801392e:	00db      	lsls	r3, r3, #3
 8013930:	440b      	add	r3, r1
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d01a      	beq.n	801396e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801393c:	497a      	ldr	r1, [pc, #488]	@ (8013b28 <etharp_find_entry+0x2d4>)
 801393e:	4613      	mov	r3, r2
 8013940:	005b      	lsls	r3, r3, #1
 8013942:	4413      	add	r3, r2
 8013944:	00db      	lsls	r3, r3, #3
 8013946:	440b      	add	r3, r1
 8013948:	3312      	adds	r3, #18
 801394a:	881b      	ldrh	r3, [r3, #0]
 801394c:	8bba      	ldrh	r2, [r7, #28]
 801394e:	429a      	cmp	r2, r3
 8013950:	d845      	bhi.n	80139de <etharp_find_entry+0x18a>
            old_queue = i;
 8013952:	8c3b      	ldrh	r3, [r7, #32]
 8013954:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801395a:	4973      	ldr	r1, [pc, #460]	@ (8013b28 <etharp_find_entry+0x2d4>)
 801395c:	4613      	mov	r3, r2
 801395e:	005b      	lsls	r3, r3, #1
 8013960:	4413      	add	r3, r2
 8013962:	00db      	lsls	r3, r3, #3
 8013964:	440b      	add	r3, r1
 8013966:	3312      	adds	r3, #18
 8013968:	881b      	ldrh	r3, [r3, #0]
 801396a:	83bb      	strh	r3, [r7, #28]
 801396c:	e037      	b.n	80139de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801396e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013972:	496d      	ldr	r1, [pc, #436]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013974:	4613      	mov	r3, r2
 8013976:	005b      	lsls	r3, r3, #1
 8013978:	4413      	add	r3, r2
 801397a:	00db      	lsls	r3, r3, #3
 801397c:	440b      	add	r3, r1
 801397e:	3312      	adds	r3, #18
 8013980:	881b      	ldrh	r3, [r3, #0]
 8013982:	8b7a      	ldrh	r2, [r7, #26]
 8013984:	429a      	cmp	r2, r3
 8013986:	d82a      	bhi.n	80139de <etharp_find_entry+0x18a>
            old_pending = i;
 8013988:	8c3b      	ldrh	r3, [r7, #32]
 801398a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801398c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013990:	4965      	ldr	r1, [pc, #404]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013992:	4613      	mov	r3, r2
 8013994:	005b      	lsls	r3, r3, #1
 8013996:	4413      	add	r3, r2
 8013998:	00db      	lsls	r3, r3, #3
 801399a:	440b      	add	r3, r1
 801399c:	3312      	adds	r3, #18
 801399e:	881b      	ldrh	r3, [r3, #0]
 80139a0:	837b      	strh	r3, [r7, #26]
 80139a2:	e01c      	b.n	80139de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80139a4:	7dfb      	ldrb	r3, [r7, #23]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d919      	bls.n	80139de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80139aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ae:	495e      	ldr	r1, [pc, #376]	@ (8013b28 <etharp_find_entry+0x2d4>)
 80139b0:	4613      	mov	r3, r2
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	4413      	add	r3, r2
 80139b6:	00db      	lsls	r3, r3, #3
 80139b8:	440b      	add	r3, r1
 80139ba:	3312      	adds	r3, #18
 80139bc:	881b      	ldrh	r3, [r3, #0]
 80139be:	8b3a      	ldrh	r2, [r7, #24]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d80c      	bhi.n	80139de <etharp_find_entry+0x18a>
            old_stable = i;
 80139c4:	8c3b      	ldrh	r3, [r7, #32]
 80139c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80139c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139cc:	4956      	ldr	r1, [pc, #344]	@ (8013b28 <etharp_find_entry+0x2d4>)
 80139ce:	4613      	mov	r3, r2
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	4413      	add	r3, r2
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	440b      	add	r3, r1
 80139d8:	3312      	adds	r3, #18
 80139da:	881b      	ldrh	r3, [r3, #0]
 80139dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139de:	8c3b      	ldrh	r3, [r7, #32]
 80139e0:	3301      	adds	r3, #1
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	843b      	strh	r3, [r7, #32]
 80139e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80139ea:	2b09      	cmp	r3, #9
 80139ec:	f77f af4c 	ble.w	8013888 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80139f0:	7afb      	ldrb	r3, [r7, #11]
 80139f2:	f003 0302 	and.w	r3, r3, #2
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d108      	bne.n	8013a0c <etharp_find_entry+0x1b8>
 80139fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80139fe:	2b0a      	cmp	r3, #10
 8013a00:	d107      	bne.n	8013a12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013a02:	7afb      	ldrb	r3, [r7, #11]
 8013a04:	f003 0301 	and.w	r3, r3, #1
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d102      	bne.n	8013a12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a10:	e085      	b.n	8013b1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013a12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013a16:	2b09      	cmp	r3, #9
 8013a18:	dc02      	bgt.n	8013a20 <etharp_find_entry+0x1cc>
    i = empty;
 8013a1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a1c:	843b      	strh	r3, [r7, #32]
 8013a1e:	e039      	b.n	8013a94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013a20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013a24:	2b09      	cmp	r3, #9
 8013a26:	dc14      	bgt.n	8013a52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013a28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013a2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a30:	493d      	ldr	r1, [pc, #244]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013a32:	4613      	mov	r3, r2
 8013a34:	005b      	lsls	r3, r3, #1
 8013a36:	4413      	add	r3, r2
 8013a38:	00db      	lsls	r3, r3, #3
 8013a3a:	440b      	add	r3, r1
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d018      	beq.n	8013a74 <etharp_find_entry+0x220>
 8013a42:	4b3a      	ldr	r3, [pc, #232]	@ (8013b2c <etharp_find_entry+0x2d8>)
 8013a44:	f240 126d 	movw	r2, #365	@ 0x16d
 8013a48:	493b      	ldr	r1, [pc, #236]	@ (8013b38 <etharp_find_entry+0x2e4>)
 8013a4a:	483a      	ldr	r0, [pc, #232]	@ (8013b34 <etharp_find_entry+0x2e0>)
 8013a4c:	f002 fbd0 	bl	80161f0 <iprintf>
 8013a50:	e010      	b.n	8013a74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013a52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013a56:	2b09      	cmp	r3, #9
 8013a58:	dc02      	bgt.n	8013a60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013a5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013a5c:	843b      	strh	r3, [r7, #32]
 8013a5e:	e009      	b.n	8013a74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013a60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013a64:	2b09      	cmp	r3, #9
 8013a66:	dc02      	bgt.n	8013a6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013a68:	8bfb      	ldrh	r3, [r7, #30]
 8013a6a:	843b      	strh	r3, [r7, #32]
 8013a6c:	e002      	b.n	8013a74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8013a72:	e054      	b.n	8013b1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013a74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a78:	2b09      	cmp	r3, #9
 8013a7a:	dd06      	ble.n	8013a8a <etharp_find_entry+0x236>
 8013a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8013b2c <etharp_find_entry+0x2d8>)
 8013a7e:	f240 127f 	movw	r2, #383	@ 0x17f
 8013a82:	492e      	ldr	r1, [pc, #184]	@ (8013b3c <etharp_find_entry+0x2e8>)
 8013a84:	482b      	ldr	r0, [pc, #172]	@ (8013b34 <etharp_find_entry+0x2e0>)
 8013a86:	f002 fbb3 	bl	80161f0 <iprintf>
    etharp_free_entry(i);
 8013a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff fe06 	bl	80136a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013a94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a98:	2b09      	cmp	r3, #9
 8013a9a:	dd06      	ble.n	8013aaa <etharp_find_entry+0x256>
 8013a9c:	4b23      	ldr	r3, [pc, #140]	@ (8013b2c <etharp_find_entry+0x2d8>)
 8013a9e:	f240 1283 	movw	r2, #387	@ 0x183
 8013aa2:	4926      	ldr	r1, [pc, #152]	@ (8013b3c <etharp_find_entry+0x2e8>)
 8013aa4:	4823      	ldr	r0, [pc, #140]	@ (8013b34 <etharp_find_entry+0x2e0>)
 8013aa6:	f002 fba3 	bl	80161f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013aae:	491e      	ldr	r1, [pc, #120]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	440b      	add	r3, r1
 8013aba:	3314      	adds	r3, #20
 8013abc:	781b      	ldrb	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d006      	beq.n	8013ad0 <etharp_find_entry+0x27c>
 8013ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8013b2c <etharp_find_entry+0x2d8>)
 8013ac4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013ac8:	491d      	ldr	r1, [pc, #116]	@ (8013b40 <etharp_find_entry+0x2ec>)
 8013aca:	481a      	ldr	r0, [pc, #104]	@ (8013b34 <etharp_find_entry+0x2e0>)
 8013acc:	f002 fb90 	bl	80161f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00b      	beq.n	8013aee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013ad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	6819      	ldr	r1, [r3, #0]
 8013ade:	4812      	ldr	r0, [pc, #72]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	4413      	add	r3, r2
 8013ae6:	00db      	lsls	r3, r3, #3
 8013ae8:	4403      	add	r3, r0
 8013aea:	3304      	adds	r3, #4
 8013aec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013af2:	490d      	ldr	r1, [pc, #52]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013af4:	4613      	mov	r3, r2
 8013af6:	005b      	lsls	r3, r3, #1
 8013af8:	4413      	add	r3, r2
 8013afa:	00db      	lsls	r3, r3, #3
 8013afc:	440b      	add	r3, r1
 8013afe:	3312      	adds	r3, #18
 8013b00:	2200      	movs	r2, #0
 8013b02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013b04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b08:	4907      	ldr	r1, [pc, #28]	@ (8013b28 <etharp_find_entry+0x2d4>)
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	005b      	lsls	r3, r3, #1
 8013b0e:	4413      	add	r3, r2
 8013b10:	00db      	lsls	r3, r3, #3
 8013b12:	440b      	add	r3, r1
 8013b14:	3308      	adds	r3, #8
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013b1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3728      	adds	r7, #40	@ 0x28
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	2000eb9c 	.word	0x2000eb9c
 8013b2c:	0801a560 	.word	0x0801a560
 8013b30:	0801a598 	.word	0x0801a598
 8013b34:	0801a5d8 	.word	0x0801a5d8
 8013b38:	0801a600 	.word	0x0801a600
 8013b3c:	0801a618 	.word	0x0801a618
 8013b40:	0801a62c 	.word	0x0801a62c

08013b44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b088      	sub	sp, #32
 8013b48:	af02      	add	r7, sp, #8
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	607a      	str	r2, [r7, #4]
 8013b50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013b58:	2b06      	cmp	r3, #6
 8013b5a:	d006      	beq.n	8013b6a <etharp_update_arp_entry+0x26>
 8013b5c:	4b48      	ldr	r3, [pc, #288]	@ (8013c80 <etharp_update_arp_entry+0x13c>)
 8013b5e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013b62:	4948      	ldr	r1, [pc, #288]	@ (8013c84 <etharp_update_arp_entry+0x140>)
 8013b64:	4848      	ldr	r0, [pc, #288]	@ (8013c88 <etharp_update_arp_entry+0x144>)
 8013b66:	f002 fb43 	bl	80161f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d012      	beq.n	8013b96 <etharp_update_arp_entry+0x52>
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00e      	beq.n	8013b96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	68f9      	ldr	r1, [r7, #12]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f001 f8fe 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8013b84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d105      	bne.n	8013b96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b92:	2be0      	cmp	r3, #224	@ 0xe0
 8013b94:	d102      	bne.n	8013b9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013b96:	f06f 030f 	mvn.w	r3, #15
 8013b9a:	e06c      	b.n	8013c76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013b9c:	78fb      	ldrb	r3, [r7, #3]
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	68b8      	ldr	r0, [r7, #8]
 8013ba4:	f7ff fe56 	bl	8013854 <etharp_find_entry>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013bac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da02      	bge.n	8013bba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013bb4:	8afb      	ldrh	r3, [r7, #22]
 8013bb6:	b25b      	sxtb	r3, r3
 8013bb8:	e05d      	b.n	8013c76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013bba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bbe:	4933      	ldr	r1, [pc, #204]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013bc0:	4613      	mov	r3, r2
 8013bc2:	005b      	lsls	r3, r3, #1
 8013bc4:	4413      	add	r3, r2
 8013bc6:	00db      	lsls	r3, r3, #3
 8013bc8:	440b      	add	r3, r1
 8013bca:	3314      	adds	r3, #20
 8013bcc:	2202      	movs	r2, #2
 8013bce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013bd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bd4:	492d      	ldr	r1, [pc, #180]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	005b      	lsls	r3, r3, #1
 8013bda:	4413      	add	r3, r2
 8013bdc:	00db      	lsls	r3, r3, #3
 8013bde:	440b      	add	r3, r1
 8013be0:	3308      	adds	r3, #8
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013be6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bea:	4613      	mov	r3, r2
 8013bec:	005b      	lsls	r3, r3, #1
 8013bee:	4413      	add	r3, r2
 8013bf0:	00db      	lsls	r3, r3, #3
 8013bf2:	3308      	adds	r3, #8
 8013bf4:	4a25      	ldr	r2, [pc, #148]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013bf6:	4413      	add	r3, r2
 8013bf8:	3304      	adds	r3, #4
 8013bfa:	2206      	movs	r2, #6
 8013bfc:	6879      	ldr	r1, [r7, #4]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f002 fc61 	bl	80164c6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013c04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c08:	4920      	ldr	r1, [pc, #128]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013c0a:	4613      	mov	r3, r2
 8013c0c:	005b      	lsls	r3, r3, #1
 8013c0e:	4413      	add	r3, r2
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	440b      	add	r3, r1
 8013c14:	3312      	adds	r3, #18
 8013c16:	2200      	movs	r2, #0
 8013c18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013c1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c1e:	491b      	ldr	r1, [pc, #108]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013c20:	4613      	mov	r3, r2
 8013c22:	005b      	lsls	r3, r3, #1
 8013c24:	4413      	add	r3, r2
 8013c26:	00db      	lsls	r3, r3, #3
 8013c28:	440b      	add	r3, r1
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d021      	beq.n	8013c74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013c30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c34:	4915      	ldr	r1, [pc, #84]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013c36:	4613      	mov	r3, r2
 8013c38:	005b      	lsls	r3, r3, #1
 8013c3a:	4413      	add	r3, r2
 8013c3c:	00db      	lsls	r3, r3, #3
 8013c3e:	440b      	add	r3, r1
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013c44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c48:	4910      	ldr	r1, [pc, #64]	@ (8013c8c <etharp_update_arp_entry+0x148>)
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4413      	add	r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	440b      	add	r3, r1
 8013c54:	2200      	movs	r2, #0
 8013c56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013c5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6939      	ldr	r1, [r7, #16]
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f001 ff97 	bl	8015b9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013c6e:	6938      	ldr	r0, [r7, #16]
 8013c70:	f7f8 fd52 	bl	800c718 <pbuf_free>
  }
  return ERR_OK;
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3718      	adds	r7, #24
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	0801a560 	.word	0x0801a560
 8013c84:	0801a658 	.word	0x0801a658
 8013c88:	0801a5d8 	.word	0x0801a5d8
 8013c8c:	2000eb9c 	.word	0x2000eb9c

08013c90 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c98:	2300      	movs	r3, #0
 8013c9a:	60fb      	str	r3, [r7, #12]
 8013c9c:	e01e      	b.n	8013cdc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013c9e:	4913      	ldr	r1, [pc, #76]	@ (8013cec <etharp_cleanup_netif+0x5c>)
 8013ca0:	68fa      	ldr	r2, [r7, #12]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	005b      	lsls	r3, r3, #1
 8013ca6:	4413      	add	r3, r2
 8013ca8:	00db      	lsls	r3, r3, #3
 8013caa:	440b      	add	r3, r1
 8013cac:	3314      	adds	r3, #20
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013cb2:	7afb      	ldrb	r3, [r7, #11]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00e      	beq.n	8013cd6 <etharp_cleanup_netif+0x46>
 8013cb8:	490c      	ldr	r1, [pc, #48]	@ (8013cec <etharp_cleanup_netif+0x5c>)
 8013cba:	68fa      	ldr	r2, [r7, #12]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	4413      	add	r3, r2
 8013cc2:	00db      	lsls	r3, r3, #3
 8013cc4:	440b      	add	r3, r1
 8013cc6:	3308      	adds	r3, #8
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d102      	bne.n	8013cd6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	f7ff fce5 	bl	80136a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	60fb      	str	r3, [r7, #12]
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	2b09      	cmp	r3, #9
 8013ce0:	dddd      	ble.n	8013c9e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013ce2:	bf00      	nop
 8013ce4:	bf00      	nop
 8013ce6:	3710      	adds	r7, #16
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	2000eb9c 	.word	0x2000eb9c

08013cf0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013cf0:	b5b0      	push	{r4, r5, r7, lr}
 8013cf2:	b08a      	sub	sp, #40	@ 0x28
 8013cf4:	af04      	add	r7, sp, #16
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d107      	bne.n	8013d10 <etharp_input+0x20>
 8013d00:	4b3d      	ldr	r3, [pc, #244]	@ (8013df8 <etharp_input+0x108>)
 8013d02:	f240 228a 	movw	r2, #650	@ 0x28a
 8013d06:	493d      	ldr	r1, [pc, #244]	@ (8013dfc <etharp_input+0x10c>)
 8013d08:	483d      	ldr	r0, [pc, #244]	@ (8013e00 <etharp_input+0x110>)
 8013d0a:	f002 fa71 	bl	80161f0 <iprintf>
 8013d0e:	e06f      	b.n	8013df0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d20:	d10c      	bne.n	8013d3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013d26:	2b06      	cmp	r3, #6
 8013d28:	d108      	bne.n	8013d3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013d2e:	2b04      	cmp	r3, #4
 8013d30:	d104      	bne.n	8013d3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	885b      	ldrh	r3, [r3, #2]
 8013d36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013d38:	2b08      	cmp	r3, #8
 8013d3a:	d003      	beq.n	8013d44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f7f8 fceb 	bl	800c718 <pbuf_free>
    return;
 8013d42:	e055      	b.n	8013df0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	330e      	adds	r3, #14
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	3318      	adds	r3, #24
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	3304      	adds	r3, #4
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d102      	bne.n	8013d64 <etharp_input+0x74>
    for_us = 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	75fb      	strb	r3, [r7, #23]
 8013d62:	e009      	b.n	8013d78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	3304      	adds	r3, #4
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	bf0c      	ite	eq
 8013d70:	2301      	moveq	r3, #1
 8013d72:	2300      	movne	r3, #0
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	f103 0208 	add.w	r2, r3, #8
 8013d7e:	7dfb      	ldrb	r3, [r7, #23]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d001      	beq.n	8013d88 <etharp_input+0x98>
 8013d84:	2301      	movs	r3, #1
 8013d86:	e000      	b.n	8013d8a <etharp_input+0x9a>
 8013d88:	2302      	movs	r3, #2
 8013d8a:	f107 010c 	add.w	r1, r7, #12
 8013d8e:	6838      	ldr	r0, [r7, #0]
 8013d90:	f7ff fed8 	bl	8013b44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013d94:	693b      	ldr	r3, [r7, #16]
 8013d96:	88db      	ldrh	r3, [r3, #6]
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d9e:	d003      	beq.n	8013da8 <etharp_input+0xb8>
 8013da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013da4:	d01e      	beq.n	8013de4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013da6:	e020      	b.n	8013dea <etharp_input+0xfa>
      if (for_us) {
 8013da8:	7dfb      	ldrb	r3, [r7, #23]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d01c      	beq.n	8013de8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013dc4:	693a      	ldr	r2, [r7, #16]
 8013dc6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013dc8:	2102      	movs	r1, #2
 8013dca:	9103      	str	r1, [sp, #12]
 8013dcc:	f107 010c 	add.w	r1, r7, #12
 8013dd0:	9102      	str	r1, [sp, #8]
 8013dd2:	9201      	str	r2, [sp, #4]
 8013dd4:	9300      	str	r3, [sp, #0]
 8013dd6:	462b      	mov	r3, r5
 8013dd8:	4622      	mov	r2, r4
 8013dda:	4601      	mov	r1, r0
 8013ddc:	6838      	ldr	r0, [r7, #0]
 8013dde:	f000 faeb 	bl	80143b8 <etharp_raw>
      break;
 8013de2:	e001      	b.n	8013de8 <etharp_input+0xf8>
      break;
 8013de4:	bf00      	nop
 8013de6:	e000      	b.n	8013dea <etharp_input+0xfa>
      break;
 8013de8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f7f8 fc94 	bl	800c718 <pbuf_free>
}
 8013df0:	3718      	adds	r7, #24
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bdb0      	pop	{r4, r5, r7, pc}
 8013df6:	bf00      	nop
 8013df8:	0801a560 	.word	0x0801a560
 8013dfc:	0801a6b0 	.word	0x0801a6b0
 8013e00:	0801a5d8 	.word	0x0801a5d8

08013e04 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af02      	add	r7, sp, #8
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013e12:	79fa      	ldrb	r2, [r7, #7]
 8013e14:	4944      	ldr	r1, [pc, #272]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013e16:	4613      	mov	r3, r2
 8013e18:	005b      	lsls	r3, r3, #1
 8013e1a:	4413      	add	r3, r2
 8013e1c:	00db      	lsls	r3, r3, #3
 8013e1e:	440b      	add	r3, r1
 8013e20:	3314      	adds	r3, #20
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	d806      	bhi.n	8013e36 <etharp_output_to_arp_index+0x32>
 8013e28:	4b40      	ldr	r3, [pc, #256]	@ (8013f2c <etharp_output_to_arp_index+0x128>)
 8013e2a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013e2e:	4940      	ldr	r1, [pc, #256]	@ (8013f30 <etharp_output_to_arp_index+0x12c>)
 8013e30:	4840      	ldr	r0, [pc, #256]	@ (8013f34 <etharp_output_to_arp_index+0x130>)
 8013e32:	f002 f9dd 	bl	80161f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013e36:	79fa      	ldrb	r2, [r7, #7]
 8013e38:	493b      	ldr	r1, [pc, #236]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	440b      	add	r3, r1
 8013e44:	3314      	adds	r3, #20
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	2b02      	cmp	r3, #2
 8013e4a:	d153      	bne.n	8013ef4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013e4c:	79fa      	ldrb	r2, [r7, #7]
 8013e4e:	4936      	ldr	r1, [pc, #216]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	3312      	adds	r3, #18
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013e62:	d919      	bls.n	8013e98 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013e64:	79fa      	ldrb	r2, [r7, #7]
 8013e66:	4613      	mov	r3, r2
 8013e68:	005b      	lsls	r3, r3, #1
 8013e6a:	4413      	add	r3, r2
 8013e6c:	00db      	lsls	r3, r3, #3
 8013e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013e70:	4413      	add	r3, r2
 8013e72:	3304      	adds	r3, #4
 8013e74:	4619      	mov	r1, r3
 8013e76:	68f8      	ldr	r0, [r7, #12]
 8013e78:	f000 fb4c 	bl	8014514 <etharp_request>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d138      	bne.n	8013ef4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013e82:	79fa      	ldrb	r2, [r7, #7]
 8013e84:	4928      	ldr	r1, [pc, #160]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013e86:	4613      	mov	r3, r2
 8013e88:	005b      	lsls	r3, r3, #1
 8013e8a:	4413      	add	r3, r2
 8013e8c:	00db      	lsls	r3, r3, #3
 8013e8e:	440b      	add	r3, r1
 8013e90:	3314      	adds	r3, #20
 8013e92:	2203      	movs	r2, #3
 8013e94:	701a      	strb	r2, [r3, #0]
 8013e96:	e02d      	b.n	8013ef4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013e98:	79fa      	ldrb	r2, [r7, #7]
 8013e9a:	4923      	ldr	r1, [pc, #140]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	4413      	add	r3, r2
 8013ea2:	00db      	lsls	r3, r3, #3
 8013ea4:	440b      	add	r3, r1
 8013ea6:	3312      	adds	r3, #18
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013eae:	d321      	bcc.n	8013ef4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013eb0:	79fa      	ldrb	r2, [r7, #7]
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	005b      	lsls	r3, r3, #1
 8013eb6:	4413      	add	r3, r2
 8013eb8:	00db      	lsls	r3, r3, #3
 8013eba:	4a1b      	ldr	r2, [pc, #108]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013ebc:	4413      	add	r3, r2
 8013ebe:	1d19      	adds	r1, r3, #4
 8013ec0:	79fa      	ldrb	r2, [r7, #7]
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	005b      	lsls	r3, r3, #1
 8013ec6:	4413      	add	r3, r2
 8013ec8:	00db      	lsls	r3, r3, #3
 8013eca:	3308      	adds	r3, #8
 8013ecc:	4a16      	ldr	r2, [pc, #88]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013ece:	4413      	add	r3, r2
 8013ed0:	3304      	adds	r3, #4
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f000 fafb 	bl	80144d0 <etharp_request_dst>
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d109      	bne.n	8013ef4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013ee0:	79fa      	ldrb	r2, [r7, #7]
 8013ee2:	4911      	ldr	r1, [pc, #68]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	005b      	lsls	r3, r3, #1
 8013ee8:	4413      	add	r3, r2
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	440b      	add	r3, r1
 8013eee:	3314      	adds	r3, #20
 8013ef0:	2203      	movs	r2, #3
 8013ef2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8013efa:	79fa      	ldrb	r2, [r7, #7]
 8013efc:	4613      	mov	r3, r2
 8013efe:	005b      	lsls	r3, r3, #1
 8013f00:	4413      	add	r3, r2
 8013f02:	00db      	lsls	r3, r3, #3
 8013f04:	3308      	adds	r3, #8
 8013f06:	4a08      	ldr	r2, [pc, #32]	@ (8013f28 <etharp_output_to_arp_index+0x124>)
 8013f08:	4413      	add	r3, r2
 8013f0a:	3304      	adds	r3, #4
 8013f0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013f10:	9200      	str	r2, [sp, #0]
 8013f12:	460a      	mov	r2, r1
 8013f14:	68b9      	ldr	r1, [r7, #8]
 8013f16:	68f8      	ldr	r0, [r7, #12]
 8013f18:	f001 fe40 	bl	8015b9c <ethernet_output>
 8013f1c:	4603      	mov	r3, r0
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	2000eb9c 	.word	0x2000eb9c
 8013f2c:	0801a560 	.word	0x0801a560
 8013f30:	0801a6d0 	.word	0x0801a6d0
 8013f34:	0801a5d8 	.word	0x0801a5d8

08013f38 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b08a      	sub	sp, #40	@ 0x28
 8013f3c:	af02      	add	r7, sp, #8
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d106      	bne.n	8013f5c <etharp_output+0x24>
 8013f4e:	4b73      	ldr	r3, [pc, #460]	@ (801411c <etharp_output+0x1e4>)
 8013f50:	f240 321e 	movw	r2, #798	@ 0x31e
 8013f54:	4972      	ldr	r1, [pc, #456]	@ (8014120 <etharp_output+0x1e8>)
 8013f56:	4873      	ldr	r0, [pc, #460]	@ (8014124 <etharp_output+0x1ec>)
 8013f58:	f002 f94a 	bl	80161f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d106      	bne.n	8013f70 <etharp_output+0x38>
 8013f62:	4b6e      	ldr	r3, [pc, #440]	@ (801411c <etharp_output+0x1e4>)
 8013f64:	f240 321f 	movw	r2, #799	@ 0x31f
 8013f68:	496f      	ldr	r1, [pc, #444]	@ (8014128 <etharp_output+0x1f0>)
 8013f6a:	486e      	ldr	r0, [pc, #440]	@ (8014124 <etharp_output+0x1ec>)
 8013f6c:	f002 f940 	bl	80161f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <etharp_output+0x4c>
 8013f76:	4b69      	ldr	r3, [pc, #420]	@ (801411c <etharp_output+0x1e4>)
 8013f78:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013f7c:	496b      	ldr	r1, [pc, #428]	@ (801412c <etharp_output+0x1f4>)
 8013f7e:	4869      	ldr	r0, [pc, #420]	@ (8014124 <etharp_output+0x1ec>)
 8013f80:	f002 f936 	bl	80161f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	68f9      	ldr	r1, [r7, #12]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f000 fef8 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d002      	beq.n	8013f9c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013f96:	4b66      	ldr	r3, [pc, #408]	@ (8014130 <etharp_output+0x1f8>)
 8013f98:	61fb      	str	r3, [r7, #28]
 8013f9a:	e0af      	b.n	80140fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013fa4:	2be0      	cmp	r3, #224	@ 0xe0
 8013fa6:	d118      	bne.n	8013fda <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013fac:	2300      	movs	r3, #0
 8013fae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013fb0:	235e      	movs	r3, #94	@ 0x5e
 8013fb2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	3302      	adds	r3, #2
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	3303      	adds	r3, #3
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013fd2:	f107 0310 	add.w	r3, r7, #16
 8013fd6:	61fb      	str	r3, [r7, #28]
 8013fd8:	e090      	b.n	80140fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	3304      	adds	r3, #4
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	405a      	eors	r2, r3
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	3308      	adds	r3, #8
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4013      	ands	r3, r2
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d012      	beq.n	8014018 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013ff8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8013ffc:	4293      	cmp	r3, r2
 8013ffe:	d00b      	beq.n	8014018 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	330c      	adds	r3, #12
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d003      	beq.n	8014012 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	330c      	adds	r3, #12
 801400e:	61bb      	str	r3, [r7, #24]
 8014010:	e002      	b.n	8014018 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014012:	f06f 0303 	mvn.w	r3, #3
 8014016:	e07d      	b.n	8014114 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014018:	4b46      	ldr	r3, [pc, #280]	@ (8014134 <etharp_output+0x1fc>)
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	4619      	mov	r1, r3
 801401e:	4a46      	ldr	r2, [pc, #280]	@ (8014138 <etharp_output+0x200>)
 8014020:	460b      	mov	r3, r1
 8014022:	005b      	lsls	r3, r3, #1
 8014024:	440b      	add	r3, r1
 8014026:	00db      	lsls	r3, r3, #3
 8014028:	4413      	add	r3, r2
 801402a:	3314      	adds	r3, #20
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	2b01      	cmp	r3, #1
 8014030:	d925      	bls.n	801407e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014032:	4b40      	ldr	r3, [pc, #256]	@ (8014134 <etharp_output+0x1fc>)
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	4619      	mov	r1, r3
 8014038:	4a3f      	ldr	r2, [pc, #252]	@ (8014138 <etharp_output+0x200>)
 801403a:	460b      	mov	r3, r1
 801403c:	005b      	lsls	r3, r3, #1
 801403e:	440b      	add	r3, r1
 8014040:	00db      	lsls	r3, r3, #3
 8014042:	4413      	add	r3, r2
 8014044:	3308      	adds	r3, #8
 8014046:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014048:	68fa      	ldr	r2, [r7, #12]
 801404a:	429a      	cmp	r2, r3
 801404c:	d117      	bne.n	801407e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	4b38      	ldr	r3, [pc, #224]	@ (8014134 <etharp_output+0x1fc>)
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	4618      	mov	r0, r3
 8014058:	4937      	ldr	r1, [pc, #220]	@ (8014138 <etharp_output+0x200>)
 801405a:	4603      	mov	r3, r0
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	4403      	add	r3, r0
 8014060:	00db      	lsls	r3, r3, #3
 8014062:	440b      	add	r3, r1
 8014064:	3304      	adds	r3, #4
 8014066:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014068:	429a      	cmp	r2, r3
 801406a:	d108      	bne.n	801407e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801406c:	4b31      	ldr	r3, [pc, #196]	@ (8014134 <etharp_output+0x1fc>)
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	461a      	mov	r2, r3
 8014072:	68b9      	ldr	r1, [r7, #8]
 8014074:	68f8      	ldr	r0, [r7, #12]
 8014076:	f7ff fec5 	bl	8013e04 <etharp_output_to_arp_index>
 801407a:	4603      	mov	r3, r0
 801407c:	e04a      	b.n	8014114 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801407e:	2300      	movs	r3, #0
 8014080:	75fb      	strb	r3, [r7, #23]
 8014082:	e031      	b.n	80140e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014084:	7dfa      	ldrb	r2, [r7, #23]
 8014086:	492c      	ldr	r1, [pc, #176]	@ (8014138 <etharp_output+0x200>)
 8014088:	4613      	mov	r3, r2
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	4413      	add	r3, r2
 801408e:	00db      	lsls	r3, r3, #3
 8014090:	440b      	add	r3, r1
 8014092:	3314      	adds	r3, #20
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	2b01      	cmp	r3, #1
 8014098:	d923      	bls.n	80140e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801409a:	7dfa      	ldrb	r2, [r7, #23]
 801409c:	4926      	ldr	r1, [pc, #152]	@ (8014138 <etharp_output+0x200>)
 801409e:	4613      	mov	r3, r2
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	440b      	add	r3, r1
 80140a8:	3308      	adds	r3, #8
 80140aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80140ac:	68fa      	ldr	r2, [r7, #12]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d117      	bne.n	80140e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	6819      	ldr	r1, [r3, #0]
 80140b6:	7dfa      	ldrb	r2, [r7, #23]
 80140b8:	481f      	ldr	r0, [pc, #124]	@ (8014138 <etharp_output+0x200>)
 80140ba:	4613      	mov	r3, r2
 80140bc:	005b      	lsls	r3, r3, #1
 80140be:	4413      	add	r3, r2
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	4403      	add	r3, r0
 80140c4:	3304      	adds	r3, #4
 80140c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80140c8:	4299      	cmp	r1, r3
 80140ca:	d10a      	bne.n	80140e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80140cc:	4a19      	ldr	r2, [pc, #100]	@ (8014134 <etharp_output+0x1fc>)
 80140ce:	7dfb      	ldrb	r3, [r7, #23]
 80140d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80140d2:	7dfb      	ldrb	r3, [r7, #23]
 80140d4:	461a      	mov	r2, r3
 80140d6:	68b9      	ldr	r1, [r7, #8]
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f7ff fe93 	bl	8013e04 <etharp_output_to_arp_index>
 80140de:	4603      	mov	r3, r0
 80140e0:	e018      	b.n	8014114 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80140e2:	7dfb      	ldrb	r3, [r7, #23]
 80140e4:	3301      	adds	r3, #1
 80140e6:	75fb      	strb	r3, [r7, #23]
 80140e8:	7dfb      	ldrb	r3, [r7, #23]
 80140ea:	2b09      	cmp	r3, #9
 80140ec:	d9ca      	bls.n	8014084 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80140ee:	68ba      	ldr	r2, [r7, #8]
 80140f0:	69b9      	ldr	r1, [r7, #24]
 80140f2:	68f8      	ldr	r0, [r7, #12]
 80140f4:	f000 f822 	bl	801413c <etharp_query>
 80140f8:	4603      	mov	r3, r0
 80140fa:	e00b      	b.n	8014114 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014102:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	69fb      	ldr	r3, [r7, #28]
 801410a:	68b9      	ldr	r1, [r7, #8]
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f001 fd45 	bl	8015b9c <ethernet_output>
 8014112:	4603      	mov	r3, r0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3720      	adds	r7, #32
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	0801a560 	.word	0x0801a560
 8014120:	0801a6b0 	.word	0x0801a6b0
 8014124:	0801a5d8 	.word	0x0801a5d8
 8014128:	0801a700 	.word	0x0801a700
 801412c:	0801a6a0 	.word	0x0801a6a0
 8014130:	0801ad60 	.word	0x0801ad60
 8014134:	2000ec8c 	.word	0x2000ec8c
 8014138:	2000eb9c 	.word	0x2000eb9c

0801413c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b08c      	sub	sp, #48	@ 0x30
 8014140:	af02      	add	r7, sp, #8
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	3326      	adds	r3, #38	@ 0x26
 801414c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801414e:	23ff      	movs	r3, #255	@ 0xff
 8014150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014154:	2300      	movs	r3, #0
 8014156:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	68f9      	ldr	r1, [r7, #12]
 801415e:	4618      	mov	r0, r3
 8014160:	f000 fe0e 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d10c      	bne.n	8014184 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014172:	2be0      	cmp	r3, #224	@ 0xe0
 8014174:	d006      	beq.n	8014184 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d003      	beq.n	8014184 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d102      	bne.n	801418a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014184:	f06f 030f 	mvn.w	r3, #15
 8014188:	e101      	b.n	801438e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	2101      	movs	r1, #1
 801418e:	68b8      	ldr	r0, [r7, #8]
 8014190:	f7ff fb60 	bl	8013854 <etharp_find_entry>
 8014194:	4603      	mov	r3, r0
 8014196:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801419c:	2b00      	cmp	r3, #0
 801419e:	da02      	bge.n	80141a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80141a0:	8a7b      	ldrh	r3, [r7, #18]
 80141a2:	b25b      	sxtb	r3, r3
 80141a4:	e0f3      	b.n	801438e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80141a6:	8a7b      	ldrh	r3, [r7, #18]
 80141a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80141aa:	d906      	bls.n	80141ba <etharp_query+0x7e>
 80141ac:	4b7a      	ldr	r3, [pc, #488]	@ (8014398 <etharp_query+0x25c>)
 80141ae:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80141b2:	497a      	ldr	r1, [pc, #488]	@ (801439c <etharp_query+0x260>)
 80141b4:	487a      	ldr	r0, [pc, #488]	@ (80143a0 <etharp_query+0x264>)
 80141b6:	f002 f81b 	bl	80161f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80141ba:	8a7b      	ldrh	r3, [r7, #18]
 80141bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80141be:	7c7a      	ldrb	r2, [r7, #17]
 80141c0:	4978      	ldr	r1, [pc, #480]	@ (80143a4 <etharp_query+0x268>)
 80141c2:	4613      	mov	r3, r2
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	4413      	add	r3, r2
 80141c8:	00db      	lsls	r3, r3, #3
 80141ca:	440b      	add	r3, r1
 80141cc:	3314      	adds	r3, #20
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d115      	bne.n	8014200 <etharp_query+0xc4>
    is_new_entry = 1;
 80141d4:	2301      	movs	r3, #1
 80141d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80141d8:	7c7a      	ldrb	r2, [r7, #17]
 80141da:	4972      	ldr	r1, [pc, #456]	@ (80143a4 <etharp_query+0x268>)
 80141dc:	4613      	mov	r3, r2
 80141de:	005b      	lsls	r3, r3, #1
 80141e0:	4413      	add	r3, r2
 80141e2:	00db      	lsls	r3, r3, #3
 80141e4:	440b      	add	r3, r1
 80141e6:	3314      	adds	r3, #20
 80141e8:	2201      	movs	r2, #1
 80141ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80141ec:	7c7a      	ldrb	r2, [r7, #17]
 80141ee:	496d      	ldr	r1, [pc, #436]	@ (80143a4 <etharp_query+0x268>)
 80141f0:	4613      	mov	r3, r2
 80141f2:	005b      	lsls	r3, r3, #1
 80141f4:	4413      	add	r3, r2
 80141f6:	00db      	lsls	r3, r3, #3
 80141f8:	440b      	add	r3, r1
 80141fa:	3308      	adds	r3, #8
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014200:	7c7a      	ldrb	r2, [r7, #17]
 8014202:	4968      	ldr	r1, [pc, #416]	@ (80143a4 <etharp_query+0x268>)
 8014204:	4613      	mov	r3, r2
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	4413      	add	r3, r2
 801420a:	00db      	lsls	r3, r3, #3
 801420c:	440b      	add	r3, r1
 801420e:	3314      	adds	r3, #20
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d011      	beq.n	801423a <etharp_query+0xfe>
 8014216:	7c7a      	ldrb	r2, [r7, #17]
 8014218:	4962      	ldr	r1, [pc, #392]	@ (80143a4 <etharp_query+0x268>)
 801421a:	4613      	mov	r3, r2
 801421c:	005b      	lsls	r3, r3, #1
 801421e:	4413      	add	r3, r2
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	440b      	add	r3, r1
 8014224:	3314      	adds	r3, #20
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	2b01      	cmp	r3, #1
 801422a:	d806      	bhi.n	801423a <etharp_query+0xfe>
 801422c:	4b5a      	ldr	r3, [pc, #360]	@ (8014398 <etharp_query+0x25c>)
 801422e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014232:	495d      	ldr	r1, [pc, #372]	@ (80143a8 <etharp_query+0x26c>)
 8014234:	485a      	ldr	r0, [pc, #360]	@ (80143a0 <etharp_query+0x264>)
 8014236:	f001 ffdb 	bl	80161f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801423a:	6a3b      	ldr	r3, [r7, #32]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d102      	bne.n	8014246 <etharp_query+0x10a>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d10c      	bne.n	8014260 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014246:	68b9      	ldr	r1, [r7, #8]
 8014248:	68f8      	ldr	r0, [r7, #12]
 801424a:	f000 f963 	bl	8014514 <etharp_request>
 801424e:	4603      	mov	r3, r0
 8014250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d102      	bne.n	8014260 <etharp_query+0x124>
      return result;
 801425a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801425e:	e096      	b.n	801438e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d106      	bne.n	8014274 <etharp_query+0x138>
 8014266:	4b4c      	ldr	r3, [pc, #304]	@ (8014398 <etharp_query+0x25c>)
 8014268:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801426c:	494f      	ldr	r1, [pc, #316]	@ (80143ac <etharp_query+0x270>)
 801426e:	484c      	ldr	r0, [pc, #304]	@ (80143a0 <etharp_query+0x264>)
 8014270:	f001 ffbe 	bl	80161f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014274:	7c7a      	ldrb	r2, [r7, #17]
 8014276:	494b      	ldr	r1, [pc, #300]	@ (80143a4 <etharp_query+0x268>)
 8014278:	4613      	mov	r3, r2
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	4413      	add	r3, r2
 801427e:	00db      	lsls	r3, r3, #3
 8014280:	440b      	add	r3, r1
 8014282:	3314      	adds	r3, #20
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	2b01      	cmp	r3, #1
 8014288:	d917      	bls.n	80142ba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801428a:	4a49      	ldr	r2, [pc, #292]	@ (80143b0 <etharp_query+0x274>)
 801428c:	7c7b      	ldrb	r3, [r7, #17]
 801428e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014290:	7c7a      	ldrb	r2, [r7, #17]
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	3308      	adds	r3, #8
 801429c:	4a41      	ldr	r2, [pc, #260]	@ (80143a4 <etharp_query+0x268>)
 801429e:	4413      	add	r3, r2
 80142a0:	3304      	adds	r3, #4
 80142a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80142a6:	9200      	str	r2, [sp, #0]
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	6879      	ldr	r1, [r7, #4]
 80142ac:	68f8      	ldr	r0, [r7, #12]
 80142ae:	f001 fc75 	bl	8015b9c <ethernet_output>
 80142b2:	4603      	mov	r3, r0
 80142b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80142b8:	e067      	b.n	801438a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80142ba:	7c7a      	ldrb	r2, [r7, #17]
 80142bc:	4939      	ldr	r1, [pc, #228]	@ (80143a4 <etharp_query+0x268>)
 80142be:	4613      	mov	r3, r2
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	4413      	add	r3, r2
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	440b      	add	r3, r1
 80142c8:	3314      	adds	r3, #20
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d15c      	bne.n	801438a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80142d0:	2300      	movs	r3, #0
 80142d2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80142d8:	e01c      	b.n	8014314 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	895a      	ldrh	r2, [r3, #10]
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	891b      	ldrh	r3, [r3, #8]
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d10a      	bne.n	80142fc <etharp_query+0x1c0>
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d006      	beq.n	80142fc <etharp_query+0x1c0>
 80142ee:	4b2a      	ldr	r3, [pc, #168]	@ (8014398 <etharp_query+0x25c>)
 80142f0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80142f4:	492f      	ldr	r1, [pc, #188]	@ (80143b4 <etharp_query+0x278>)
 80142f6:	482a      	ldr	r0, [pc, #168]	@ (80143a0 <etharp_query+0x264>)
 80142f8:	f001 ff7a 	bl	80161f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	7b1b      	ldrb	r3, [r3, #12]
 8014300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014304:	2b00      	cmp	r3, #0
 8014306:	d002      	beq.n	801430e <etharp_query+0x1d2>
        copy_needed = 1;
 8014308:	2301      	movs	r3, #1
 801430a:	61bb      	str	r3, [r7, #24]
        break;
 801430c:	e005      	b.n	801431a <etharp_query+0x1de>
      }
      p = p->next;
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d1df      	bne.n	80142da <etharp_query+0x19e>
    }
    if (copy_needed) {
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d007      	beq.n	8014330 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014326:	200e      	movs	r0, #14
 8014328:	f7f8 fc5e 	bl	800cbe8 <pbuf_clone>
 801432c:	61f8      	str	r0, [r7, #28]
 801432e:	e004      	b.n	801433a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014334:	69f8      	ldr	r0, [r7, #28]
 8014336:	f7f8 fa95 	bl	800c864 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d021      	beq.n	8014384 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014340:	7c7a      	ldrb	r2, [r7, #17]
 8014342:	4918      	ldr	r1, [pc, #96]	@ (80143a4 <etharp_query+0x268>)
 8014344:	4613      	mov	r3, r2
 8014346:	005b      	lsls	r3, r3, #1
 8014348:	4413      	add	r3, r2
 801434a:	00db      	lsls	r3, r3, #3
 801434c:	440b      	add	r3, r1
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d00a      	beq.n	801436a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014354:	7c7a      	ldrb	r2, [r7, #17]
 8014356:	4913      	ldr	r1, [pc, #76]	@ (80143a4 <etharp_query+0x268>)
 8014358:	4613      	mov	r3, r2
 801435a:	005b      	lsls	r3, r3, #1
 801435c:	4413      	add	r3, r2
 801435e:	00db      	lsls	r3, r3, #3
 8014360:	440b      	add	r3, r1
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	4618      	mov	r0, r3
 8014366:	f7f8 f9d7 	bl	800c718 <pbuf_free>
      }
      arp_table[i].q = p;
 801436a:	7c7a      	ldrb	r2, [r7, #17]
 801436c:	490d      	ldr	r1, [pc, #52]	@ (80143a4 <etharp_query+0x268>)
 801436e:	4613      	mov	r3, r2
 8014370:	005b      	lsls	r3, r3, #1
 8014372:	4413      	add	r3, r2
 8014374:	00db      	lsls	r3, r3, #3
 8014376:	440b      	add	r3, r1
 8014378:	69fa      	ldr	r2, [r7, #28]
 801437a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801437c:	2300      	movs	r3, #0
 801437e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014382:	e002      	b.n	801438a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014384:	23ff      	movs	r3, #255	@ 0xff
 8014386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801438a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801438e:	4618      	mov	r0, r3
 8014390:	3728      	adds	r7, #40	@ 0x28
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	0801a560 	.word	0x0801a560
 801439c:	0801a70c 	.word	0x0801a70c
 80143a0:	0801a5d8 	.word	0x0801a5d8
 80143a4:	2000eb9c 	.word	0x2000eb9c
 80143a8:	0801a71c 	.word	0x0801a71c
 80143ac:	0801a700 	.word	0x0801a700
 80143b0:	2000ec8c 	.word	0x2000ec8c
 80143b4:	0801a744 	.word	0x0801a744

080143b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b08a      	sub	sp, #40	@ 0x28
 80143bc:	af02      	add	r7, sp, #8
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	607a      	str	r2, [r7, #4]
 80143c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80143c6:	2300      	movs	r3, #0
 80143c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d106      	bne.n	80143de <etharp_raw+0x26>
 80143d0:	4b3a      	ldr	r3, [pc, #232]	@ (80144bc <etharp_raw+0x104>)
 80143d2:	f240 4257 	movw	r2, #1111	@ 0x457
 80143d6:	493a      	ldr	r1, [pc, #232]	@ (80144c0 <etharp_raw+0x108>)
 80143d8:	483a      	ldr	r0, [pc, #232]	@ (80144c4 <etharp_raw+0x10c>)
 80143da:	f001 ff09 	bl	80161f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80143de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80143e2:	211c      	movs	r1, #28
 80143e4:	200e      	movs	r0, #14
 80143e6:	f7f7 feb3 	bl	800c150 <pbuf_alloc>
 80143ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80143ec:	69bb      	ldr	r3, [r7, #24]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d102      	bne.n	80143f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80143f2:	f04f 33ff 	mov.w	r3, #4294967295
 80143f6:	e05d      	b.n	80144b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80143f8:	69bb      	ldr	r3, [r7, #24]
 80143fa:	895b      	ldrh	r3, [r3, #10]
 80143fc:	2b1b      	cmp	r3, #27
 80143fe:	d806      	bhi.n	801440e <etharp_raw+0x56>
 8014400:	4b2e      	ldr	r3, [pc, #184]	@ (80144bc <etharp_raw+0x104>)
 8014402:	f240 4262 	movw	r2, #1122	@ 0x462
 8014406:	4930      	ldr	r1, [pc, #192]	@ (80144c8 <etharp_raw+0x110>)
 8014408:	482e      	ldr	r0, [pc, #184]	@ (80144c4 <etharp_raw+0x10c>)
 801440a:	f001 fef1 	bl	80161f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014414:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014416:	4618      	mov	r0, r3
 8014418:	f7f6 fd8c 	bl	800af34 <lwip_htons>
 801441c:	4603      	mov	r3, r0
 801441e:	461a      	mov	r2, r3
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801442a:	2b06      	cmp	r3, #6
 801442c:	d006      	beq.n	801443c <etharp_raw+0x84>
 801442e:	4b23      	ldr	r3, [pc, #140]	@ (80144bc <etharp_raw+0x104>)
 8014430:	f240 4269 	movw	r2, #1129	@ 0x469
 8014434:	4925      	ldr	r1, [pc, #148]	@ (80144cc <etharp_raw+0x114>)
 8014436:	4823      	ldr	r0, [pc, #140]	@ (80144c4 <etharp_raw+0x10c>)
 8014438:	f001 feda 	bl	80161f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	3308      	adds	r3, #8
 8014440:	2206      	movs	r2, #6
 8014442:	6839      	ldr	r1, [r7, #0]
 8014444:	4618      	mov	r0, r3
 8014446:	f002 f83e 	bl	80164c6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	3312      	adds	r3, #18
 801444e:	2206      	movs	r2, #6
 8014450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014452:	4618      	mov	r0, r3
 8014454:	f002 f837 	bl	80164c6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	330e      	adds	r3, #14
 801445c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801445e:	6812      	ldr	r2, [r2, #0]
 8014460:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	3318      	adds	r3, #24
 8014466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014468:	6812      	ldr	r2, [r2, #0]
 801446a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	2200      	movs	r2, #0
 8014470:	701a      	strb	r2, [r3, #0]
 8014472:	2200      	movs	r2, #0
 8014474:	f042 0201 	orr.w	r2, r2, #1
 8014478:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	2200      	movs	r2, #0
 801447e:	f042 0208 	orr.w	r2, r2, #8
 8014482:	709a      	strb	r2, [r3, #2]
 8014484:	2200      	movs	r2, #0
 8014486:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	2206      	movs	r2, #6
 801448c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	2204      	movs	r2, #4
 8014492:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014494:	f640 0306 	movw	r3, #2054	@ 0x806
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	68ba      	ldr	r2, [r7, #8]
 801449e:	69b9      	ldr	r1, [r7, #24]
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f001 fb7b 	bl	8015b9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80144a6:	69b8      	ldr	r0, [r7, #24]
 80144a8:	f7f8 f936 	bl	800c718 <pbuf_free>
  p = NULL;
 80144ac:	2300      	movs	r3, #0
 80144ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80144b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3720      	adds	r7, #32
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	0801a560 	.word	0x0801a560
 80144c0:	0801a6b0 	.word	0x0801a6b0
 80144c4:	0801a5d8 	.word	0x0801a5d8
 80144c8:	0801a760 	.word	0x0801a760
 80144cc:	0801a794 	.word	0x0801a794

080144d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b088      	sub	sp, #32
 80144d4:	af04      	add	r7, sp, #16
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80144ec:	2201      	movs	r2, #1
 80144ee:	9203      	str	r2, [sp, #12]
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	9202      	str	r2, [sp, #8]
 80144f4:	4a06      	ldr	r2, [pc, #24]	@ (8014510 <etharp_request_dst+0x40>)
 80144f6:	9201      	str	r2, [sp, #4]
 80144f8:	9300      	str	r3, [sp, #0]
 80144fa:	4603      	mov	r3, r0
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	68f8      	ldr	r0, [r7, #12]
 8014500:	f7ff ff5a 	bl	80143b8 <etharp_raw>
 8014504:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014506:	4618      	mov	r0, r3
 8014508:	3710      	adds	r7, #16
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	0801ad68 	.word	0x0801ad68

08014514 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801451e:	4a05      	ldr	r2, [pc, #20]	@ (8014534 <etharp_request+0x20>)
 8014520:	6839      	ldr	r1, [r7, #0]
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f7ff ffd4 	bl	80144d0 <etharp_request_dst>
 8014528:	4603      	mov	r3, r0
}
 801452a:	4618      	mov	r0, r3
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	0801ad60 	.word	0x0801ad60

08014538 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b08e      	sub	sp, #56	@ 0x38
 801453c:	af04      	add	r7, sp, #16
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014542:	4b79      	ldr	r3, [pc, #484]	@ (8014728 <icmp_input+0x1f0>)
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	f003 030f 	and.w	r3, r3, #15
 8014550:	b2db      	uxtb	r3, r3
 8014552:	009b      	lsls	r3, r3, #2
 8014554:	b2db      	uxtb	r3, r3
 8014556:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014558:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801455a:	2b13      	cmp	r3, #19
 801455c:	f240 80cd 	bls.w	80146fa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	895b      	ldrh	r3, [r3, #10]
 8014564:	2b03      	cmp	r3, #3
 8014566:	f240 80ca 	bls.w	80146fe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014574:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014578:	2b00      	cmp	r3, #0
 801457a:	f000 80b7 	beq.w	80146ec <icmp_input+0x1b4>
 801457e:	2b08      	cmp	r3, #8
 8014580:	f040 80b7 	bne.w	80146f2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014584:	4b69      	ldr	r3, [pc, #420]	@ (801472c <icmp_input+0x1f4>)
 8014586:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014588:	4b67      	ldr	r3, [pc, #412]	@ (8014728 <icmp_input+0x1f0>)
 801458a:	695b      	ldr	r3, [r3, #20]
 801458c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014590:	2be0      	cmp	r3, #224	@ 0xe0
 8014592:	f000 80bb 	beq.w	801470c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014596:	4b64      	ldr	r3, [pc, #400]	@ (8014728 <icmp_input+0x1f0>)
 8014598:	695b      	ldr	r3, [r3, #20]
 801459a:	4a63      	ldr	r2, [pc, #396]	@ (8014728 <icmp_input+0x1f0>)
 801459c:	6812      	ldr	r2, [r2, #0]
 801459e:	4611      	mov	r1, r2
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 fbed 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	f040 80b1 	bne.w	8014710 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	891b      	ldrh	r3, [r3, #8]
 80145b2:	2b07      	cmp	r3, #7
 80145b4:	f240 80a5 	bls.w	8014702 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80145b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80145ba:	330e      	adds	r3, #14
 80145bc:	4619      	mov	r1, r3
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7f8 f814 	bl	800c5ec <pbuf_add_header>
 80145c4:	4603      	mov	r3, r0
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d04b      	beq.n	8014662 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	891a      	ldrh	r2, [r3, #8]
 80145ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80145d0:	4413      	add	r3, r2
 80145d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	891b      	ldrh	r3, [r3, #8]
 80145d8:	8b7a      	ldrh	r2, [r7, #26]
 80145da:	429a      	cmp	r2, r3
 80145dc:	f0c0 809a 	bcc.w	8014714 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80145e0:	8b7b      	ldrh	r3, [r7, #26]
 80145e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80145e6:	4619      	mov	r1, r3
 80145e8:	200e      	movs	r0, #14
 80145ea:	f7f7 fdb1 	bl	800c150 <pbuf_alloc>
 80145ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f000 8090 	beq.w	8014718 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	895b      	ldrh	r3, [r3, #10]
 80145fc:	461a      	mov	r2, r3
 80145fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014600:	3308      	adds	r3, #8
 8014602:	429a      	cmp	r2, r3
 8014604:	d203      	bcs.n	801460e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014606:	6978      	ldr	r0, [r7, #20]
 8014608:	f7f8 f886 	bl	800c718 <pbuf_free>
          goto icmperr;
 801460c:	e085      	b.n	801471a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014616:	4618      	mov	r0, r3
 8014618:	f001 ff55 	bl	80164c6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801461c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801461e:	4619      	mov	r1, r3
 8014620:	6978      	ldr	r0, [r7, #20]
 8014622:	f7f7 fff3 	bl	800c60c <pbuf_remove_header>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d009      	beq.n	8014640 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801462c:	4b40      	ldr	r3, [pc, #256]	@ (8014730 <icmp_input+0x1f8>)
 801462e:	22b6      	movs	r2, #182	@ 0xb6
 8014630:	4940      	ldr	r1, [pc, #256]	@ (8014734 <icmp_input+0x1fc>)
 8014632:	4841      	ldr	r0, [pc, #260]	@ (8014738 <icmp_input+0x200>)
 8014634:	f001 fddc 	bl	80161f0 <iprintf>
          pbuf_free(r);
 8014638:	6978      	ldr	r0, [r7, #20]
 801463a:	f7f8 f86d 	bl	800c718 <pbuf_free>
          goto icmperr;
 801463e:	e06c      	b.n	801471a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	6978      	ldr	r0, [r7, #20]
 8014644:	f7f8 f98c 	bl	800c960 <pbuf_copy>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d003      	beq.n	8014656 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801464e:	6978      	ldr	r0, [r7, #20]
 8014650:	f7f8 f862 	bl	800c718 <pbuf_free>
          goto icmperr;
 8014654:	e061      	b.n	801471a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f7f8 f85e 	bl	800c718 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	607b      	str	r3, [r7, #4]
 8014660:	e00f      	b.n	8014682 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014662:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014664:	330e      	adds	r3, #14
 8014666:	4619      	mov	r1, r3
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f7f7 ffcf 	bl	800c60c <pbuf_remove_header>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d006      	beq.n	8014682 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014674:	4b2e      	ldr	r3, [pc, #184]	@ (8014730 <icmp_input+0x1f8>)
 8014676:	22c7      	movs	r2, #199	@ 0xc7
 8014678:	4930      	ldr	r1, [pc, #192]	@ (801473c <icmp_input+0x204>)
 801467a:	482f      	ldr	r0, [pc, #188]	@ (8014738 <icmp_input+0x200>)
 801467c:	f001 fdb8 	bl	80161f0 <iprintf>
          goto icmperr;
 8014680:	e04b      	b.n	801471a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014688:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801468a:	4619      	mov	r1, r3
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7f7 ffad 	bl	800c5ec <pbuf_add_header>
 8014692:	4603      	mov	r3, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	d12b      	bne.n	80146f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80146a6:	4b20      	ldr	r3, [pc, #128]	@ (8014728 <icmp_input+0x1f0>)
 80146a8:	691a      	ldr	r2, [r3, #16]
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	2200      	movs	r2, #0
 80146b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	2200      	movs	r2, #0
 80146b8:	709a      	strb	r2, [r3, #2]
 80146ba:	2200      	movs	r2, #0
 80146bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	22ff      	movs	r2, #255	@ 0xff
 80146c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2200      	movs	r2, #0
 80146c8:	729a      	strb	r2, [r3, #10]
 80146ca:	2200      	movs	r2, #0
 80146cc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	9302      	str	r3, [sp, #8]
 80146d2:	2301      	movs	r3, #1
 80146d4:	9301      	str	r3, [sp, #4]
 80146d6:	2300      	movs	r3, #0
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	23ff      	movs	r3, #255	@ 0xff
 80146dc:	2200      	movs	r2, #0
 80146de:	69f9      	ldr	r1, [r7, #28]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f000 fa75 	bl	8014bd0 <ip4_output_if>
 80146e6:	4603      	mov	r3, r0
 80146e8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80146ea:	e001      	b.n	80146f0 <icmp_input+0x1b8>
      break;
 80146ec:	bf00      	nop
 80146ee:	e000      	b.n	80146f2 <icmp_input+0x1ba>
      break;
 80146f0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7f8 f810 	bl	800c718 <pbuf_free>
  return;
 80146f8:	e013      	b.n	8014722 <icmp_input+0x1ea>
    goto lenerr;
 80146fa:	bf00      	nop
 80146fc:	e002      	b.n	8014704 <icmp_input+0x1cc>
    goto lenerr;
 80146fe:	bf00      	nop
 8014700:	e000      	b.n	8014704 <icmp_input+0x1cc>
        goto lenerr;
 8014702:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7f8 f807 	bl	800c718 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801470a:	e00a      	b.n	8014722 <icmp_input+0x1ea>
        goto icmperr;
 801470c:	bf00      	nop
 801470e:	e004      	b.n	801471a <icmp_input+0x1e2>
        goto icmperr;
 8014710:	bf00      	nop
 8014712:	e002      	b.n	801471a <icmp_input+0x1e2>
          goto icmperr;
 8014714:	bf00      	nop
 8014716:	e000      	b.n	801471a <icmp_input+0x1e2>
          goto icmperr;
 8014718:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f7f7 fffc 	bl	800c718 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014720:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014722:	3728      	adds	r7, #40	@ 0x28
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}
 8014728:	200091f0 	.word	0x200091f0
 801472c:	20009204 	.word	0x20009204
 8014730:	0801a7d8 	.word	0x0801a7d8
 8014734:	0801a810 	.word	0x0801a810
 8014738:	0801a848 	.word	0x0801a848
 801473c:	0801a870 	.word	0x0801a870

08014740 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	460b      	mov	r3, r1
 801474a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801474c:	78fb      	ldrb	r3, [r7, #3]
 801474e:	461a      	mov	r2, r3
 8014750:	2103      	movs	r1, #3
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 f814 	bl	8014780 <icmp_send_response>
}
 8014758:	bf00      	nop
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	460b      	mov	r3, r1
 801476a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801476c:	78fb      	ldrb	r3, [r7, #3]
 801476e:	461a      	mov	r2, r3
 8014770:	210b      	movs	r1, #11
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f000 f804 	bl	8014780 <icmp_send_response>
}
 8014778:	bf00      	nop
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08c      	sub	sp, #48	@ 0x30
 8014784:	af04      	add	r7, sp, #16
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	460b      	mov	r3, r1
 801478a:	70fb      	strb	r3, [r7, #3]
 801478c:	4613      	mov	r3, r2
 801478e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014790:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014794:	2124      	movs	r1, #36	@ 0x24
 8014796:	2022      	movs	r0, #34	@ 0x22
 8014798:	f7f7 fcda 	bl	800c150 <pbuf_alloc>
 801479c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801479e:	69fb      	ldr	r3, [r7, #28]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d04c      	beq.n	801483e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	895b      	ldrh	r3, [r3, #10]
 80147a8:	2b23      	cmp	r3, #35	@ 0x23
 80147aa:	d806      	bhi.n	80147ba <icmp_send_response+0x3a>
 80147ac:	4b26      	ldr	r3, [pc, #152]	@ (8014848 <icmp_send_response+0xc8>)
 80147ae:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80147b2:	4926      	ldr	r1, [pc, #152]	@ (801484c <icmp_send_response+0xcc>)
 80147b4:	4826      	ldr	r0, [pc, #152]	@ (8014850 <icmp_send_response+0xd0>)
 80147b6:	f001 fd1b 	bl	80161f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80147c0:	69fb      	ldr	r3, [r7, #28]
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	78fa      	ldrb	r2, [r7, #3]
 80147ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	78ba      	ldrb	r2, [r7, #2]
 80147d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	2200      	movs	r2, #0
 80147d6:	711a      	strb	r2, [r3, #4]
 80147d8:	2200      	movs	r2, #0
 80147da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	2200      	movs	r2, #0
 80147e0:	719a      	strb	r2, [r3, #6]
 80147e2:	2200      	movs	r2, #0
 80147e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80147e6:	69fb      	ldr	r3, [r7, #28]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	f103 0008 	add.w	r0, r3, #8
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	221c      	movs	r2, #28
 80147f4:	4619      	mov	r1, r3
 80147f6:	f001 fe66 	bl	80164c6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	68db      	ldr	r3, [r3, #12]
 80147fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014800:	f107 030c 	add.w	r3, r7, #12
 8014804:	4618      	mov	r0, r3
 8014806:	f000 f825 	bl	8014854 <ip4_route>
 801480a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d011      	beq.n	8014836 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	2200      	movs	r2, #0
 8014816:	709a      	strb	r2, [r3, #2]
 8014818:	2200      	movs	r2, #0
 801481a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801481c:	f107 020c 	add.w	r2, r7, #12
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	9302      	str	r3, [sp, #8]
 8014824:	2301      	movs	r3, #1
 8014826:	9301      	str	r3, [sp, #4]
 8014828:	2300      	movs	r3, #0
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	23ff      	movs	r3, #255	@ 0xff
 801482e:	2100      	movs	r1, #0
 8014830:	69f8      	ldr	r0, [r7, #28]
 8014832:	f000 f9cd 	bl	8014bd0 <ip4_output_if>
  }
  pbuf_free(q);
 8014836:	69f8      	ldr	r0, [r7, #28]
 8014838:	f7f7 ff6e 	bl	800c718 <pbuf_free>
 801483c:	e000      	b.n	8014840 <icmp_send_response+0xc0>
    return;
 801483e:	bf00      	nop
}
 8014840:	3720      	adds	r7, #32
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
 8014846:	bf00      	nop
 8014848:	0801a7d8 	.word	0x0801a7d8
 801484c:	0801a8a4 	.word	0x0801a8a4
 8014850:	0801a848 	.word	0x0801a848

08014854 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014854:	b480      	push	{r7}
 8014856:	b085      	sub	sp, #20
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801485c:	4b33      	ldr	r3, [pc, #204]	@ (801492c <ip4_route+0xd8>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	60fb      	str	r3, [r7, #12]
 8014862:	e036      	b.n	80148d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801486a:	f003 0301 	and.w	r3, r3, #1
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b00      	cmp	r3, #0
 8014872:	d02b      	beq.n	80148cc <ip4_route+0x78>
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801487a:	089b      	lsrs	r3, r3, #2
 801487c:	f003 0301 	and.w	r3, r3, #1
 8014880:	b2db      	uxtb	r3, r3
 8014882:	2b00      	cmp	r3, #0
 8014884:	d022      	beq.n	80148cc <ip4_route+0x78>
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	3304      	adds	r3, #4
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d01d      	beq.n	80148cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	3304      	adds	r3, #4
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	405a      	eors	r2, r3
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3308      	adds	r3, #8
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	4013      	ands	r3, r2
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d101      	bne.n	80148ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	e038      	b.n	801491e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148b2:	f003 0302 	and.w	r3, r3, #2
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d108      	bne.n	80148cc <ip4_route+0x78>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	330c      	adds	r3, #12
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d101      	bne.n	80148cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	e028      	b.n	801491e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	60fb      	str	r3, [r7, #12]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1c5      	bne.n	8014864 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80148d8:	4b15      	ldr	r3, [pc, #84]	@ (8014930 <ip4_route+0xdc>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d01a      	beq.n	8014916 <ip4_route+0xc2>
 80148e0:	4b13      	ldr	r3, [pc, #76]	@ (8014930 <ip4_route+0xdc>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148e8:	f003 0301 	and.w	r3, r3, #1
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d012      	beq.n	8014916 <ip4_route+0xc2>
 80148f0:	4b0f      	ldr	r3, [pc, #60]	@ (8014930 <ip4_route+0xdc>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148f8:	f003 0304 	and.w	r3, r3, #4
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d00a      	beq.n	8014916 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014900:	4b0b      	ldr	r3, [pc, #44]	@ (8014930 <ip4_route+0xdc>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	3304      	adds	r3, #4
 8014906:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014908:	2b00      	cmp	r3, #0
 801490a:	d004      	beq.n	8014916 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b7f      	cmp	r3, #127	@ 0x7f
 8014914:	d101      	bne.n	801491a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014916:	2300      	movs	r3, #0
 8014918:	e001      	b.n	801491e <ip4_route+0xca>
  }

  return netif_default;
 801491a:	4b05      	ldr	r3, [pc, #20]	@ (8014930 <ip4_route+0xdc>)
 801491c:	681b      	ldr	r3, [r3, #0]
}
 801491e:	4618      	mov	r0, r3
 8014920:	3714      	adds	r7, #20
 8014922:	46bd      	mov	sp, r7
 8014924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	2000eb30 	.word	0x2000eb30
 8014930:	2000eb34 	.word	0x2000eb34

08014934 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014942:	f003 0301 	and.w	r3, r3, #1
 8014946:	b2db      	uxtb	r3, r3
 8014948:	2b00      	cmp	r3, #0
 801494a:	d016      	beq.n	801497a <ip4_input_accept+0x46>
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3304      	adds	r3, #4
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d011      	beq.n	801497a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014956:	4b0b      	ldr	r3, [pc, #44]	@ (8014984 <ip4_input_accept+0x50>)
 8014958:	695a      	ldr	r2, [r3, #20]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	3304      	adds	r3, #4
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	429a      	cmp	r2, r3
 8014962:	d008      	beq.n	8014976 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014964:	4b07      	ldr	r3, [pc, #28]	@ (8014984 <ip4_input_accept+0x50>)
 8014966:	695b      	ldr	r3, [r3, #20]
 8014968:	6879      	ldr	r1, [r7, #4]
 801496a:	4618      	mov	r0, r3
 801496c:	f000 fa08 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8014970:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014972:	2b00      	cmp	r3, #0
 8014974:	d001      	beq.n	801497a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014976:	2301      	movs	r3, #1
 8014978:	e000      	b.n	801497c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801497a:	2300      	movs	r3, #0
}
 801497c:	4618      	mov	r0, r3
 801497e:	3708      	adds	r7, #8
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	200091f0 	.word	0x200091f0

08014988 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	091b      	lsrs	r3, r3, #4
 801499e:	b2db      	uxtb	r3, r3
 80149a0:	2b04      	cmp	r3, #4
 80149a2:	d004      	beq.n	80149ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7f7 feb7 	bl	800c718 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80149aa:	2300      	movs	r3, #0
 80149ac:	e107      	b.n	8014bbe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	f003 030f 	and.w	r3, r3, #15
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	009b      	lsls	r3, r3, #2
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	885b      	ldrh	r3, [r3, #2]
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7f6 fab5 	bl	800af34 <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	891b      	ldrh	r3, [r3, #8]
 80149d2:	89ba      	ldrh	r2, [r7, #12]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d204      	bcs.n	80149e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80149d8:	89bb      	ldrh	r3, [r7, #12]
 80149da:	4619      	mov	r1, r3
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f7f7 fd15 	bl	800c40c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	895b      	ldrh	r3, [r3, #10]
 80149e6:	89fa      	ldrh	r2, [r7, #14]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d807      	bhi.n	80149fc <ip4_input+0x74>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	891b      	ldrh	r3, [r3, #8]
 80149f0:	89ba      	ldrh	r2, [r7, #12]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d802      	bhi.n	80149fc <ip4_input+0x74>
 80149f6:	89fb      	ldrh	r3, [r7, #14]
 80149f8:	2b13      	cmp	r3, #19
 80149fa:	d804      	bhi.n	8014a06 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f7f7 fe8b 	bl	800c718 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014a02:	2300      	movs	r3, #0
 8014a04:	e0db      	b.n	8014bbe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	691b      	ldr	r3, [r3, #16]
 8014a0a:	4a6f      	ldr	r2, [pc, #444]	@ (8014bc8 <ip4_input+0x240>)
 8014a0c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	68db      	ldr	r3, [r3, #12]
 8014a12:	4a6d      	ldr	r2, [pc, #436]	@ (8014bc8 <ip4_input+0x240>)
 8014a14:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a16:	4b6c      	ldr	r3, [pc, #432]	@ (8014bc8 <ip4_input+0x240>)
 8014a18:	695b      	ldr	r3, [r3, #20]
 8014a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014a1e:	2be0      	cmp	r3, #224	@ 0xe0
 8014a20:	d112      	bne.n	8014a48 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a28:	f003 0301 	and.w	r3, r3, #1
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d007      	beq.n	8014a42 <ip4_input+0xba>
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	3304      	adds	r3, #4
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <ip4_input+0xba>
      netif = inp;
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	613b      	str	r3, [r7, #16]
 8014a40:	e02a      	b.n	8014a98 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014a42:	2300      	movs	r3, #0
 8014a44:	613b      	str	r3, [r7, #16]
 8014a46:	e027      	b.n	8014a98 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014a48:	6838      	ldr	r0, [r7, #0]
 8014a4a:	f7ff ff73 	bl	8014934 <ip4_input_accept>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d002      	beq.n	8014a5a <ip4_input+0xd2>
      netif = inp;
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	613b      	str	r3, [r7, #16]
 8014a58:	e01e      	b.n	8014a98 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8014bc8 <ip4_input+0x240>)
 8014a60:	695b      	ldr	r3, [r3, #20]
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a66:	d017      	beq.n	8014a98 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014a68:	4b58      	ldr	r3, [pc, #352]	@ (8014bcc <ip4_input+0x244>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	613b      	str	r3, [r7, #16]
 8014a6e:	e00e      	b.n	8014a8e <ip4_input+0x106>
          if (netif == inp) {
 8014a70:	693a      	ldr	r2, [r7, #16]
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d006      	beq.n	8014a86 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014a78:	6938      	ldr	r0, [r7, #16]
 8014a7a:	f7ff ff5b 	bl	8014934 <ip4_input_accept>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d108      	bne.n	8014a96 <ip4_input+0x10e>
 8014a84:	e000      	b.n	8014a88 <ip4_input+0x100>
            continue;
 8014a86:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	613b      	str	r3, [r7, #16]
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d1ed      	bne.n	8014a70 <ip4_input+0xe8>
 8014a94:	e000      	b.n	8014a98 <ip4_input+0x110>
            break;
 8014a96:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014a98:	4b4b      	ldr	r3, [pc, #300]	@ (8014bc8 <ip4_input+0x240>)
 8014a9a:	691b      	ldr	r3, [r3, #16]
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f000 f96e 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d105      	bne.n	8014ab6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014aaa:	4b47      	ldr	r3, [pc, #284]	@ (8014bc8 <ip4_input+0x240>)
 8014aac:	691b      	ldr	r3, [r3, #16]
 8014aae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014ab2:	2be0      	cmp	r3, #224	@ 0xe0
 8014ab4:	d104      	bne.n	8014ac0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f7f7 fe2e 	bl	800c718 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014abc:	2300      	movs	r3, #0
 8014abe:	e07e      	b.n	8014bbe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d104      	bne.n	8014ad0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f7f7 fe26 	bl	800c718 <pbuf_free>
    return ERR_OK;
 8014acc:	2300      	movs	r3, #0
 8014ace:	e076      	b.n	8014bbe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014ad0:	697b      	ldr	r3, [r7, #20]
 8014ad2:	88db      	ldrh	r3, [r3, #6]
 8014ad4:	b29b      	uxth	r3, r3
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014adc:	4013      	ands	r3, r2
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d00b      	beq.n	8014afa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 fc92 	bl	801540c <ip4_reass>
 8014ae8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d101      	bne.n	8014af4 <ip4_input+0x16c>
      return ERR_OK;
 8014af0:	2300      	movs	r3, #0
 8014af2:	e064      	b.n	8014bbe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014afa:	4a33      	ldr	r2, [pc, #204]	@ (8014bc8 <ip4_input+0x240>)
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014b00:	4a31      	ldr	r2, [pc, #196]	@ (8014bc8 <ip4_input+0x240>)
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014b06:	4a30      	ldr	r2, [pc, #192]	@ (8014bc8 <ip4_input+0x240>)
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	f003 030f 	and.w	r3, r3, #15
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	b2db      	uxtb	r3, r3
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8014bc8 <ip4_input+0x240>)
 8014b1e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014b20:	89fb      	ldrh	r3, [r7, #14]
 8014b22:	4619      	mov	r1, r3
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7f7 fd71 	bl	800c60c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	7a5b      	ldrb	r3, [r3, #9]
 8014b2e:	2b11      	cmp	r3, #17
 8014b30:	d006      	beq.n	8014b40 <ip4_input+0x1b8>
 8014b32:	2b11      	cmp	r3, #17
 8014b34:	dc13      	bgt.n	8014b5e <ip4_input+0x1d6>
 8014b36:	2b01      	cmp	r3, #1
 8014b38:	d00c      	beq.n	8014b54 <ip4_input+0x1cc>
 8014b3a:	2b06      	cmp	r3, #6
 8014b3c:	d005      	beq.n	8014b4a <ip4_input+0x1c2>
 8014b3e:	e00e      	b.n	8014b5e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014b40:	6839      	ldr	r1, [r7, #0]
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f7fe fb5a 	bl	80131fc <udp_input>
        break;
 8014b48:	e026      	b.n	8014b98 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014b4a:	6839      	ldr	r1, [r7, #0]
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7f9 ff19 	bl	800e984 <tcp_input>
        break;
 8014b52:	e021      	b.n	8014b98 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7ff fcee 	bl	8014538 <icmp_input>
        break;
 8014b5c:	e01c      	b.n	8014b98 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8014bc8 <ip4_input+0x240>)
 8014b60:	695b      	ldr	r3, [r3, #20]
 8014b62:	6939      	ldr	r1, [r7, #16]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f000 f90b 	bl	8014d80 <ip4_addr_isbroadcast_u32>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d10f      	bne.n	8014b90 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b70:	4b15      	ldr	r3, [pc, #84]	@ (8014bc8 <ip4_input+0x240>)
 8014b72:	695b      	ldr	r3, [r3, #20]
 8014b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014b78:	2be0      	cmp	r3, #224	@ 0xe0
 8014b7a:	d009      	beq.n	8014b90 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014b7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b80:	4619      	mov	r1, r3
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f7f7 fdb5 	bl	800c6f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014b88:	2102      	movs	r1, #2
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7ff fdd8 	bl	8014740 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f7f7 fdc1 	bl	800c718 <pbuf_free>
        break;
 8014b96:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014b98:	4b0b      	ldr	r3, [pc, #44]	@ (8014bc8 <ip4_input+0x240>)
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8014bc8 <ip4_input+0x240>)
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014ba4:	4b08      	ldr	r3, [pc, #32]	@ (8014bc8 <ip4_input+0x240>)
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014baa:	4b07      	ldr	r3, [pc, #28]	@ (8014bc8 <ip4_input+0x240>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014bb0:	4b05      	ldr	r3, [pc, #20]	@ (8014bc8 <ip4_input+0x240>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014bb6:	4b04      	ldr	r3, [pc, #16]	@ (8014bc8 <ip4_input+0x240>)
 8014bb8:	2200      	movs	r2, #0
 8014bba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014bbc:	2300      	movs	r3, #0
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3718      	adds	r7, #24
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	200091f0 	.word	0x200091f0
 8014bcc:	2000eb30 	.word	0x2000eb30

08014bd0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08a      	sub	sp, #40	@ 0x28
 8014bd4:	af04      	add	r7, sp, #16
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	607a      	str	r2, [r7, #4]
 8014bdc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d009      	beq.n	8014bfc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d003      	beq.n	8014bf6 <ip4_output_if+0x26>
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d102      	bne.n	8014bfc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bf8:	3304      	adds	r3, #4
 8014bfa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014bfc:	78fa      	ldrb	r2, [r7, #3]
 8014bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c00:	9302      	str	r3, [sp, #8]
 8014c02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014c06:	9301      	str	r3, [sp, #4]
 8014c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	4613      	mov	r3, r2
 8014c10:	687a      	ldr	r2, [r7, #4]
 8014c12:	6979      	ldr	r1, [r7, #20]
 8014c14:	68f8      	ldr	r0, [r7, #12]
 8014c16:	f000 f805 	bl	8014c24 <ip4_output_if_src>
 8014c1a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3718      	adds	r7, #24
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b088      	sub	sp, #32
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
 8014c30:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	7b9b      	ldrb	r3, [r3, #14]
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d006      	beq.n	8014c48 <ip4_output_if_src+0x24>
 8014c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8014d68 <ip4_output_if_src+0x144>)
 8014c3c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014c40:	494a      	ldr	r1, [pc, #296]	@ (8014d6c <ip4_output_if_src+0x148>)
 8014c42:	484b      	ldr	r0, [pc, #300]	@ (8014d70 <ip4_output_if_src+0x14c>)
 8014c44:	f001 fad4 	bl	80161f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d060      	beq.n	8014d10 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014c4e:	2314      	movs	r3, #20
 8014c50:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014c52:	2114      	movs	r1, #20
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	f7f7 fcc9 	bl	800c5ec <pbuf_add_header>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d002      	beq.n	8014c66 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014c60:	f06f 0301 	mvn.w	r3, #1
 8014c64:	e07c      	b.n	8014d60 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	895b      	ldrh	r3, [r3, #10]
 8014c70:	2b13      	cmp	r3, #19
 8014c72:	d806      	bhi.n	8014c82 <ip4_output_if_src+0x5e>
 8014c74:	4b3c      	ldr	r3, [pc, #240]	@ (8014d68 <ip4_output_if_src+0x144>)
 8014c76:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014c7a:	493e      	ldr	r1, [pc, #248]	@ (8014d74 <ip4_output_if_src+0x150>)
 8014c7c:	483c      	ldr	r0, [pc, #240]	@ (8014d70 <ip4_output_if_src+0x14c>)
 8014c7e:	f001 fab7 	bl	80161f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	78fa      	ldrb	r2, [r7, #3]
 8014c86:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014c8e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014c98:	8b7b      	ldrh	r3, [r7, #26]
 8014c9a:	089b      	lsrs	r3, r3, #2
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ca4:	b2da      	uxtb	r2, r3
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014cb0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	891b      	ldrh	r3, [r3, #8]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7f6 f93c 	bl	800af34 <lwip_htons>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	69fb      	ldr	r3, [r7, #28]
 8014cc2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	719a      	strb	r2, [r3, #6]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014cce:	4b2a      	ldr	r3, [pc, #168]	@ (8014d78 <ip4_output_if_src+0x154>)
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7f6 f92e 	bl	800af34 <lwip_htons>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	461a      	mov	r2, r3
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014ce0:	4b25      	ldr	r3, [pc, #148]	@ (8014d78 <ip4_output_if_src+0x154>)
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	3301      	adds	r3, #1
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	4b23      	ldr	r3, [pc, #140]	@ (8014d78 <ip4_output_if_src+0x154>)
 8014cea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d104      	bne.n	8014cfc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014cf2:	4b22      	ldr	r3, [pc, #136]	@ (8014d7c <ip4_output_if_src+0x158>)
 8014cf4:	681a      	ldr	r2, [r3, #0]
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	60da      	str	r2, [r3, #12]
 8014cfa:	e003      	b.n	8014d04 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	681a      	ldr	r2, [r3, #0]
 8014d00:	69fb      	ldr	r3, [r7, #28]
 8014d02:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	2200      	movs	r2, #0
 8014d08:	729a      	strb	r2, [r3, #10]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	72da      	strb	r2, [r3, #11]
 8014d0e:	e00f      	b.n	8014d30 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	895b      	ldrh	r3, [r3, #10]
 8014d14:	2b13      	cmp	r3, #19
 8014d16:	d802      	bhi.n	8014d1e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d18:	f06f 0301 	mvn.w	r3, #1
 8014d1c:	e020      	b.n	8014d60 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	691b      	ldr	r3, [r3, #16]
 8014d28:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014d2a:	f107 0314 	add.w	r3, r7, #20
 8014d2e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00c      	beq.n	8014d52 <ip4_output_if_src+0x12e>
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	891a      	ldrh	r2, [r3, #8]
 8014d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d906      	bls.n	8014d52 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014d48:	68f8      	ldr	r0, [r7, #12]
 8014d4a:	f000 fd53 	bl	80157f4 <ip4_frag>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	e006      	b.n	8014d60 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d54:	695b      	ldr	r3, [r3, #20]
 8014d56:	687a      	ldr	r2, [r7, #4]
 8014d58:	68f9      	ldr	r1, [r7, #12]
 8014d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d5c:	4798      	blx	r3
 8014d5e:	4603      	mov	r3, r0
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3720      	adds	r7, #32
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	0801a8d0 	.word	0x0801a8d0
 8014d6c:	0801a904 	.word	0x0801a904
 8014d70:	0801a910 	.word	0x0801a910
 8014d74:	0801a938 	.word	0x0801a938
 8014d78:	2000ec8e 	.word	0x2000ec8e
 8014d7c:	0801ad5c 	.word	0x0801ad5c

08014d80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b085      	sub	sp, #20
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d94:	d002      	beq.n	8014d9c <ip4_addr_isbroadcast_u32+0x1c>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d101      	bne.n	8014da0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	e02a      	b.n	8014df6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014da6:	f003 0302 	and.w	r3, r3, #2
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d101      	bne.n	8014db2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014dae:	2300      	movs	r3, #0
 8014db0:	e021      	b.n	8014df6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	3304      	adds	r3, #4
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	687a      	ldr	r2, [r7, #4]
 8014dba:	429a      	cmp	r2, r3
 8014dbc:	d101      	bne.n	8014dc2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	e019      	b.n	8014df6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	3304      	adds	r3, #4
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	405a      	eors	r2, r3
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	3308      	adds	r3, #8
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d10d      	bne.n	8014df4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	3308      	adds	r3, #8
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	43da      	mvns	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	3308      	adds	r3, #8
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d101      	bne.n	8014df4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014df0:	2301      	movs	r3, #1
 8014df2:	e000      	b.n	8014df6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014df4:	2300      	movs	r3, #0
  }
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
	...

08014e04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b084      	sub	sp, #16
 8014e08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014e0e:	4b12      	ldr	r3, [pc, #72]	@ (8014e58 <ip_reass_tmr+0x54>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014e14:	e018      	b.n	8014e48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	7fdb      	ldrb	r3, [r3, #31]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d00b      	beq.n	8014e36 <ip_reass_tmr+0x32>
      r->timer--;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	7fdb      	ldrb	r3, [r3, #31]
 8014e22:	3b01      	subs	r3, #1
 8014e24:	b2da      	uxtb	r2, r3
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	60fb      	str	r3, [r7, #12]
 8014e34:	e008      	b.n	8014e48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014e40:	68b9      	ldr	r1, [r7, #8]
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 f80a 	bl	8014e5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1e3      	bne.n	8014e16 <ip_reass_tmr+0x12>
    }
  }
}
 8014e4e:	bf00      	nop
 8014e50:	bf00      	nop
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	2000ec90 	.word	0x2000ec90

08014e5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b088      	sub	sp, #32
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014e66:	2300      	movs	r3, #0
 8014e68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014e6a:	683a      	ldr	r2, [r7, #0]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d105      	bne.n	8014e7e <ip_reass_free_complete_datagram+0x22>
 8014e72:	4b45      	ldr	r3, [pc, #276]	@ (8014f88 <ip_reass_free_complete_datagram+0x12c>)
 8014e74:	22ab      	movs	r2, #171	@ 0xab
 8014e76:	4945      	ldr	r1, [pc, #276]	@ (8014f8c <ip_reass_free_complete_datagram+0x130>)
 8014e78:	4845      	ldr	r0, [pc, #276]	@ (8014f90 <ip_reass_free_complete_datagram+0x134>)
 8014e7a:	f001 f9b9 	bl	80161f0 <iprintf>
  if (prev != NULL) {
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d00a      	beq.n	8014e9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d005      	beq.n	8014e9a <ip_reass_free_complete_datagram+0x3e>
 8014e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8014f88 <ip_reass_free_complete_datagram+0x12c>)
 8014e90:	22ad      	movs	r2, #173	@ 0xad
 8014e92:	4940      	ldr	r1, [pc, #256]	@ (8014f94 <ip_reass_free_complete_datagram+0x138>)
 8014e94:	483e      	ldr	r0, [pc, #248]	@ (8014f90 <ip_reass_free_complete_datagram+0x134>)
 8014e96:	f001 f9ab 	bl	80161f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	889b      	ldrh	r3, [r3, #4]
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d12a      	bne.n	8014f02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	6858      	ldr	r0, [r3, #4]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	3308      	adds	r3, #8
 8014ec2:	2214      	movs	r2, #20
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	f001 fafe 	bl	80164c6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014eca:	2101      	movs	r1, #1
 8014ecc:	69b8      	ldr	r0, [r7, #24]
 8014ece:	f7ff fc47 	bl	8014760 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014ed2:	69b8      	ldr	r0, [r7, #24]
 8014ed4:	f7f7 fcae 	bl	800c834 <pbuf_clen>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014edc:	8bfa      	ldrh	r2, [r7, #30]
 8014ede:	8a7b      	ldrh	r3, [r7, #18]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ee6:	db05      	blt.n	8014ef4 <ip_reass_free_complete_datagram+0x98>
 8014ee8:	4b27      	ldr	r3, [pc, #156]	@ (8014f88 <ip_reass_free_complete_datagram+0x12c>)
 8014eea:	22bc      	movs	r2, #188	@ 0xbc
 8014eec:	492a      	ldr	r1, [pc, #168]	@ (8014f98 <ip_reass_free_complete_datagram+0x13c>)
 8014eee:	4828      	ldr	r0, [pc, #160]	@ (8014f90 <ip_reass_free_complete_datagram+0x134>)
 8014ef0:	f001 f97e 	bl	80161f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014ef4:	8bfa      	ldrh	r2, [r7, #30]
 8014ef6:	8a7b      	ldrh	r3, [r7, #18]
 8014ef8:	4413      	add	r3, r2
 8014efa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014efc:	69b8      	ldr	r0, [r7, #24]
 8014efe:	f7f7 fc0b 	bl	800c718 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014f08:	e01f      	b.n	8014f4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014f1a:	68f8      	ldr	r0, [r7, #12]
 8014f1c:	f7f7 fc8a 	bl	800c834 <pbuf_clen>
 8014f20:	4603      	mov	r3, r0
 8014f22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014f24:	8bfa      	ldrh	r2, [r7, #30]
 8014f26:	8a7b      	ldrh	r3, [r7, #18]
 8014f28:	4413      	add	r3, r2
 8014f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f2e:	db05      	blt.n	8014f3c <ip_reass_free_complete_datagram+0xe0>
 8014f30:	4b15      	ldr	r3, [pc, #84]	@ (8014f88 <ip_reass_free_complete_datagram+0x12c>)
 8014f32:	22cc      	movs	r2, #204	@ 0xcc
 8014f34:	4918      	ldr	r1, [pc, #96]	@ (8014f98 <ip_reass_free_complete_datagram+0x13c>)
 8014f36:	4816      	ldr	r0, [pc, #88]	@ (8014f90 <ip_reass_free_complete_datagram+0x134>)
 8014f38:	f001 f95a 	bl	80161f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f3c:	8bfa      	ldrh	r2, [r7, #30]
 8014f3e:	8a7b      	ldrh	r3, [r7, #18]
 8014f40:	4413      	add	r3, r2
 8014f42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014f44:	68f8      	ldr	r0, [r7, #12]
 8014f46:	f7f7 fbe7 	bl	800c718 <pbuf_free>
  while (p != NULL) {
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1dc      	bne.n	8014f0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014f50:	6839      	ldr	r1, [r7, #0]
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 f8c2 	bl	80150dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014f58:	4b10      	ldr	r3, [pc, #64]	@ (8014f9c <ip_reass_free_complete_datagram+0x140>)
 8014f5a:	881b      	ldrh	r3, [r3, #0]
 8014f5c:	8bfa      	ldrh	r2, [r7, #30]
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d905      	bls.n	8014f6e <ip_reass_free_complete_datagram+0x112>
 8014f62:	4b09      	ldr	r3, [pc, #36]	@ (8014f88 <ip_reass_free_complete_datagram+0x12c>)
 8014f64:	22d2      	movs	r2, #210	@ 0xd2
 8014f66:	490e      	ldr	r1, [pc, #56]	@ (8014fa0 <ip_reass_free_complete_datagram+0x144>)
 8014f68:	4809      	ldr	r0, [pc, #36]	@ (8014f90 <ip_reass_free_complete_datagram+0x134>)
 8014f6a:	f001 f941 	bl	80161f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8014f9c <ip_reass_free_complete_datagram+0x140>)
 8014f70:	881a      	ldrh	r2, [r3, #0]
 8014f72:	8bfb      	ldrh	r3, [r7, #30]
 8014f74:	1ad3      	subs	r3, r2, r3
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	4b08      	ldr	r3, [pc, #32]	@ (8014f9c <ip_reass_free_complete_datagram+0x140>)
 8014f7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014f7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3720      	adds	r7, #32
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	0801a968 	.word	0x0801a968
 8014f8c:	0801a9a4 	.word	0x0801a9a4
 8014f90:	0801a9b0 	.word	0x0801a9b0
 8014f94:	0801a9d8 	.word	0x0801a9d8
 8014f98:	0801a9ec 	.word	0x0801a9ec
 8014f9c:	2000ec94 	.word	0x2000ec94
 8014fa0:	0801aa0c 	.word	0x0801aa0c

08014fa4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b08a      	sub	sp, #40	@ 0x28
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014fc2:	4b28      	ldr	r3, [pc, #160]	@ (8015064 <ip_reass_remove_oldest_datagram+0xc0>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014fc8:	e030      	b.n	801502c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fcc:	695a      	ldr	r2, [r3, #20]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d10c      	bne.n	8014ff0 <ip_reass_remove_oldest_datagram+0x4c>
 8014fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd8:	699a      	ldr	r2, [r3, #24]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	691b      	ldr	r3, [r3, #16]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d106      	bne.n	8014ff0 <ip_reass_remove_oldest_datagram+0x4c>
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe4:	899a      	ldrh	r2, [r3, #12]
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	889b      	ldrh	r3, [r3, #4]
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d014      	beq.n	801501a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014ff6:	6a3b      	ldr	r3, [r7, #32]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d104      	bne.n	8015006 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	61bb      	str	r3, [r7, #24]
 8015004:	e009      	b.n	801501a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015008:	7fda      	ldrb	r2, [r3, #31]
 801500a:	6a3b      	ldr	r3, [r7, #32]
 801500c:	7fdb      	ldrb	r3, [r3, #31]
 801500e:	429a      	cmp	r2, r3
 8015010:	d803      	bhi.n	801501a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015014:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015016:	69fb      	ldr	r3, [r7, #28]
 8015018:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d001      	beq.n	8015026 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015024:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1cb      	bne.n	8014fca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015032:	6a3b      	ldr	r3, [r7, #32]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d008      	beq.n	801504a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015038:	69b9      	ldr	r1, [r7, #24]
 801503a:	6a38      	ldr	r0, [r7, #32]
 801503c:	f7ff ff0e 	bl	8014e5c <ip_reass_free_complete_datagram>
 8015040:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015042:	697a      	ldr	r2, [r7, #20]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	4413      	add	r3, r2
 8015048:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801504a:	697a      	ldr	r2, [r7, #20]
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	429a      	cmp	r2, r3
 8015050:	da02      	bge.n	8015058 <ip_reass_remove_oldest_datagram+0xb4>
 8015052:	693b      	ldr	r3, [r7, #16]
 8015054:	2b01      	cmp	r3, #1
 8015056:	dcac      	bgt.n	8014fb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015058:	697b      	ldr	r3, [r7, #20]
}
 801505a:	4618      	mov	r0, r3
 801505c:	3728      	adds	r7, #40	@ 0x28
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	2000ec90 	.word	0x2000ec90

08015068 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015072:	2004      	movs	r0, #4
 8015074:	f7f6 fc36 	bl	800b8e4 <memp_malloc>
 8015078:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d110      	bne.n	80150a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015080:	6839      	ldr	r1, [r7, #0]
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f7ff ff8e 	bl	8014fa4 <ip_reass_remove_oldest_datagram>
 8015088:	4602      	mov	r2, r0
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	4293      	cmp	r3, r2
 801508e:	dc03      	bgt.n	8015098 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015090:	2004      	movs	r0, #4
 8015092:	f7f6 fc27 	bl	800b8e4 <memp_malloc>
 8015096:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d101      	bne.n	80150a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801509e:	2300      	movs	r3, #0
 80150a0:	e016      	b.n	80150d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80150a2:	2220      	movs	r2, #32
 80150a4:	2100      	movs	r1, #0
 80150a6:	68f8      	ldr	r0, [r7, #12]
 80150a8:	f001 f941 	bl	801632e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	220f      	movs	r2, #15
 80150b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80150b2:	4b09      	ldr	r3, [pc, #36]	@ (80150d8 <ip_reass_enqueue_new_datagram+0x70>)
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80150ba:	4a07      	ldr	r2, [pc, #28]	@ (80150d8 <ip_reass_enqueue_new_datagram+0x70>)
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	3308      	adds	r3, #8
 80150c4:	2214      	movs	r2, #20
 80150c6:	6879      	ldr	r1, [r7, #4]
 80150c8:	4618      	mov	r0, r3
 80150ca:	f001 f9fc 	bl	80164c6 <memcpy>
  return ipr;
 80150ce:	68fb      	ldr	r3, [r7, #12]
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	2000ec90 	.word	0x2000ec90

080150dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80150e6:	4b10      	ldr	r3, [pc, #64]	@ (8015128 <ip_reass_dequeue_datagram+0x4c>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	687a      	ldr	r2, [r7, #4]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d104      	bne.n	80150fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4a0c      	ldr	r2, [pc, #48]	@ (8015128 <ip_reass_dequeue_datagram+0x4c>)
 80150f6:	6013      	str	r3, [r2, #0]
 80150f8:	e00d      	b.n	8015116 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d106      	bne.n	801510e <ip_reass_dequeue_datagram+0x32>
 8015100:	4b0a      	ldr	r3, [pc, #40]	@ (801512c <ip_reass_dequeue_datagram+0x50>)
 8015102:	f240 1245 	movw	r2, #325	@ 0x145
 8015106:	490a      	ldr	r1, [pc, #40]	@ (8015130 <ip_reass_dequeue_datagram+0x54>)
 8015108:	480a      	ldr	r0, [pc, #40]	@ (8015134 <ip_reass_dequeue_datagram+0x58>)
 801510a:	f001 f871 	bl	80161f0 <iprintf>
    prev->next = ipr->next;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015116:	6879      	ldr	r1, [r7, #4]
 8015118:	2004      	movs	r0, #4
 801511a:	f7f6 fc59 	bl	800b9d0 <memp_free>
}
 801511e:	bf00      	nop
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	2000ec90 	.word	0x2000ec90
 801512c:	0801a968 	.word	0x0801a968
 8015130:	0801aa30 	.word	0x0801aa30
 8015134:	0801a9b0 	.word	0x0801a9b0

08015138 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b08c      	sub	sp, #48	@ 0x30
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015144:	2300      	movs	r3, #0
 8015146:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015148:	2301      	movs	r3, #1
 801514a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	685b      	ldr	r3, [r3, #4]
 8015150:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015152:	69fb      	ldr	r3, [r7, #28]
 8015154:	885b      	ldrh	r3, [r3, #2]
 8015156:	b29b      	uxth	r3, r3
 8015158:	4618      	mov	r0, r3
 801515a:	f7f5 feeb 	bl	800af34 <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015162:	69fb      	ldr	r3, [r7, #28]
 8015164:	781b      	ldrb	r3, [r3, #0]
 8015166:	f003 030f 	and.w	r3, r3, #15
 801516a:	b2db      	uxtb	r3, r3
 801516c:	009b      	lsls	r3, r3, #2
 801516e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015170:	7e7b      	ldrb	r3, [r7, #25]
 8015172:	b29b      	uxth	r3, r3
 8015174:	8b7a      	ldrh	r2, [r7, #26]
 8015176:	429a      	cmp	r2, r3
 8015178:	d202      	bcs.n	8015180 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801517a:	f04f 33ff 	mov.w	r3, #4294967295
 801517e:	e135      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015180:	7e7b      	ldrb	r3, [r7, #25]
 8015182:	b29b      	uxth	r3, r3
 8015184:	8b7a      	ldrh	r2, [r7, #26]
 8015186:	1ad3      	subs	r3, r2, r3
 8015188:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	88db      	ldrh	r3, [r3, #6]
 801518e:	b29b      	uxth	r3, r3
 8015190:	4618      	mov	r0, r3
 8015192:	f7f5 fecf 	bl	800af34 <lwip_htons>
 8015196:	4603      	mov	r3, r0
 8015198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801519c:	b29b      	uxth	r3, r3
 801519e:	00db      	lsls	r3, r3, #3
 80151a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80151a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151aa:	2200      	movs	r2, #0
 80151ac:	701a      	strb	r2, [r3, #0]
 80151ae:	2200      	movs	r2, #0
 80151b0:	705a      	strb	r2, [r3, #1]
 80151b2:	2200      	movs	r2, #0
 80151b4:	709a      	strb	r2, [r3, #2]
 80151b6:	2200      	movs	r2, #0
 80151b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80151ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151bc:	8afa      	ldrh	r2, [r7, #22]
 80151be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80151c0:	8afa      	ldrh	r2, [r7, #22]
 80151c2:	8b7b      	ldrh	r3, [r7, #26]
 80151c4:	4413      	add	r3, r2
 80151c6:	b29a      	uxth	r2, r3
 80151c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80151cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ce:	88db      	ldrh	r3, [r3, #6]
 80151d0:	b29b      	uxth	r3, r3
 80151d2:	8afa      	ldrh	r2, [r7, #22]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d902      	bls.n	80151de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151d8:	f04f 33ff 	mov.w	r3, #4294967295
 80151dc:	e106      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80151e4:	e068      	b.n	80152b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80151e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80151ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ee:	889b      	ldrh	r3, [r3, #4]
 80151f0:	b29a      	uxth	r2, r3
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	889b      	ldrh	r3, [r3, #4]
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d235      	bcs.n	8015268 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80151fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015200:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015204:	2b00      	cmp	r3, #0
 8015206:	d020      	beq.n	801524a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801520a:	889b      	ldrh	r3, [r3, #4]
 801520c:	b29a      	uxth	r2, r3
 801520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015210:	88db      	ldrh	r3, [r3, #6]
 8015212:	b29b      	uxth	r3, r3
 8015214:	429a      	cmp	r2, r3
 8015216:	d307      	bcc.n	8015228 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	88db      	ldrh	r3, [r3, #6]
 801521c:	b29a      	uxth	r2, r3
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	889b      	ldrh	r3, [r3, #4]
 8015222:	b29b      	uxth	r3, r3
 8015224:	429a      	cmp	r2, r3
 8015226:	d902      	bls.n	801522e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015228:	f04f 33ff 	mov.w	r3, #4294967295
 801522c:	e0de      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015230:	68ba      	ldr	r2, [r7, #8]
 8015232:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015236:	88db      	ldrh	r3, [r3, #6]
 8015238:	b29a      	uxth	r2, r3
 801523a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801523c:	889b      	ldrh	r3, [r3, #4]
 801523e:	b29b      	uxth	r3, r3
 8015240:	429a      	cmp	r2, r3
 8015242:	d03d      	beq.n	80152c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015244:	2300      	movs	r3, #0
 8015246:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015248:	e03a      	b.n	80152c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524c:	88db      	ldrh	r3, [r3, #6]
 801524e:	b29a      	uxth	r2, r3
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	889b      	ldrh	r3, [r3, #4]
 8015254:	b29b      	uxth	r3, r3
 8015256:	429a      	cmp	r2, r3
 8015258:	d902      	bls.n	8015260 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801525a:	f04f 33ff 	mov.w	r3, #4294967295
 801525e:	e0c5      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	68ba      	ldr	r2, [r7, #8]
 8015264:	605a      	str	r2, [r3, #4]
      break;
 8015266:	e02b      	b.n	80152c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801526a:	889b      	ldrh	r3, [r3, #4]
 801526c:	b29a      	uxth	r2, r3
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	889b      	ldrh	r3, [r3, #4]
 8015272:	b29b      	uxth	r3, r3
 8015274:	429a      	cmp	r2, r3
 8015276:	d102      	bne.n	801527e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015278:	f04f 33ff 	mov.w	r3, #4294967295
 801527c:	e0b6      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015280:	889b      	ldrh	r3, [r3, #4]
 8015282:	b29a      	uxth	r2, r3
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	88db      	ldrh	r3, [r3, #6]
 8015288:	b29b      	uxth	r3, r3
 801528a:	429a      	cmp	r2, r3
 801528c:	d202      	bcs.n	8015294 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801528e:	f04f 33ff 	mov.w	r3, #4294967295
 8015292:	e0ab      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015296:	2b00      	cmp	r3, #0
 8015298:	d009      	beq.n	80152ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529c:	88db      	ldrh	r3, [r3, #6]
 801529e:	b29a      	uxth	r2, r3
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	889b      	ldrh	r3, [r3, #4]
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d001      	beq.n	80152ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80152b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d193      	bne.n	80151e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80152be:	e000      	b.n	80152c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80152c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80152c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d12d      	bne.n	8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80152c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d01c      	beq.n	8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80152ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152d0:	88db      	ldrh	r3, [r3, #6]
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d6:	889b      	ldrh	r3, [r3, #4]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	429a      	cmp	r2, r3
 80152dc:	d906      	bls.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80152de:	4b45      	ldr	r3, [pc, #276]	@ (80153f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152e0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80152e4:	4944      	ldr	r1, [pc, #272]	@ (80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80152e6:	4845      	ldr	r0, [pc, #276]	@ (80153fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152e8:	f000 ff82 	bl	80161f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80152ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80152f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152f4:	88db      	ldrh	r3, [r3, #6]
 80152f6:	b29a      	uxth	r2, r3
 80152f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152fa:	889b      	ldrh	r3, [r3, #4]
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	429a      	cmp	r2, r3
 8015300:	d010      	beq.n	8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015302:	2300      	movs	r3, #0
 8015304:	623b      	str	r3, [r7, #32]
 8015306:	e00d      	b.n	8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d006      	beq.n	801531e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015310:	4b38      	ldr	r3, [pc, #224]	@ (80153f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015312:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015316:	493a      	ldr	r1, [pc, #232]	@ (8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015318:	4838      	ldr	r0, [pc, #224]	@ (80153fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801531a:	f000 ff69 	bl	80161f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d105      	bne.n	8015336 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	7f9b      	ldrb	r3, [r3, #30]
 801532e:	f003 0301 	and.w	r3, r3, #1
 8015332:	2b00      	cmp	r3, #0
 8015334:	d059      	beq.n	80153ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015336:	6a3b      	ldr	r3, [r7, #32]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d04f      	beq.n	80153dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d006      	beq.n	8015352 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	889b      	ldrh	r3, [r3, #4]
 801534c:	b29b      	uxth	r3, r3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d002      	beq.n	8015358 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015352:	2300      	movs	r3, #0
 8015354:	623b      	str	r3, [r7, #32]
 8015356:	e041      	b.n	80153dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015362:	e012      	b.n	801538a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015366:	685b      	ldr	r3, [r3, #4]
 8015368:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801536c:	88db      	ldrh	r3, [r3, #6]
 801536e:	b29a      	uxth	r2, r3
 8015370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015372:	889b      	ldrh	r3, [r3, #4]
 8015374:	b29b      	uxth	r3, r3
 8015376:	429a      	cmp	r2, r3
 8015378:	d002      	beq.n	8015380 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801537a:	2300      	movs	r3, #0
 801537c:	623b      	str	r3, [r7, #32]
            break;
 801537e:	e007      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015382:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801538c:	2b00      	cmp	r3, #0
 801538e:	d1e9      	bne.n	8015364 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015390:	6a3b      	ldr	r3, [r7, #32]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d022      	beq.n	80153dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d106      	bne.n	80153ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801539e:	4b15      	ldr	r3, [pc, #84]	@ (80153f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153a0:	f240 12df 	movw	r2, #479	@ 0x1df
 80153a4:	4917      	ldr	r1, [pc, #92]	@ (8015404 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80153a6:	4815      	ldr	r0, [pc, #84]	@ (80153fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153a8:	f000 ff22 	bl	80161f0 <iprintf>
          LWIP_ASSERT("sanity check",
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153b4:	429a      	cmp	r2, r3
 80153b6:	d106      	bne.n	80153c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80153b8:	4b0e      	ldr	r3, [pc, #56]	@ (80153f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153ba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80153be:	4911      	ldr	r1, [pc, #68]	@ (8015404 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80153c0:	480e      	ldr	r0, [pc, #56]	@ (80153fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153c2:	f000 ff15 	bl	80161f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80153c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d006      	beq.n	80153dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80153ce:	4b09      	ldr	r3, [pc, #36]	@ (80153f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153d0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80153d4:	490c      	ldr	r1, [pc, #48]	@ (8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80153d6:	4809      	ldr	r0, [pc, #36]	@ (80153fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153d8:	f000 ff0a 	bl	80161f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80153dc:	6a3b      	ldr	r3, [r7, #32]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	bf14      	ite	ne
 80153e2:	2301      	movne	r3, #1
 80153e4:	2300      	moveq	r3, #0
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	e000      	b.n	80153ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80153ea:	2300      	movs	r3, #0
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3730      	adds	r7, #48	@ 0x30
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	0801a968 	.word	0x0801a968
 80153f8:	0801aa4c 	.word	0x0801aa4c
 80153fc:	0801a9b0 	.word	0x0801a9b0
 8015400:	0801aa6c 	.word	0x0801aa6c
 8015404:	0801aaa4 	.word	0x0801aaa4
 8015408:	0801aab4 	.word	0x0801aab4

0801540c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b08e      	sub	sp, #56	@ 0x38
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	f003 030f 	and.w	r3, r3, #15
 8015422:	b2db      	uxtb	r3, r3
 8015424:	009b      	lsls	r3, r3, #2
 8015426:	b2db      	uxtb	r3, r3
 8015428:	2b14      	cmp	r3, #20
 801542a:	f040 8171 	bne.w	8015710 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015430:	88db      	ldrh	r3, [r3, #6]
 8015432:	b29b      	uxth	r3, r3
 8015434:	4618      	mov	r0, r3
 8015436:	f7f5 fd7d 	bl	800af34 <lwip_htons>
 801543a:	4603      	mov	r3, r0
 801543c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015440:	b29b      	uxth	r3, r3
 8015442:	00db      	lsls	r3, r3, #3
 8015444:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015448:	885b      	ldrh	r3, [r3, #2]
 801544a:	b29b      	uxth	r3, r3
 801544c:	4618      	mov	r0, r3
 801544e:	f7f5 fd71 	bl	800af34 <lwip_htons>
 8015452:	4603      	mov	r3, r0
 8015454:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	f003 030f 	and.w	r3, r3, #15
 801545e:	b2db      	uxtb	r3, r3
 8015460:	009b      	lsls	r3, r3, #2
 8015462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015466:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801546a:	b29b      	uxth	r3, r3
 801546c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801546e:	429a      	cmp	r2, r3
 8015470:	f0c0 8150 	bcc.w	8015714 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015478:	b29b      	uxth	r3, r3
 801547a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801547c:	1ad3      	subs	r3, r2, r3
 801547e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f7f7 f9d7 	bl	800c834 <pbuf_clen>
 8015486:	4603      	mov	r3, r0
 8015488:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801548a:	4b8c      	ldr	r3, [pc, #560]	@ (80156bc <ip4_reass+0x2b0>)
 801548c:	881b      	ldrh	r3, [r3, #0]
 801548e:	461a      	mov	r2, r3
 8015490:	8c3b      	ldrh	r3, [r7, #32]
 8015492:	4413      	add	r3, r2
 8015494:	2b0a      	cmp	r3, #10
 8015496:	dd10      	ble.n	80154ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015498:	8c3b      	ldrh	r3, [r7, #32]
 801549a:	4619      	mov	r1, r3
 801549c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801549e:	f7ff fd81 	bl	8014fa4 <ip_reass_remove_oldest_datagram>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f000 8137 	beq.w	8015718 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80154aa:	4b84      	ldr	r3, [pc, #528]	@ (80156bc <ip4_reass+0x2b0>)
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	461a      	mov	r2, r3
 80154b0:	8c3b      	ldrh	r3, [r7, #32]
 80154b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80154b4:	2b0a      	cmp	r3, #10
 80154b6:	f300 812f 	bgt.w	8015718 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80154ba:	4b81      	ldr	r3, [pc, #516]	@ (80156c0 <ip4_reass+0x2b4>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	633b      	str	r3, [r7, #48]	@ 0x30
 80154c0:	e015      	b.n	80154ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80154c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c4:	695a      	ldr	r2, [r3, #20]
 80154c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154c8:	68db      	ldr	r3, [r3, #12]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d10c      	bne.n	80154e8 <ip4_reass+0xdc>
 80154ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d0:	699a      	ldr	r2, [r3, #24]
 80154d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154d4:	691b      	ldr	r3, [r3, #16]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d106      	bne.n	80154e8 <ip4_reass+0xdc>
 80154da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154dc:	899a      	ldrh	r2, [r3, #12]
 80154de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e0:	889b      	ldrh	r3, [r3, #4]
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d006      	beq.n	80154f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80154e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80154ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d1e6      	bne.n	80154c2 <ip4_reass+0xb6>
 80154f4:	e000      	b.n	80154f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80154f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80154f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80154fe:	8c3b      	ldrh	r3, [r7, #32]
 8015500:	4619      	mov	r1, r3
 8015502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015504:	f7ff fdb0 	bl	8015068 <ip_reass_enqueue_new_datagram>
 8015508:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550c:	2b00      	cmp	r3, #0
 801550e:	d11c      	bne.n	801554a <ip4_reass+0x13e>
      goto nullreturn;
 8015510:	e105      	b.n	801571e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015514:	88db      	ldrh	r3, [r3, #6]
 8015516:	b29b      	uxth	r3, r3
 8015518:	4618      	mov	r0, r3
 801551a:	f7f5 fd0b 	bl	800af34 <lwip_htons>
 801551e:	4603      	mov	r3, r0
 8015520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015524:	2b00      	cmp	r3, #0
 8015526:	d110      	bne.n	801554a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552a:	89db      	ldrh	r3, [r3, #14]
 801552c:	4618      	mov	r0, r3
 801552e:	f7f5 fd01 	bl	800af34 <lwip_htons>
 8015532:	4603      	mov	r3, r0
 8015534:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015538:	2b00      	cmp	r3, #0
 801553a:	d006      	beq.n	801554a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801553e:	3308      	adds	r3, #8
 8015540:	2214      	movs	r2, #20
 8015542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015544:	4618      	mov	r0, r3
 8015546:	f000 ffbe 	bl	80164c6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801554a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801554c:	88db      	ldrh	r3, [r3, #6]
 801554e:	b29b      	uxth	r3, r3
 8015550:	f003 0320 	and.w	r3, r3, #32
 8015554:	2b00      	cmp	r3, #0
 8015556:	bf0c      	ite	eq
 8015558:	2301      	moveq	r3, #1
 801555a:	2300      	movne	r3, #0
 801555c:	b2db      	uxtb	r3, r3
 801555e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015560:	69fb      	ldr	r3, [r7, #28]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d00e      	beq.n	8015584 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015566:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801556a:	4413      	add	r3, r2
 801556c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801556e:	8b7a      	ldrh	r2, [r7, #26]
 8015570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015572:	429a      	cmp	r2, r3
 8015574:	f0c0 80a0 	bcc.w	80156b8 <ip4_reass+0x2ac>
 8015578:	8b7b      	ldrh	r3, [r7, #26]
 801557a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801557e:	4293      	cmp	r3, r2
 8015580:	f200 809a 	bhi.w	80156b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015584:	69fa      	ldr	r2, [r7, #28]
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801558a:	f7ff fdd5 	bl	8015138 <ip_reass_chain_frag_into_datagram_and_validate>
 801558e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015596:	f000 809b 	beq.w	80156d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801559a:	4b48      	ldr	r3, [pc, #288]	@ (80156bc <ip4_reass+0x2b0>)
 801559c:	881a      	ldrh	r2, [r3, #0]
 801559e:	8c3b      	ldrh	r3, [r7, #32]
 80155a0:	4413      	add	r3, r2
 80155a2:	b29a      	uxth	r2, r3
 80155a4:	4b45      	ldr	r3, [pc, #276]	@ (80156bc <ip4_reass+0x2b0>)
 80155a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d00d      	beq.n	80155ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80155ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80155b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80155b2:	4413      	add	r3, r2
 80155b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80155b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b8:	8a7a      	ldrh	r2, [r7, #18]
 80155ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80155bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155be:	7f9b      	ldrb	r3, [r3, #30]
 80155c0:	f043 0301 	orr.w	r3, r3, #1
 80155c4:	b2da      	uxtb	r2, r3
 80155c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d171      	bne.n	80156b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80155d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d2:	8b9b      	ldrh	r3, [r3, #28]
 80155d4:	3314      	adds	r3, #20
 80155d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80155d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80155e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80155ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ec:	3308      	adds	r3, #8
 80155ee:	2214      	movs	r2, #20
 80155f0:	4619      	mov	r1, r3
 80155f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155f4:	f000 ff67 	bl	80164c6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80155f8:	8a3b      	ldrh	r3, [r7, #16]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7f5 fc9a 	bl	800af34 <lwip_htons>
 8015600:	4603      	mov	r3, r0
 8015602:	461a      	mov	r2, r3
 8015604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015606:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801560a:	2200      	movs	r2, #0
 801560c:	719a      	strb	r2, [r3, #6]
 801560e:	2200      	movs	r2, #0
 8015610:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015614:	2200      	movs	r2, #0
 8015616:	729a      	strb	r2, [r3, #10]
 8015618:	2200      	movs	r2, #0
 801561a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015622:	e00d      	b.n	8015640 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801562a:	2114      	movs	r1, #20
 801562c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801562e:	f7f6 ffed 	bl	800c60c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015632:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f7f7 f93d 	bl	800c8b4 <pbuf_cat>
      r = iprh->next_pbuf;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1ee      	bne.n	8015624 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015646:	4b1e      	ldr	r3, [pc, #120]	@ (80156c0 <ip4_reass+0x2b4>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801564c:	429a      	cmp	r2, r3
 801564e:	d102      	bne.n	8015656 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015650:	2300      	movs	r3, #0
 8015652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015654:	e010      	b.n	8015678 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015656:	4b1a      	ldr	r3, [pc, #104]	@ (80156c0 <ip4_reass+0x2b4>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801565c:	e007      	b.n	801566e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015664:	429a      	cmp	r2, r3
 8015666:	d006      	beq.n	8015676 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015670:	2b00      	cmp	r3, #0
 8015672:	d1f4      	bne.n	801565e <ip4_reass+0x252>
 8015674:	e000      	b.n	8015678 <ip4_reass+0x26c>
          break;
 8015676:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801567a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801567c:	f7ff fd2e 	bl	80150dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7f7 f8d7 	bl	800c834 <pbuf_clen>
 8015686:	4603      	mov	r3, r0
 8015688:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801568a:	4b0c      	ldr	r3, [pc, #48]	@ (80156bc <ip4_reass+0x2b0>)
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	8c3a      	ldrh	r2, [r7, #32]
 8015690:	429a      	cmp	r2, r3
 8015692:	d906      	bls.n	80156a2 <ip4_reass+0x296>
 8015694:	4b0b      	ldr	r3, [pc, #44]	@ (80156c4 <ip4_reass+0x2b8>)
 8015696:	f240 229b 	movw	r2, #667	@ 0x29b
 801569a:	490b      	ldr	r1, [pc, #44]	@ (80156c8 <ip4_reass+0x2bc>)
 801569c:	480b      	ldr	r0, [pc, #44]	@ (80156cc <ip4_reass+0x2c0>)
 801569e:	f000 fda7 	bl	80161f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80156a2:	4b06      	ldr	r3, [pc, #24]	@ (80156bc <ip4_reass+0x2b0>)
 80156a4:	881a      	ldrh	r2, [r3, #0]
 80156a6:	8c3b      	ldrh	r3, [r7, #32]
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	b29a      	uxth	r2, r3
 80156ac:	4b03      	ldr	r3, [pc, #12]	@ (80156bc <ip4_reass+0x2b0>)
 80156ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	e038      	b.n	8015726 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80156b4:	2300      	movs	r3, #0
 80156b6:	e036      	b.n	8015726 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80156b8:	bf00      	nop
 80156ba:	e00a      	b.n	80156d2 <ip4_reass+0x2c6>
 80156bc:	2000ec94 	.word	0x2000ec94
 80156c0:	2000ec90 	.word	0x2000ec90
 80156c4:	0801a968 	.word	0x0801a968
 80156c8:	0801aad8 	.word	0x0801aad8
 80156cc:	0801a9b0 	.word	0x0801a9b0
    goto nullreturn_ipr;
 80156d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80156d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d106      	bne.n	80156e6 <ip4_reass+0x2da>
 80156d8:	4b15      	ldr	r3, [pc, #84]	@ (8015730 <ip4_reass+0x324>)
 80156da:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80156de:	4915      	ldr	r1, [pc, #84]	@ (8015734 <ip4_reass+0x328>)
 80156e0:	4815      	ldr	r0, [pc, #84]	@ (8015738 <ip4_reass+0x32c>)
 80156e2:	f000 fd85 	bl	80161f0 <iprintf>
  if (ipr->p == NULL) {
 80156e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d116      	bne.n	801571c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80156ee:	4b13      	ldr	r3, [pc, #76]	@ (801573c <ip4_reass+0x330>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156f4:	429a      	cmp	r2, r3
 80156f6:	d006      	beq.n	8015706 <ip4_reass+0x2fa>
 80156f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015730 <ip4_reass+0x324>)
 80156fa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80156fe:	4910      	ldr	r1, [pc, #64]	@ (8015740 <ip4_reass+0x334>)
 8015700:	480d      	ldr	r0, [pc, #52]	@ (8015738 <ip4_reass+0x32c>)
 8015702:	f000 fd75 	bl	80161f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015706:	2100      	movs	r1, #0
 8015708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801570a:	f7ff fce7 	bl	80150dc <ip_reass_dequeue_datagram>
 801570e:	e006      	b.n	801571e <ip4_reass+0x312>
    goto nullreturn;
 8015710:	bf00      	nop
 8015712:	e004      	b.n	801571e <ip4_reass+0x312>
    goto nullreturn;
 8015714:	bf00      	nop
 8015716:	e002      	b.n	801571e <ip4_reass+0x312>
      goto nullreturn;
 8015718:	bf00      	nop
 801571a:	e000      	b.n	801571e <ip4_reass+0x312>
  }

nullreturn:
 801571c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7f6 fffa 	bl	800c718 <pbuf_free>
  return NULL;
 8015724:	2300      	movs	r3, #0
}
 8015726:	4618      	mov	r0, r3
 8015728:	3738      	adds	r7, #56	@ 0x38
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	0801a968 	.word	0x0801a968
 8015734:	0801aaf4 	.word	0x0801aaf4
 8015738:	0801a9b0 	.word	0x0801a9b0
 801573c:	2000ec90 	.word	0x2000ec90
 8015740:	0801ab00 	.word	0x0801ab00

08015744 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015748:	2005      	movs	r0, #5
 801574a:	f7f6 f8cb 	bl	800b8e4 <memp_malloc>
 801574e:	4603      	mov	r3, r0
}
 8015750:	4618      	mov	r0, r3
 8015752:	bd80      	pop	{r7, pc}

08015754 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d106      	bne.n	8015770 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015762:	4b07      	ldr	r3, [pc, #28]	@ (8015780 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015764:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015768:	4906      	ldr	r1, [pc, #24]	@ (8015784 <ip_frag_free_pbuf_custom_ref+0x30>)
 801576a:	4807      	ldr	r0, [pc, #28]	@ (8015788 <ip_frag_free_pbuf_custom_ref+0x34>)
 801576c:	f000 fd40 	bl	80161f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015770:	6879      	ldr	r1, [r7, #4]
 8015772:	2005      	movs	r0, #5
 8015774:	f7f6 f92c 	bl	800b9d0 <memp_free>
}
 8015778:	bf00      	nop
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	0801a968 	.word	0x0801a968
 8015784:	0801ab20 	.word	0x0801ab20
 8015788:	0801a9b0 	.word	0x0801a9b0

0801578c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b084      	sub	sp, #16
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d106      	bne.n	80157ac <ipfrag_free_pbuf_custom+0x20>
 801579e:	4b11      	ldr	r3, [pc, #68]	@ (80157e4 <ipfrag_free_pbuf_custom+0x58>)
 80157a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80157a4:	4910      	ldr	r1, [pc, #64]	@ (80157e8 <ipfrag_free_pbuf_custom+0x5c>)
 80157a6:	4811      	ldr	r0, [pc, #68]	@ (80157ec <ipfrag_free_pbuf_custom+0x60>)
 80157a8:	f000 fd22 	bl	80161f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80157ac:	68fa      	ldr	r2, [r7, #12]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d006      	beq.n	80157c2 <ipfrag_free_pbuf_custom+0x36>
 80157b4:	4b0b      	ldr	r3, [pc, #44]	@ (80157e4 <ipfrag_free_pbuf_custom+0x58>)
 80157b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80157ba:	490d      	ldr	r1, [pc, #52]	@ (80157f0 <ipfrag_free_pbuf_custom+0x64>)
 80157bc:	480b      	ldr	r0, [pc, #44]	@ (80157ec <ipfrag_free_pbuf_custom+0x60>)
 80157be:	f000 fd17 	bl	80161f0 <iprintf>
  if (pcr->original != NULL) {
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	695b      	ldr	r3, [r3, #20]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d004      	beq.n	80157d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	695b      	ldr	r3, [r3, #20]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7f6 ffa2 	bl	800c718 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f7ff ffbd 	bl	8015754 <ip_frag_free_pbuf_custom_ref>
}
 80157da:	bf00      	nop
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	0801a968 	.word	0x0801a968
 80157e8:	0801ab2c 	.word	0x0801ab2c
 80157ec:	0801a9b0 	.word	0x0801a9b0
 80157f0:	0801ab38 	.word	0x0801ab38

080157f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b094      	sub	sp, #80	@ 0x50
 80157f8:	af02      	add	r7, sp, #8
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015800:	2300      	movs	r3, #0
 8015802:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801580a:	3b14      	subs	r3, #20
 801580c:	2b00      	cmp	r3, #0
 801580e:	da00      	bge.n	8015812 <ip4_frag+0x1e>
 8015810:	3307      	adds	r3, #7
 8015812:	10db      	asrs	r3, r3, #3
 8015814:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015816:	2314      	movs	r3, #20
 8015818:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015822:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	f003 030f 	and.w	r3, r3, #15
 801582c:	b2db      	uxtb	r3, r3
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	b2db      	uxtb	r3, r3
 8015832:	2b14      	cmp	r3, #20
 8015834:	d002      	beq.n	801583c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015836:	f06f 0305 	mvn.w	r3, #5
 801583a:	e110      	b.n	8015a5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	895b      	ldrh	r3, [r3, #10]
 8015840:	2b13      	cmp	r3, #19
 8015842:	d809      	bhi.n	8015858 <ip4_frag+0x64>
 8015844:	4b88      	ldr	r3, [pc, #544]	@ (8015a68 <ip4_frag+0x274>)
 8015846:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801584a:	4988      	ldr	r1, [pc, #544]	@ (8015a6c <ip4_frag+0x278>)
 801584c:	4888      	ldr	r0, [pc, #544]	@ (8015a70 <ip4_frag+0x27c>)
 801584e:	f000 fccf 	bl	80161f0 <iprintf>
 8015852:	f06f 0305 	mvn.w	r3, #5
 8015856:	e102      	b.n	8015a5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801585a:	88db      	ldrh	r3, [r3, #6]
 801585c:	b29b      	uxth	r3, r3
 801585e:	4618      	mov	r0, r3
 8015860:	f7f5 fb68 	bl	800af34 <lwip_htons>
 8015864:	4603      	mov	r3, r0
 8015866:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015868:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801586a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801586e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015872:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015878:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	891b      	ldrh	r3, [r3, #8]
 801587e:	3b14      	subs	r3, #20
 8015880:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015884:	e0e1      	b.n	8015a4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015886:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015888:	00db      	lsls	r3, r3, #3
 801588a:	b29b      	uxth	r3, r3
 801588c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015890:	4293      	cmp	r3, r2
 8015892:	bf28      	it	cs
 8015894:	4613      	movcs	r3, r2
 8015896:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015898:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801589c:	2114      	movs	r1, #20
 801589e:	200e      	movs	r0, #14
 80158a0:	f7f6 fc56 	bl	800c150 <pbuf_alloc>
 80158a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80158a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f000 80d5 	beq.w	8015a58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80158ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158b0:	895b      	ldrh	r3, [r3, #10]
 80158b2:	2b13      	cmp	r3, #19
 80158b4:	d806      	bhi.n	80158c4 <ip4_frag+0xd0>
 80158b6:	4b6c      	ldr	r3, [pc, #432]	@ (8015a68 <ip4_frag+0x274>)
 80158b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80158bc:	496d      	ldr	r1, [pc, #436]	@ (8015a74 <ip4_frag+0x280>)
 80158be:	486c      	ldr	r0, [pc, #432]	@ (8015a70 <ip4_frag+0x27c>)
 80158c0:	f000 fc96 	bl	80161f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80158c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	2214      	movs	r2, #20
 80158ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80158cc:	4618      	mov	r0, r3
 80158ce:	f000 fdfa 	bl	80164c6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80158d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80158d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80158de:	e064      	b.n	80159aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	895a      	ldrh	r2, [r3, #10]
 80158e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80158e6:	1ad3      	subs	r3, r2, r3
 80158e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	895b      	ldrh	r3, [r3, #10]
 80158ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d906      	bls.n	8015902 <ip4_frag+0x10e>
 80158f4:	4b5c      	ldr	r3, [pc, #368]	@ (8015a68 <ip4_frag+0x274>)
 80158f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80158fa:	495f      	ldr	r1, [pc, #380]	@ (8015a78 <ip4_frag+0x284>)
 80158fc:	485c      	ldr	r0, [pc, #368]	@ (8015a70 <ip4_frag+0x27c>)
 80158fe:	f000 fc77 	bl	80161f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015902:	8bfa      	ldrh	r2, [r7, #30]
 8015904:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015908:	4293      	cmp	r3, r2
 801590a:	bf28      	it	cs
 801590c:	4613      	movcs	r3, r2
 801590e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015916:	2b00      	cmp	r3, #0
 8015918:	d105      	bne.n	8015926 <ip4_frag+0x132>
        poff = 0;
 801591a:	2300      	movs	r3, #0
 801591c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	60fb      	str	r3, [r7, #12]
        continue;
 8015924:	e041      	b.n	80159aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015926:	f7ff ff0d 	bl	8015744 <ip_frag_alloc_pbuf_custom_ref>
 801592a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d103      	bne.n	801593a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015934:	f7f6 fef0 	bl	800c718 <pbuf_free>
        goto memerr;
 8015938:	e08f      	b.n	8015a5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801593a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015940:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015942:	4413      	add	r3, r2
 8015944:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015948:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801594c:	9201      	str	r2, [sp, #4]
 801594e:	9300      	str	r3, [sp, #0]
 8015950:	4603      	mov	r3, r0
 8015952:	2241      	movs	r2, #65	@ 0x41
 8015954:	2000      	movs	r0, #0
 8015956:	f7f6 fd25 	bl	800c3a4 <pbuf_alloced_custom>
 801595a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d106      	bne.n	8015970 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015962:	69b8      	ldr	r0, [r7, #24]
 8015964:	f7ff fef6 	bl	8015754 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015968:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801596a:	f7f6 fed5 	bl	800c718 <pbuf_free>
        goto memerr;
 801596e:	e074      	b.n	8015a5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015970:	68f8      	ldr	r0, [r7, #12]
 8015972:	f7f6 ff77 	bl	800c864 <pbuf_ref>
      pcr->original = p;
 8015976:	69bb      	ldr	r3, [r7, #24]
 8015978:	68fa      	ldr	r2, [r7, #12]
 801597a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	4a3f      	ldr	r2, [pc, #252]	@ (8015a7c <ip4_frag+0x288>)
 8015980:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015982:	6979      	ldr	r1, [r7, #20]
 8015984:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015986:	f7f6 ff95 	bl	800c8b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801598a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801598e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015992:	1ad3      	subs	r3, r2, r3
 8015994:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015998:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801599c:	2b00      	cmp	r3, #0
 801599e:	d004      	beq.n	80159aa <ip4_frag+0x1b6>
        poff = 0;
 80159a0:	2300      	movs	r3, #0
 80159a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80159aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d196      	bne.n	80158e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80159b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80159b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159b8:	4413      	add	r3, r2
 80159ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80159c0:	f1a3 0213 	sub.w	r2, r3, #19
 80159c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80159c8:	429a      	cmp	r2, r3
 80159ca:	bfcc      	ite	gt
 80159cc:	2301      	movgt	r3, #1
 80159ce:	2300      	movle	r3, #0
 80159d0:	b2db      	uxtb	r3, r3
 80159d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80159d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80159d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80159de:	6a3b      	ldr	r3, [r7, #32]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d002      	beq.n	80159ea <ip4_frag+0x1f6>
 80159e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80159ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80159ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80159f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80159f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7f5 fa9d 	bl	800af34 <lwip_htons>
 80159fa:	4603      	mov	r3, r0
 80159fc:	461a      	mov	r2, r3
 80159fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015a02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015a04:	3314      	adds	r3, #20
 8015a06:	b29b      	uxth	r3, r3
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f5 fa93 	bl	800af34 <lwip_htons>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	461a      	mov	r2, r3
 8015a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a18:	2200      	movs	r2, #0
 8015a1a:	729a      	strb	r2, [r3, #10]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	695b      	ldr	r3, [r3, #20]
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015a28:	68b8      	ldr	r0, [r7, #8]
 8015a2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015a2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a2e:	f7f6 fe73 	bl	800c718 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015a32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015a36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015a3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015a42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a44:	4413      	add	r3, r2
 8015a46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	f47f af19 	bne.w	8015886 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015a54:	2300      	movs	r3, #0
 8015a56:	e002      	b.n	8015a5e <ip4_frag+0x26a>
      goto memerr;
 8015a58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3748      	adds	r7, #72	@ 0x48
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	0801a968 	.word	0x0801a968
 8015a6c:	0801ab44 	.word	0x0801ab44
 8015a70:	0801a9b0 	.word	0x0801a9b0
 8015a74:	0801ab60 	.word	0x0801ab60
 8015a78:	0801ab80 	.word	0x0801ab80
 8015a7c:	0801578d 	.word	0x0801578d

08015a80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015a8a:	230e      	movs	r3, #14
 8015a8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	895b      	ldrh	r3, [r3, #10]
 8015a92:	2b0e      	cmp	r3, #14
 8015a94:	d96e      	bls.n	8015b74 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	7bdb      	ldrb	r3, [r3, #15]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d106      	bne.n	8015aac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	b2da      	uxtb	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	7b1a      	ldrb	r2, [r3, #12]
 8015ab6:	7b5b      	ldrb	r3, [r3, #13]
 8015ab8:	021b      	lsls	r3, r3, #8
 8015aba:	4313      	orrs	r3, r2
 8015abc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	f003 0301 	and.w	r3, r3, #1
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d023      	beq.n	8015b12 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	2b01      	cmp	r3, #1
 8015ad0:	d10f      	bne.n	8015af2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	785b      	ldrb	r3, [r3, #1]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d11b      	bne.n	8015b12 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015ada:	693b      	ldr	r3, [r7, #16]
 8015adc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015ade:	2b5e      	cmp	r3, #94	@ 0x5e
 8015ae0:	d117      	bne.n	8015b12 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	7b5b      	ldrb	r3, [r3, #13]
 8015ae6:	f043 0310 	orr.w	r3, r3, #16
 8015aea:	b2da      	uxtb	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	735a      	strb	r2, [r3, #13]
 8015af0:	e00f      	b.n	8015b12 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	2206      	movs	r2, #6
 8015af6:	4928      	ldr	r1, [pc, #160]	@ (8015b98 <ethernet_input+0x118>)
 8015af8:	4618      	mov	r0, r3
 8015afa:	f000 fbee 	bl	80162da <memcmp>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d106      	bne.n	8015b12 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	7b5b      	ldrb	r3, [r3, #13]
 8015b08:	f043 0308 	orr.w	r3, r3, #8
 8015b0c:	b2da      	uxtb	r2, r3
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015b12:	89fb      	ldrh	r3, [r7, #14]
 8015b14:	2b08      	cmp	r3, #8
 8015b16:	d003      	beq.n	8015b20 <ethernet_input+0xa0>
 8015b18:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015b1c:	d014      	beq.n	8015b48 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015b1e:	e032      	b.n	8015b86 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015b26:	f003 0308 	and.w	r3, r3, #8
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d024      	beq.n	8015b78 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015b2e:	8afb      	ldrh	r3, [r7, #22]
 8015b30:	4619      	mov	r1, r3
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f7f6 fd6a 	bl	800c60c <pbuf_remove_header>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d11e      	bne.n	8015b7c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015b3e:	6839      	ldr	r1, [r7, #0]
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f7fe ff21 	bl	8014988 <ip4_input>
      break;
 8015b46:	e013      	b.n	8015b70 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015b4e:	f003 0308 	and.w	r3, r3, #8
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d014      	beq.n	8015b80 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015b56:	8afb      	ldrh	r3, [r7, #22]
 8015b58:	4619      	mov	r1, r3
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f7f6 fd56 	bl	800c60c <pbuf_remove_header>
 8015b60:	4603      	mov	r3, r0
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d10e      	bne.n	8015b84 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015b66:	6839      	ldr	r1, [r7, #0]
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f7fe f8c1 	bl	8013cf0 <etharp_input>
      break;
 8015b6e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015b70:	2300      	movs	r3, #0
 8015b72:	e00c      	b.n	8015b8e <ethernet_input+0x10e>
    goto free_and_return;
 8015b74:	bf00      	nop
 8015b76:	e006      	b.n	8015b86 <ethernet_input+0x106>
        goto free_and_return;
 8015b78:	bf00      	nop
 8015b7a:	e004      	b.n	8015b86 <ethernet_input+0x106>
        goto free_and_return;
 8015b7c:	bf00      	nop
 8015b7e:	e002      	b.n	8015b86 <ethernet_input+0x106>
        goto free_and_return;
 8015b80:	bf00      	nop
 8015b82:	e000      	b.n	8015b86 <ethernet_input+0x106>
        goto free_and_return;
 8015b84:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7f6 fdc6 	bl	800c718 <pbuf_free>
  return ERR_OK;
 8015b8c:	2300      	movs	r3, #0
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3718      	adds	r7, #24
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	0801ad60 	.word	0x0801ad60

08015b9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b086      	sub	sp, #24
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	607a      	str	r2, [r7, #4]
 8015ba8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015baa:	8c3b      	ldrh	r3, [r7, #32]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7f5 f9c1 	bl	800af34 <lwip_htons>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015bb6:	210e      	movs	r1, #14
 8015bb8:	68b8      	ldr	r0, [r7, #8]
 8015bba:	f7f6 fd17 	bl	800c5ec <pbuf_add_header>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d125      	bne.n	8015c10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	8afa      	ldrh	r2, [r7, #22]
 8015bce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	2206      	movs	r2, #6
 8015bd4:	6839      	ldr	r1, [r7, #0]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f000 fc75 	bl	80164c6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	3306      	adds	r3, #6
 8015be0:	2206      	movs	r2, #6
 8015be2:	6879      	ldr	r1, [r7, #4]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f000 fc6e 	bl	80164c6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015bf0:	2b06      	cmp	r3, #6
 8015bf2:	d006      	beq.n	8015c02 <ethernet_output+0x66>
 8015bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8015c20 <ethernet_output+0x84>)
 8015bf6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015bfa:	490a      	ldr	r1, [pc, #40]	@ (8015c24 <ethernet_output+0x88>)
 8015bfc:	480a      	ldr	r0, [pc, #40]	@ (8015c28 <ethernet_output+0x8c>)
 8015bfe:	f000 faf7 	bl	80161f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	699b      	ldr	r3, [r3, #24]
 8015c06:	68b9      	ldr	r1, [r7, #8]
 8015c08:	68f8      	ldr	r0, [r7, #12]
 8015c0a:	4798      	blx	r3
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	e002      	b.n	8015c16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015c10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015c12:	f06f 0301 	mvn.w	r3, #1
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3718      	adds	r7, #24
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	0801ab90 	.word	0x0801ab90
 8015c24:	0801abc8 	.word	0x0801abc8
 8015c28:	0801abfc 	.word	0x0801abfc

08015c2c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b086      	sub	sp, #24
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	60bb      	str	r3, [r7, #8]
 8015c3a:	2304      	movs	r3, #4
 8015c3c:	60fb      	str	r3, [r7, #12]
 8015c3e:	2300      	movs	r3, #0
 8015c40:	613b      	str	r3, [r7, #16]
 8015c42:	2300      	movs	r3, #0
 8015c44:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015c46:	f107 0308 	add.w	r3, r7, #8
 8015c4a:	2100      	movs	r1, #0
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7f0 f84c 	bl	8005cea <osMessageCreate>
 8015c52:	4602      	mov	r2, r0
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d102      	bne.n	8015c66 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015c60:	f04f 33ff 	mov.w	r3, #4294967295
 8015c64:	e000      	b.n	8015c68 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015c66:	2300      	movs	r3, #0
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3718      	adds	r7, #24
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7f0 f911 	bl	8005ea4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f0 f922 	bl	8005ed0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015c8c:	bf00      	nop
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}

08015c94 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	6839      	ldr	r1, [r7, #0]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f0 f848 	bl	8005d3c <osMessagePut>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d102      	bne.n	8015cb8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	73fb      	strb	r3, [r7, #15]
 8015cb6:	e001      	b.n	8015cbc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015cb8:	23ff      	movs	r3, #255	@ 0xff
 8015cba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b08c      	sub	sp, #48	@ 0x30
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	61f8      	str	r0, [r7, #28]
 8015cd0:	61b9      	str	r1, [r7, #24]
 8015cd2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015cd4:	f7ef fe34 	bl	8005940 <osKernelSysTick>
 8015cd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d017      	beq.n	8015d10 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	6819      	ldr	r1, [r3, #0]
 8015ce4:	f107 0320 	add.w	r3, r7, #32
 8015ce8:	697a      	ldr	r2, [r7, #20]
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7f0 f866 	bl	8005dbc <osMessageGet>

    if(event.status == osEventMessage)
 8015cf0:	6a3b      	ldr	r3, [r7, #32]
 8015cf2:	2b10      	cmp	r3, #16
 8015cf4:	d109      	bne.n	8015d0a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015cfe:	f7ef fe1f 	bl	8005940 <osKernelSysTick>
 8015d02:	4602      	mov	r2, r0
 8015d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d06:	1ad3      	subs	r3, r2, r3
 8015d08:	e019      	b.n	8015d3e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d0e:	e016      	b.n	8015d3e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015d10:	69fb      	ldr	r3, [r7, #28]
 8015d12:	6819      	ldr	r1, [r3, #0]
 8015d14:	463b      	mov	r3, r7
 8015d16:	f04f 32ff 	mov.w	r2, #4294967295
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f0 f84e 	bl	8005dbc <osMessageGet>
 8015d20:	f107 0320 	add.w	r3, r7, #32
 8015d24:	463a      	mov	r2, r7
 8015d26:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d2e:	461a      	mov	r2, r3
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015d34:	f7ef fe04 	bl	8005940 <osKernelSysTick>
 8015d38:	4602      	mov	r2, r0
 8015d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d3c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3730      	adds	r7, #48	@ 0x30
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b086      	sub	sp, #24
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
 8015d4e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6819      	ldr	r1, [r3, #0]
 8015d54:	f107 030c 	add.w	r3, r7, #12
 8015d58:	2200      	movs	r2, #0
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7f0 f82e 	bl	8005dbc <osMessageGet>

  if(event.status == osEventMessage)
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2b10      	cmp	r3, #16
 8015d64:	d105      	bne.n	8015d72 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	461a      	mov	r2, r3
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	e001      	b.n	8015d76 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015d72:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015d76:	4618      	mov	r0, r3
 8015d78:	3718      	adds	r7, #24
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}

08015d7e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015d7e:	b480      	push	{r7}
 8015d80:	b083      	sub	sp, #12
 8015d82:	af00      	add	r7, sp, #0
 8015d84:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d101      	bne.n	8015d92 <sys_mbox_valid+0x14>
    return 0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	e000      	b.n	8015d94 <sys_mbox_valid+0x16>
  else
    return 1;
 8015d92:	2301      	movs	r3, #1
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	370c      	adds	r7, #12
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9e:	4770      	bx	lr

08015da0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015da0:	b480      	push	{r7}
 8015da2:	b083      	sub	sp, #12
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2200      	movs	r2, #0
 8015dac:	601a      	str	r2, [r3, #0]
}
 8015dae:	bf00      	nop
 8015db0:	370c      	adds	r7, #12
 8015db2:	46bd      	mov	sp, r7
 8015db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db8:	4770      	bx	lr

08015dba <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b084      	sub	sp, #16
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	6078      	str	r0, [r7, #4]
 8015dc2:	460b      	mov	r3, r1
 8015dc4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	60bb      	str	r3, [r7, #8]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015dce:	f107 0308 	add.w	r3, r7, #8
 8015dd2:	2101      	movs	r1, #1
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7ef febf 	bl	8005b58 <osSemaphoreCreate>
 8015dda:	4602      	mov	r2, r0
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d102      	bne.n	8015dee <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015de8:	f04f 33ff 	mov.w	r3, #4294967295
 8015dec:	e009      	b.n	8015e02 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015dee:	78fb      	ldrb	r3, [r7, #3]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d105      	bne.n	8015e00 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	2100      	movs	r1, #0
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7ef fede 	bl	8005bbc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015e00:	2300      	movs	r3, #0
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}

08015e0a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015e0a:	b580      	push	{r7, lr}
 8015e0c:	b084      	sub	sp, #16
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6078      	str	r0, [r7, #4]
 8015e12:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015e14:	f7ef fd94 	bl	8005940 <osKernelSysTick>
 8015e18:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d011      	beq.n	8015e44 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	6839      	ldr	r1, [r7, #0]
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7ef fec8 	bl	8005bbc <osSemaphoreWait>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d105      	bne.n	8015e3e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015e32:	f7ef fd85 	bl	8005940 <osKernelSysTick>
 8015e36:	4602      	mov	r2, r0
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	1ad3      	subs	r3, r2, r3
 8015e3c:	e012      	b.n	8015e64 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e42:	e00f      	b.n	8015e64 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015e44:	bf00      	nop
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7ef feb4 	bl	8005bbc <osSemaphoreWait>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d1f5      	bne.n	8015e46 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015e5a:	f7ef fd71 	bl	8005940 <osKernelSysTick>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3710      	adds	r7, #16
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7ef feed 	bl	8005c58 <osSemaphoreRelease>
}
 8015e7e:	bf00      	nop
 8015e80:	3708      	adds	r7, #8
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b082      	sub	sp, #8
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7ef ff16 	bl	8005cc4 <osSemaphoreDelete>
}
 8015e98:	bf00      	nop
 8015e9a:	3708      	adds	r7, #8
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b083      	sub	sp, #12
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d101      	bne.n	8015eb4 <sys_sem_valid+0x14>
    return 0;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	e000      	b.n	8015eb6 <sys_sem_valid+0x16>
  else
    return 1;
 8015eb4:	2301      	movs	r3, #1
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	370c      	adds	r7, #12
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr

08015ec2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015ec2:	b480      	push	{r7}
 8015ec4:	b083      	sub	sp, #12
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2200      	movs	r2, #0
 8015ece:	601a      	str	r2, [r3, #0]
}
 8015ed0:	bf00      	nop
 8015ed2:	370c      	adds	r7, #12
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eda:	4770      	bx	lr

08015edc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015ee0:	4803      	ldr	r0, [pc, #12]	@ (8015ef0 <sys_init+0x14>)
 8015ee2:	f7ef fd9d 	bl	8005a20 <osMutexCreate>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	4a02      	ldr	r2, [pc, #8]	@ (8015ef4 <sys_init+0x18>)
 8015eea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015eec:	bf00      	nop
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	0801ad70 	.word	0x0801ad70
 8015ef4:	2000ec98 	.word	0x2000ec98

08015ef8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015f00:	2300      	movs	r3, #0
 8015f02:	60bb      	str	r3, [r7, #8]
 8015f04:	2300      	movs	r3, #0
 8015f06:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015f08:	f107 0308 	add.w	r3, r7, #8
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ef fd87 	bl	8005a20 <osMutexCreate>
 8015f12:	4602      	mov	r2, r0
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d102      	bne.n	8015f26 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015f20:	f04f 33ff 	mov.w	r3, #4294967295
 8015f24:	e000      	b.n	8015f28 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015f26:	2300      	movs	r3, #0
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7ef fd85 	bl	8005a50 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015f46:	bf00      	nop
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015f4e:	b580      	push	{r7, lr}
 8015f50:	b082      	sub	sp, #8
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7ef fdc6 	bl	8005aec <osMutexRelease>
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08c      	sub	sp, #48	@ 0x30
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015f76:	f107 0314 	add.w	r3, r7, #20
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	601a      	str	r2, [r3, #0]
 8015f7e:	605a      	str	r2, [r3, #4]
 8015f80:	609a      	str	r2, [r3, #8]
 8015f82:	60da      	str	r2, [r3, #12]
 8015f84:	611a      	str	r2, [r3, #16]
 8015f86:	615a      	str	r2, [r3, #20]
 8015f88:	619a      	str	r2, [r3, #24]
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	617b      	str	r3, [r7, #20]
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	61bb      	str	r3, [r7, #24]
 8015f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f94:	b21b      	sxth	r3, r3
 8015f96:	83bb      	strh	r3, [r7, #28]
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015f9c:	f107 0314 	add.w	r3, r7, #20
 8015fa0:	6879      	ldr	r1, [r7, #4]
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7ef fcdc 	bl	8005960 <osThreadCreate>
 8015fa8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3730      	adds	r7, #48	@ 0x30
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
	...

08015fb4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015fb8:	4b04      	ldr	r3, [pc, #16]	@ (8015fcc <sys_arch_protect+0x18>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f7ef fd45 	bl	8005a50 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015fc6:	2301      	movs	r3, #1
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	2000ec98 	.word	0x2000ec98

08015fd0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015fd8:	4b04      	ldr	r3, [pc, #16]	@ (8015fec <sys_arch_unprotect+0x1c>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7ef fd85 	bl	8005aec <osMutexRelease>
}
 8015fe2:	bf00      	nop
 8015fe4:	3708      	adds	r7, #8
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	2000ec98 	.word	0x2000ec98

08015ff0 <rand>:
 8015ff0:	4b16      	ldr	r3, [pc, #88]	@ (801604c <rand+0x5c>)
 8015ff2:	b510      	push	{r4, lr}
 8015ff4:	681c      	ldr	r4, [r3, #0]
 8015ff6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ff8:	b9b3      	cbnz	r3, 8016028 <rand+0x38>
 8015ffa:	2018      	movs	r0, #24
 8015ffc:	f000 fada 	bl	80165b4 <malloc>
 8016000:	4602      	mov	r2, r0
 8016002:	6320      	str	r0, [r4, #48]	@ 0x30
 8016004:	b920      	cbnz	r0, 8016010 <rand+0x20>
 8016006:	4b12      	ldr	r3, [pc, #72]	@ (8016050 <rand+0x60>)
 8016008:	4812      	ldr	r0, [pc, #72]	@ (8016054 <rand+0x64>)
 801600a:	2152      	movs	r1, #82	@ 0x52
 801600c:	f000 fa6a 	bl	80164e4 <__assert_func>
 8016010:	4911      	ldr	r1, [pc, #68]	@ (8016058 <rand+0x68>)
 8016012:	4b12      	ldr	r3, [pc, #72]	@ (801605c <rand+0x6c>)
 8016014:	e9c0 1300 	strd	r1, r3, [r0]
 8016018:	4b11      	ldr	r3, [pc, #68]	@ (8016060 <rand+0x70>)
 801601a:	6083      	str	r3, [r0, #8]
 801601c:	230b      	movs	r3, #11
 801601e:	8183      	strh	r3, [r0, #12]
 8016020:	2100      	movs	r1, #0
 8016022:	2001      	movs	r0, #1
 8016024:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016028:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801602a:	480e      	ldr	r0, [pc, #56]	@ (8016064 <rand+0x74>)
 801602c:	690b      	ldr	r3, [r1, #16]
 801602e:	694c      	ldr	r4, [r1, #20]
 8016030:	4a0d      	ldr	r2, [pc, #52]	@ (8016068 <rand+0x78>)
 8016032:	4358      	muls	r0, r3
 8016034:	fb02 0004 	mla	r0, r2, r4, r0
 8016038:	fba3 3202 	umull	r3, r2, r3, r2
 801603c:	3301      	adds	r3, #1
 801603e:	eb40 0002 	adc.w	r0, r0, r2
 8016042:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016046:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801604a:	bd10      	pop	{r4, pc}
 801604c:	2000013c 	.word	0x2000013c
 8016050:	0801ad78 	.word	0x0801ad78
 8016054:	0801ad8f 	.word	0x0801ad8f
 8016058:	abcd330e 	.word	0xabcd330e
 801605c:	e66d1234 	.word	0xe66d1234
 8016060:	0005deec 	.word	0x0005deec
 8016064:	5851f42d 	.word	0x5851f42d
 8016068:	4c957f2d 	.word	0x4c957f2d

0801606c <std>:
 801606c:	2300      	movs	r3, #0
 801606e:	b510      	push	{r4, lr}
 8016070:	4604      	mov	r4, r0
 8016072:	e9c0 3300 	strd	r3, r3, [r0]
 8016076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801607a:	6083      	str	r3, [r0, #8]
 801607c:	8181      	strh	r1, [r0, #12]
 801607e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016080:	81c2      	strh	r2, [r0, #14]
 8016082:	6183      	str	r3, [r0, #24]
 8016084:	4619      	mov	r1, r3
 8016086:	2208      	movs	r2, #8
 8016088:	305c      	adds	r0, #92	@ 0x5c
 801608a:	f000 f950 	bl	801632e <memset>
 801608e:	4b0d      	ldr	r3, [pc, #52]	@ (80160c4 <std+0x58>)
 8016090:	6263      	str	r3, [r4, #36]	@ 0x24
 8016092:	4b0d      	ldr	r3, [pc, #52]	@ (80160c8 <std+0x5c>)
 8016094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016096:	4b0d      	ldr	r3, [pc, #52]	@ (80160cc <std+0x60>)
 8016098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801609a:	4b0d      	ldr	r3, [pc, #52]	@ (80160d0 <std+0x64>)
 801609c:	6323      	str	r3, [r4, #48]	@ 0x30
 801609e:	4b0d      	ldr	r3, [pc, #52]	@ (80160d4 <std+0x68>)
 80160a0:	6224      	str	r4, [r4, #32]
 80160a2:	429c      	cmp	r4, r3
 80160a4:	d006      	beq.n	80160b4 <std+0x48>
 80160a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80160aa:	4294      	cmp	r4, r2
 80160ac:	d002      	beq.n	80160b4 <std+0x48>
 80160ae:	33d0      	adds	r3, #208	@ 0xd0
 80160b0:	429c      	cmp	r4, r3
 80160b2:	d105      	bne.n	80160c0 <std+0x54>
 80160b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80160b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160bc:	f000 ba00 	b.w	80164c0 <__retarget_lock_init_recursive>
 80160c0:	bd10      	pop	{r4, pc}
 80160c2:	bf00      	nop
 80160c4:	08016255 	.word	0x08016255
 80160c8:	08016277 	.word	0x08016277
 80160cc:	080162af 	.word	0x080162af
 80160d0:	080162d3 	.word	0x080162d3
 80160d4:	2000ec9c 	.word	0x2000ec9c

080160d8 <stdio_exit_handler>:
 80160d8:	4a02      	ldr	r2, [pc, #8]	@ (80160e4 <stdio_exit_handler+0xc>)
 80160da:	4903      	ldr	r1, [pc, #12]	@ (80160e8 <stdio_exit_handler+0x10>)
 80160dc:	4803      	ldr	r0, [pc, #12]	@ (80160ec <stdio_exit_handler+0x14>)
 80160de:	f000 b869 	b.w	80161b4 <_fwalk_sglue>
 80160e2:	bf00      	nop
 80160e4:	20000130 	.word	0x20000130
 80160e8:	08017079 	.word	0x08017079
 80160ec:	20000140 	.word	0x20000140

080160f0 <cleanup_stdio>:
 80160f0:	6841      	ldr	r1, [r0, #4]
 80160f2:	4b0c      	ldr	r3, [pc, #48]	@ (8016124 <cleanup_stdio+0x34>)
 80160f4:	4299      	cmp	r1, r3
 80160f6:	b510      	push	{r4, lr}
 80160f8:	4604      	mov	r4, r0
 80160fa:	d001      	beq.n	8016100 <cleanup_stdio+0x10>
 80160fc:	f000 ffbc 	bl	8017078 <_fflush_r>
 8016100:	68a1      	ldr	r1, [r4, #8]
 8016102:	4b09      	ldr	r3, [pc, #36]	@ (8016128 <cleanup_stdio+0x38>)
 8016104:	4299      	cmp	r1, r3
 8016106:	d002      	beq.n	801610e <cleanup_stdio+0x1e>
 8016108:	4620      	mov	r0, r4
 801610a:	f000 ffb5 	bl	8017078 <_fflush_r>
 801610e:	68e1      	ldr	r1, [r4, #12]
 8016110:	4b06      	ldr	r3, [pc, #24]	@ (801612c <cleanup_stdio+0x3c>)
 8016112:	4299      	cmp	r1, r3
 8016114:	d004      	beq.n	8016120 <cleanup_stdio+0x30>
 8016116:	4620      	mov	r0, r4
 8016118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801611c:	f000 bfac 	b.w	8017078 <_fflush_r>
 8016120:	bd10      	pop	{r4, pc}
 8016122:	bf00      	nop
 8016124:	2000ec9c 	.word	0x2000ec9c
 8016128:	2000ed04 	.word	0x2000ed04
 801612c:	2000ed6c 	.word	0x2000ed6c

08016130 <global_stdio_init.part.0>:
 8016130:	b510      	push	{r4, lr}
 8016132:	4b0b      	ldr	r3, [pc, #44]	@ (8016160 <global_stdio_init.part.0+0x30>)
 8016134:	4c0b      	ldr	r4, [pc, #44]	@ (8016164 <global_stdio_init.part.0+0x34>)
 8016136:	4a0c      	ldr	r2, [pc, #48]	@ (8016168 <global_stdio_init.part.0+0x38>)
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	4620      	mov	r0, r4
 801613c:	2200      	movs	r2, #0
 801613e:	2104      	movs	r1, #4
 8016140:	f7ff ff94 	bl	801606c <std>
 8016144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016148:	2201      	movs	r2, #1
 801614a:	2109      	movs	r1, #9
 801614c:	f7ff ff8e 	bl	801606c <std>
 8016150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016154:	2202      	movs	r2, #2
 8016156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801615a:	2112      	movs	r1, #18
 801615c:	f7ff bf86 	b.w	801606c <std>
 8016160:	2000edd4 	.word	0x2000edd4
 8016164:	2000ec9c 	.word	0x2000ec9c
 8016168:	080160d9 	.word	0x080160d9

0801616c <__sfp_lock_acquire>:
 801616c:	4801      	ldr	r0, [pc, #4]	@ (8016174 <__sfp_lock_acquire+0x8>)
 801616e:	f000 b9a8 	b.w	80164c2 <__retarget_lock_acquire_recursive>
 8016172:	bf00      	nop
 8016174:	2000eddd 	.word	0x2000eddd

08016178 <__sfp_lock_release>:
 8016178:	4801      	ldr	r0, [pc, #4]	@ (8016180 <__sfp_lock_release+0x8>)
 801617a:	f000 b9a3 	b.w	80164c4 <__retarget_lock_release_recursive>
 801617e:	bf00      	nop
 8016180:	2000eddd 	.word	0x2000eddd

08016184 <__sinit>:
 8016184:	b510      	push	{r4, lr}
 8016186:	4604      	mov	r4, r0
 8016188:	f7ff fff0 	bl	801616c <__sfp_lock_acquire>
 801618c:	6a23      	ldr	r3, [r4, #32]
 801618e:	b11b      	cbz	r3, 8016198 <__sinit+0x14>
 8016190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016194:	f7ff bff0 	b.w	8016178 <__sfp_lock_release>
 8016198:	4b04      	ldr	r3, [pc, #16]	@ (80161ac <__sinit+0x28>)
 801619a:	6223      	str	r3, [r4, #32]
 801619c:	4b04      	ldr	r3, [pc, #16]	@ (80161b0 <__sinit+0x2c>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d1f5      	bne.n	8016190 <__sinit+0xc>
 80161a4:	f7ff ffc4 	bl	8016130 <global_stdio_init.part.0>
 80161a8:	e7f2      	b.n	8016190 <__sinit+0xc>
 80161aa:	bf00      	nop
 80161ac:	080160f1 	.word	0x080160f1
 80161b0:	2000edd4 	.word	0x2000edd4

080161b4 <_fwalk_sglue>:
 80161b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161b8:	4607      	mov	r7, r0
 80161ba:	4688      	mov	r8, r1
 80161bc:	4614      	mov	r4, r2
 80161be:	2600      	movs	r6, #0
 80161c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80161c4:	f1b9 0901 	subs.w	r9, r9, #1
 80161c8:	d505      	bpl.n	80161d6 <_fwalk_sglue+0x22>
 80161ca:	6824      	ldr	r4, [r4, #0]
 80161cc:	2c00      	cmp	r4, #0
 80161ce:	d1f7      	bne.n	80161c0 <_fwalk_sglue+0xc>
 80161d0:	4630      	mov	r0, r6
 80161d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161d6:	89ab      	ldrh	r3, [r5, #12]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d907      	bls.n	80161ec <_fwalk_sglue+0x38>
 80161dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80161e0:	3301      	adds	r3, #1
 80161e2:	d003      	beq.n	80161ec <_fwalk_sglue+0x38>
 80161e4:	4629      	mov	r1, r5
 80161e6:	4638      	mov	r0, r7
 80161e8:	47c0      	blx	r8
 80161ea:	4306      	orrs	r6, r0
 80161ec:	3568      	adds	r5, #104	@ 0x68
 80161ee:	e7e9      	b.n	80161c4 <_fwalk_sglue+0x10>

080161f0 <iprintf>:
 80161f0:	b40f      	push	{r0, r1, r2, r3}
 80161f2:	b507      	push	{r0, r1, r2, lr}
 80161f4:	4906      	ldr	r1, [pc, #24]	@ (8016210 <iprintf+0x20>)
 80161f6:	ab04      	add	r3, sp, #16
 80161f8:	6808      	ldr	r0, [r1, #0]
 80161fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80161fe:	6881      	ldr	r1, [r0, #8]
 8016200:	9301      	str	r3, [sp, #4]
 8016202:	f000 fc0f 	bl	8016a24 <_vfiprintf_r>
 8016206:	b003      	add	sp, #12
 8016208:	f85d eb04 	ldr.w	lr, [sp], #4
 801620c:	b004      	add	sp, #16
 801620e:	4770      	bx	lr
 8016210:	2000013c 	.word	0x2000013c

08016214 <siprintf>:
 8016214:	b40e      	push	{r1, r2, r3}
 8016216:	b500      	push	{lr}
 8016218:	b09c      	sub	sp, #112	@ 0x70
 801621a:	ab1d      	add	r3, sp, #116	@ 0x74
 801621c:	9002      	str	r0, [sp, #8]
 801621e:	9006      	str	r0, [sp, #24]
 8016220:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016224:	4809      	ldr	r0, [pc, #36]	@ (801624c <siprintf+0x38>)
 8016226:	9107      	str	r1, [sp, #28]
 8016228:	9104      	str	r1, [sp, #16]
 801622a:	4909      	ldr	r1, [pc, #36]	@ (8016250 <siprintf+0x3c>)
 801622c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016230:	9105      	str	r1, [sp, #20]
 8016232:	6800      	ldr	r0, [r0, #0]
 8016234:	9301      	str	r3, [sp, #4]
 8016236:	a902      	add	r1, sp, #8
 8016238:	f000 face 	bl	80167d8 <_svfiprintf_r>
 801623c:	9b02      	ldr	r3, [sp, #8]
 801623e:	2200      	movs	r2, #0
 8016240:	701a      	strb	r2, [r3, #0]
 8016242:	b01c      	add	sp, #112	@ 0x70
 8016244:	f85d eb04 	ldr.w	lr, [sp], #4
 8016248:	b003      	add	sp, #12
 801624a:	4770      	bx	lr
 801624c:	2000013c 	.word	0x2000013c
 8016250:	ffff0208 	.word	0xffff0208

08016254 <__sread>:
 8016254:	b510      	push	{r4, lr}
 8016256:	460c      	mov	r4, r1
 8016258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801625c:	f000 f8e8 	bl	8016430 <_read_r>
 8016260:	2800      	cmp	r0, #0
 8016262:	bfab      	itete	ge
 8016264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016266:	89a3      	ldrhlt	r3, [r4, #12]
 8016268:	181b      	addge	r3, r3, r0
 801626a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801626e:	bfac      	ite	ge
 8016270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016272:	81a3      	strhlt	r3, [r4, #12]
 8016274:	bd10      	pop	{r4, pc}

08016276 <__swrite>:
 8016276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801627a:	461f      	mov	r7, r3
 801627c:	898b      	ldrh	r3, [r1, #12]
 801627e:	05db      	lsls	r3, r3, #23
 8016280:	4605      	mov	r5, r0
 8016282:	460c      	mov	r4, r1
 8016284:	4616      	mov	r6, r2
 8016286:	d505      	bpl.n	8016294 <__swrite+0x1e>
 8016288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801628c:	2302      	movs	r3, #2
 801628e:	2200      	movs	r2, #0
 8016290:	f000 f8bc 	bl	801640c <_lseek_r>
 8016294:	89a3      	ldrh	r3, [r4, #12]
 8016296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801629a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801629e:	81a3      	strh	r3, [r4, #12]
 80162a0:	4632      	mov	r2, r6
 80162a2:	463b      	mov	r3, r7
 80162a4:	4628      	mov	r0, r5
 80162a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162aa:	f000 b8d3 	b.w	8016454 <_write_r>

080162ae <__sseek>:
 80162ae:	b510      	push	{r4, lr}
 80162b0:	460c      	mov	r4, r1
 80162b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162b6:	f000 f8a9 	bl	801640c <_lseek_r>
 80162ba:	1c43      	adds	r3, r0, #1
 80162bc:	89a3      	ldrh	r3, [r4, #12]
 80162be:	bf15      	itete	ne
 80162c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80162c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80162c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80162ca:	81a3      	strheq	r3, [r4, #12]
 80162cc:	bf18      	it	ne
 80162ce:	81a3      	strhne	r3, [r4, #12]
 80162d0:	bd10      	pop	{r4, pc}

080162d2 <__sclose>:
 80162d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162d6:	f000 b833 	b.w	8016340 <_close_r>

080162da <memcmp>:
 80162da:	b510      	push	{r4, lr}
 80162dc:	3901      	subs	r1, #1
 80162de:	4402      	add	r2, r0
 80162e0:	4290      	cmp	r0, r2
 80162e2:	d101      	bne.n	80162e8 <memcmp+0xe>
 80162e4:	2000      	movs	r0, #0
 80162e6:	e005      	b.n	80162f4 <memcmp+0x1a>
 80162e8:	7803      	ldrb	r3, [r0, #0]
 80162ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80162ee:	42a3      	cmp	r3, r4
 80162f0:	d001      	beq.n	80162f6 <memcmp+0x1c>
 80162f2:	1b18      	subs	r0, r3, r4
 80162f4:	bd10      	pop	{r4, pc}
 80162f6:	3001      	adds	r0, #1
 80162f8:	e7f2      	b.n	80162e0 <memcmp+0x6>

080162fa <memmove>:
 80162fa:	4288      	cmp	r0, r1
 80162fc:	b510      	push	{r4, lr}
 80162fe:	eb01 0402 	add.w	r4, r1, r2
 8016302:	d902      	bls.n	801630a <memmove+0x10>
 8016304:	4284      	cmp	r4, r0
 8016306:	4623      	mov	r3, r4
 8016308:	d807      	bhi.n	801631a <memmove+0x20>
 801630a:	1e43      	subs	r3, r0, #1
 801630c:	42a1      	cmp	r1, r4
 801630e:	d008      	beq.n	8016322 <memmove+0x28>
 8016310:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016314:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016318:	e7f8      	b.n	801630c <memmove+0x12>
 801631a:	4402      	add	r2, r0
 801631c:	4601      	mov	r1, r0
 801631e:	428a      	cmp	r2, r1
 8016320:	d100      	bne.n	8016324 <memmove+0x2a>
 8016322:	bd10      	pop	{r4, pc}
 8016324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016328:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801632c:	e7f7      	b.n	801631e <memmove+0x24>

0801632e <memset>:
 801632e:	4402      	add	r2, r0
 8016330:	4603      	mov	r3, r0
 8016332:	4293      	cmp	r3, r2
 8016334:	d100      	bne.n	8016338 <memset+0xa>
 8016336:	4770      	bx	lr
 8016338:	f803 1b01 	strb.w	r1, [r3], #1
 801633c:	e7f9      	b.n	8016332 <memset+0x4>
	...

08016340 <_close_r>:
 8016340:	b538      	push	{r3, r4, r5, lr}
 8016342:	4d06      	ldr	r5, [pc, #24]	@ (801635c <_close_r+0x1c>)
 8016344:	2300      	movs	r3, #0
 8016346:	4604      	mov	r4, r0
 8016348:	4608      	mov	r0, r1
 801634a:	602b      	str	r3, [r5, #0]
 801634c:	f7eb f854 	bl	80013f8 <_close>
 8016350:	1c43      	adds	r3, r0, #1
 8016352:	d102      	bne.n	801635a <_close_r+0x1a>
 8016354:	682b      	ldr	r3, [r5, #0]
 8016356:	b103      	cbz	r3, 801635a <_close_r+0x1a>
 8016358:	6023      	str	r3, [r4, #0]
 801635a:	bd38      	pop	{r3, r4, r5, pc}
 801635c:	2000edd8 	.word	0x2000edd8

08016360 <_reclaim_reent>:
 8016360:	4b29      	ldr	r3, [pc, #164]	@ (8016408 <_reclaim_reent+0xa8>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	4283      	cmp	r3, r0
 8016366:	b570      	push	{r4, r5, r6, lr}
 8016368:	4604      	mov	r4, r0
 801636a:	d04b      	beq.n	8016404 <_reclaim_reent+0xa4>
 801636c:	69c3      	ldr	r3, [r0, #28]
 801636e:	b1ab      	cbz	r3, 801639c <_reclaim_reent+0x3c>
 8016370:	68db      	ldr	r3, [r3, #12]
 8016372:	b16b      	cbz	r3, 8016390 <_reclaim_reent+0x30>
 8016374:	2500      	movs	r5, #0
 8016376:	69e3      	ldr	r3, [r4, #28]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	5959      	ldr	r1, [r3, r5]
 801637c:	2900      	cmp	r1, #0
 801637e:	d13b      	bne.n	80163f8 <_reclaim_reent+0x98>
 8016380:	3504      	adds	r5, #4
 8016382:	2d80      	cmp	r5, #128	@ 0x80
 8016384:	d1f7      	bne.n	8016376 <_reclaim_reent+0x16>
 8016386:	69e3      	ldr	r3, [r4, #28]
 8016388:	4620      	mov	r0, r4
 801638a:	68d9      	ldr	r1, [r3, #12]
 801638c:	f000 f8c8 	bl	8016520 <_free_r>
 8016390:	69e3      	ldr	r3, [r4, #28]
 8016392:	6819      	ldr	r1, [r3, #0]
 8016394:	b111      	cbz	r1, 801639c <_reclaim_reent+0x3c>
 8016396:	4620      	mov	r0, r4
 8016398:	f000 f8c2 	bl	8016520 <_free_r>
 801639c:	6961      	ldr	r1, [r4, #20]
 801639e:	b111      	cbz	r1, 80163a6 <_reclaim_reent+0x46>
 80163a0:	4620      	mov	r0, r4
 80163a2:	f000 f8bd 	bl	8016520 <_free_r>
 80163a6:	69e1      	ldr	r1, [r4, #28]
 80163a8:	b111      	cbz	r1, 80163b0 <_reclaim_reent+0x50>
 80163aa:	4620      	mov	r0, r4
 80163ac:	f000 f8b8 	bl	8016520 <_free_r>
 80163b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80163b2:	b111      	cbz	r1, 80163ba <_reclaim_reent+0x5a>
 80163b4:	4620      	mov	r0, r4
 80163b6:	f000 f8b3 	bl	8016520 <_free_r>
 80163ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80163bc:	b111      	cbz	r1, 80163c4 <_reclaim_reent+0x64>
 80163be:	4620      	mov	r0, r4
 80163c0:	f000 f8ae 	bl	8016520 <_free_r>
 80163c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80163c6:	b111      	cbz	r1, 80163ce <_reclaim_reent+0x6e>
 80163c8:	4620      	mov	r0, r4
 80163ca:	f000 f8a9 	bl	8016520 <_free_r>
 80163ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80163d0:	b111      	cbz	r1, 80163d8 <_reclaim_reent+0x78>
 80163d2:	4620      	mov	r0, r4
 80163d4:	f000 f8a4 	bl	8016520 <_free_r>
 80163d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80163da:	b111      	cbz	r1, 80163e2 <_reclaim_reent+0x82>
 80163dc:	4620      	mov	r0, r4
 80163de:	f000 f89f 	bl	8016520 <_free_r>
 80163e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80163e4:	b111      	cbz	r1, 80163ec <_reclaim_reent+0x8c>
 80163e6:	4620      	mov	r0, r4
 80163e8:	f000 f89a 	bl	8016520 <_free_r>
 80163ec:	6a23      	ldr	r3, [r4, #32]
 80163ee:	b14b      	cbz	r3, 8016404 <_reclaim_reent+0xa4>
 80163f0:	4620      	mov	r0, r4
 80163f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163f6:	4718      	bx	r3
 80163f8:	680e      	ldr	r6, [r1, #0]
 80163fa:	4620      	mov	r0, r4
 80163fc:	f000 f890 	bl	8016520 <_free_r>
 8016400:	4631      	mov	r1, r6
 8016402:	e7bb      	b.n	801637c <_reclaim_reent+0x1c>
 8016404:	bd70      	pop	{r4, r5, r6, pc}
 8016406:	bf00      	nop
 8016408:	2000013c 	.word	0x2000013c

0801640c <_lseek_r>:
 801640c:	b538      	push	{r3, r4, r5, lr}
 801640e:	4d07      	ldr	r5, [pc, #28]	@ (801642c <_lseek_r+0x20>)
 8016410:	4604      	mov	r4, r0
 8016412:	4608      	mov	r0, r1
 8016414:	4611      	mov	r1, r2
 8016416:	2200      	movs	r2, #0
 8016418:	602a      	str	r2, [r5, #0]
 801641a:	461a      	mov	r2, r3
 801641c:	f7eb f813 	bl	8001446 <_lseek>
 8016420:	1c43      	adds	r3, r0, #1
 8016422:	d102      	bne.n	801642a <_lseek_r+0x1e>
 8016424:	682b      	ldr	r3, [r5, #0]
 8016426:	b103      	cbz	r3, 801642a <_lseek_r+0x1e>
 8016428:	6023      	str	r3, [r4, #0]
 801642a:	bd38      	pop	{r3, r4, r5, pc}
 801642c:	2000edd8 	.word	0x2000edd8

08016430 <_read_r>:
 8016430:	b538      	push	{r3, r4, r5, lr}
 8016432:	4d07      	ldr	r5, [pc, #28]	@ (8016450 <_read_r+0x20>)
 8016434:	4604      	mov	r4, r0
 8016436:	4608      	mov	r0, r1
 8016438:	4611      	mov	r1, r2
 801643a:	2200      	movs	r2, #0
 801643c:	602a      	str	r2, [r5, #0]
 801643e:	461a      	mov	r2, r3
 8016440:	f7ea ffa1 	bl	8001386 <_read>
 8016444:	1c43      	adds	r3, r0, #1
 8016446:	d102      	bne.n	801644e <_read_r+0x1e>
 8016448:	682b      	ldr	r3, [r5, #0]
 801644a:	b103      	cbz	r3, 801644e <_read_r+0x1e>
 801644c:	6023      	str	r3, [r4, #0]
 801644e:	bd38      	pop	{r3, r4, r5, pc}
 8016450:	2000edd8 	.word	0x2000edd8

08016454 <_write_r>:
 8016454:	b538      	push	{r3, r4, r5, lr}
 8016456:	4d07      	ldr	r5, [pc, #28]	@ (8016474 <_write_r+0x20>)
 8016458:	4604      	mov	r4, r0
 801645a:	4608      	mov	r0, r1
 801645c:	4611      	mov	r1, r2
 801645e:	2200      	movs	r2, #0
 8016460:	602a      	str	r2, [r5, #0]
 8016462:	461a      	mov	r2, r3
 8016464:	f7ea ffac 	bl	80013c0 <_write>
 8016468:	1c43      	adds	r3, r0, #1
 801646a:	d102      	bne.n	8016472 <_write_r+0x1e>
 801646c:	682b      	ldr	r3, [r5, #0]
 801646e:	b103      	cbz	r3, 8016472 <_write_r+0x1e>
 8016470:	6023      	str	r3, [r4, #0]
 8016472:	bd38      	pop	{r3, r4, r5, pc}
 8016474:	2000edd8 	.word	0x2000edd8

08016478 <__libc_init_array>:
 8016478:	b570      	push	{r4, r5, r6, lr}
 801647a:	4d0d      	ldr	r5, [pc, #52]	@ (80164b0 <__libc_init_array+0x38>)
 801647c:	4c0d      	ldr	r4, [pc, #52]	@ (80164b4 <__libc_init_array+0x3c>)
 801647e:	1b64      	subs	r4, r4, r5
 8016480:	10a4      	asrs	r4, r4, #2
 8016482:	2600      	movs	r6, #0
 8016484:	42a6      	cmp	r6, r4
 8016486:	d109      	bne.n	801649c <__libc_init_array+0x24>
 8016488:	4d0b      	ldr	r5, [pc, #44]	@ (80164b8 <__libc_init_array+0x40>)
 801648a:	4c0c      	ldr	r4, [pc, #48]	@ (80164bc <__libc_init_array+0x44>)
 801648c:	f000 ffd8 	bl	8017440 <_init>
 8016490:	1b64      	subs	r4, r4, r5
 8016492:	10a4      	asrs	r4, r4, #2
 8016494:	2600      	movs	r6, #0
 8016496:	42a6      	cmp	r6, r4
 8016498:	d105      	bne.n	80164a6 <__libc_init_array+0x2e>
 801649a:	bd70      	pop	{r4, r5, r6, pc}
 801649c:	f855 3b04 	ldr.w	r3, [r5], #4
 80164a0:	4798      	blx	r3
 80164a2:	3601      	adds	r6, #1
 80164a4:	e7ee      	b.n	8016484 <__libc_init_array+0xc>
 80164a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80164aa:	4798      	blx	r3
 80164ac:	3601      	adds	r6, #1
 80164ae:	e7f2      	b.n	8016496 <__libc_init_array+0x1e>
 80164b0:	0801ae60 	.word	0x0801ae60
 80164b4:	0801ae60 	.word	0x0801ae60
 80164b8:	0801ae60 	.word	0x0801ae60
 80164bc:	0801ae64 	.word	0x0801ae64

080164c0 <__retarget_lock_init_recursive>:
 80164c0:	4770      	bx	lr

080164c2 <__retarget_lock_acquire_recursive>:
 80164c2:	4770      	bx	lr

080164c4 <__retarget_lock_release_recursive>:
 80164c4:	4770      	bx	lr

080164c6 <memcpy>:
 80164c6:	440a      	add	r2, r1
 80164c8:	4291      	cmp	r1, r2
 80164ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80164ce:	d100      	bne.n	80164d2 <memcpy+0xc>
 80164d0:	4770      	bx	lr
 80164d2:	b510      	push	{r4, lr}
 80164d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164dc:	4291      	cmp	r1, r2
 80164de:	d1f9      	bne.n	80164d4 <memcpy+0xe>
 80164e0:	bd10      	pop	{r4, pc}
	...

080164e4 <__assert_func>:
 80164e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80164e6:	4614      	mov	r4, r2
 80164e8:	461a      	mov	r2, r3
 80164ea:	4b09      	ldr	r3, [pc, #36]	@ (8016510 <__assert_func+0x2c>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	4605      	mov	r5, r0
 80164f0:	68d8      	ldr	r0, [r3, #12]
 80164f2:	b954      	cbnz	r4, 801650a <__assert_func+0x26>
 80164f4:	4b07      	ldr	r3, [pc, #28]	@ (8016514 <__assert_func+0x30>)
 80164f6:	461c      	mov	r4, r3
 80164f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80164fc:	9100      	str	r1, [sp, #0]
 80164fe:	462b      	mov	r3, r5
 8016500:	4905      	ldr	r1, [pc, #20]	@ (8016518 <__assert_func+0x34>)
 8016502:	f000 fde1 	bl	80170c8 <fiprintf>
 8016506:	f000 fe95 	bl	8017234 <abort>
 801650a:	4b04      	ldr	r3, [pc, #16]	@ (801651c <__assert_func+0x38>)
 801650c:	e7f4      	b.n	80164f8 <__assert_func+0x14>
 801650e:	bf00      	nop
 8016510:	2000013c 	.word	0x2000013c
 8016514:	0801ae22 	.word	0x0801ae22
 8016518:	0801adf4 	.word	0x0801adf4
 801651c:	0801ade7 	.word	0x0801ade7

08016520 <_free_r>:
 8016520:	b538      	push	{r3, r4, r5, lr}
 8016522:	4605      	mov	r5, r0
 8016524:	2900      	cmp	r1, #0
 8016526:	d041      	beq.n	80165ac <_free_r+0x8c>
 8016528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801652c:	1f0c      	subs	r4, r1, #4
 801652e:	2b00      	cmp	r3, #0
 8016530:	bfb8      	it	lt
 8016532:	18e4      	addlt	r4, r4, r3
 8016534:	f000 f8e8 	bl	8016708 <__malloc_lock>
 8016538:	4a1d      	ldr	r2, [pc, #116]	@ (80165b0 <_free_r+0x90>)
 801653a:	6813      	ldr	r3, [r2, #0]
 801653c:	b933      	cbnz	r3, 801654c <_free_r+0x2c>
 801653e:	6063      	str	r3, [r4, #4]
 8016540:	6014      	str	r4, [r2, #0]
 8016542:	4628      	mov	r0, r5
 8016544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016548:	f000 b8e4 	b.w	8016714 <__malloc_unlock>
 801654c:	42a3      	cmp	r3, r4
 801654e:	d908      	bls.n	8016562 <_free_r+0x42>
 8016550:	6820      	ldr	r0, [r4, #0]
 8016552:	1821      	adds	r1, r4, r0
 8016554:	428b      	cmp	r3, r1
 8016556:	bf01      	itttt	eq
 8016558:	6819      	ldreq	r1, [r3, #0]
 801655a:	685b      	ldreq	r3, [r3, #4]
 801655c:	1809      	addeq	r1, r1, r0
 801655e:	6021      	streq	r1, [r4, #0]
 8016560:	e7ed      	b.n	801653e <_free_r+0x1e>
 8016562:	461a      	mov	r2, r3
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	b10b      	cbz	r3, 801656c <_free_r+0x4c>
 8016568:	42a3      	cmp	r3, r4
 801656a:	d9fa      	bls.n	8016562 <_free_r+0x42>
 801656c:	6811      	ldr	r1, [r2, #0]
 801656e:	1850      	adds	r0, r2, r1
 8016570:	42a0      	cmp	r0, r4
 8016572:	d10b      	bne.n	801658c <_free_r+0x6c>
 8016574:	6820      	ldr	r0, [r4, #0]
 8016576:	4401      	add	r1, r0
 8016578:	1850      	adds	r0, r2, r1
 801657a:	4283      	cmp	r3, r0
 801657c:	6011      	str	r1, [r2, #0]
 801657e:	d1e0      	bne.n	8016542 <_free_r+0x22>
 8016580:	6818      	ldr	r0, [r3, #0]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	6053      	str	r3, [r2, #4]
 8016586:	4408      	add	r0, r1
 8016588:	6010      	str	r0, [r2, #0]
 801658a:	e7da      	b.n	8016542 <_free_r+0x22>
 801658c:	d902      	bls.n	8016594 <_free_r+0x74>
 801658e:	230c      	movs	r3, #12
 8016590:	602b      	str	r3, [r5, #0]
 8016592:	e7d6      	b.n	8016542 <_free_r+0x22>
 8016594:	6820      	ldr	r0, [r4, #0]
 8016596:	1821      	adds	r1, r4, r0
 8016598:	428b      	cmp	r3, r1
 801659a:	bf04      	itt	eq
 801659c:	6819      	ldreq	r1, [r3, #0]
 801659e:	685b      	ldreq	r3, [r3, #4]
 80165a0:	6063      	str	r3, [r4, #4]
 80165a2:	bf04      	itt	eq
 80165a4:	1809      	addeq	r1, r1, r0
 80165a6:	6021      	streq	r1, [r4, #0]
 80165a8:	6054      	str	r4, [r2, #4]
 80165aa:	e7ca      	b.n	8016542 <_free_r+0x22>
 80165ac:	bd38      	pop	{r3, r4, r5, pc}
 80165ae:	bf00      	nop
 80165b0:	2000ede4 	.word	0x2000ede4

080165b4 <malloc>:
 80165b4:	4b02      	ldr	r3, [pc, #8]	@ (80165c0 <malloc+0xc>)
 80165b6:	4601      	mov	r1, r0
 80165b8:	6818      	ldr	r0, [r3, #0]
 80165ba:	f000 b825 	b.w	8016608 <_malloc_r>
 80165be:	bf00      	nop
 80165c0:	2000013c 	.word	0x2000013c

080165c4 <sbrk_aligned>:
 80165c4:	b570      	push	{r4, r5, r6, lr}
 80165c6:	4e0f      	ldr	r6, [pc, #60]	@ (8016604 <sbrk_aligned+0x40>)
 80165c8:	460c      	mov	r4, r1
 80165ca:	6831      	ldr	r1, [r6, #0]
 80165cc:	4605      	mov	r5, r0
 80165ce:	b911      	cbnz	r1, 80165d6 <sbrk_aligned+0x12>
 80165d0:	f000 fe20 	bl	8017214 <_sbrk_r>
 80165d4:	6030      	str	r0, [r6, #0]
 80165d6:	4621      	mov	r1, r4
 80165d8:	4628      	mov	r0, r5
 80165da:	f000 fe1b 	bl	8017214 <_sbrk_r>
 80165de:	1c43      	adds	r3, r0, #1
 80165e0:	d103      	bne.n	80165ea <sbrk_aligned+0x26>
 80165e2:	f04f 34ff 	mov.w	r4, #4294967295
 80165e6:	4620      	mov	r0, r4
 80165e8:	bd70      	pop	{r4, r5, r6, pc}
 80165ea:	1cc4      	adds	r4, r0, #3
 80165ec:	f024 0403 	bic.w	r4, r4, #3
 80165f0:	42a0      	cmp	r0, r4
 80165f2:	d0f8      	beq.n	80165e6 <sbrk_aligned+0x22>
 80165f4:	1a21      	subs	r1, r4, r0
 80165f6:	4628      	mov	r0, r5
 80165f8:	f000 fe0c 	bl	8017214 <_sbrk_r>
 80165fc:	3001      	adds	r0, #1
 80165fe:	d1f2      	bne.n	80165e6 <sbrk_aligned+0x22>
 8016600:	e7ef      	b.n	80165e2 <sbrk_aligned+0x1e>
 8016602:	bf00      	nop
 8016604:	2000ede0 	.word	0x2000ede0

08016608 <_malloc_r>:
 8016608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801660c:	1ccd      	adds	r5, r1, #3
 801660e:	f025 0503 	bic.w	r5, r5, #3
 8016612:	3508      	adds	r5, #8
 8016614:	2d0c      	cmp	r5, #12
 8016616:	bf38      	it	cc
 8016618:	250c      	movcc	r5, #12
 801661a:	2d00      	cmp	r5, #0
 801661c:	4606      	mov	r6, r0
 801661e:	db01      	blt.n	8016624 <_malloc_r+0x1c>
 8016620:	42a9      	cmp	r1, r5
 8016622:	d904      	bls.n	801662e <_malloc_r+0x26>
 8016624:	230c      	movs	r3, #12
 8016626:	6033      	str	r3, [r6, #0]
 8016628:	2000      	movs	r0, #0
 801662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801662e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016704 <_malloc_r+0xfc>
 8016632:	f000 f869 	bl	8016708 <__malloc_lock>
 8016636:	f8d8 3000 	ldr.w	r3, [r8]
 801663a:	461c      	mov	r4, r3
 801663c:	bb44      	cbnz	r4, 8016690 <_malloc_r+0x88>
 801663e:	4629      	mov	r1, r5
 8016640:	4630      	mov	r0, r6
 8016642:	f7ff ffbf 	bl	80165c4 <sbrk_aligned>
 8016646:	1c43      	adds	r3, r0, #1
 8016648:	4604      	mov	r4, r0
 801664a:	d158      	bne.n	80166fe <_malloc_r+0xf6>
 801664c:	f8d8 4000 	ldr.w	r4, [r8]
 8016650:	4627      	mov	r7, r4
 8016652:	2f00      	cmp	r7, #0
 8016654:	d143      	bne.n	80166de <_malloc_r+0xd6>
 8016656:	2c00      	cmp	r4, #0
 8016658:	d04b      	beq.n	80166f2 <_malloc_r+0xea>
 801665a:	6823      	ldr	r3, [r4, #0]
 801665c:	4639      	mov	r1, r7
 801665e:	4630      	mov	r0, r6
 8016660:	eb04 0903 	add.w	r9, r4, r3
 8016664:	f000 fdd6 	bl	8017214 <_sbrk_r>
 8016668:	4581      	cmp	r9, r0
 801666a:	d142      	bne.n	80166f2 <_malloc_r+0xea>
 801666c:	6821      	ldr	r1, [r4, #0]
 801666e:	1a6d      	subs	r5, r5, r1
 8016670:	4629      	mov	r1, r5
 8016672:	4630      	mov	r0, r6
 8016674:	f7ff ffa6 	bl	80165c4 <sbrk_aligned>
 8016678:	3001      	adds	r0, #1
 801667a:	d03a      	beq.n	80166f2 <_malloc_r+0xea>
 801667c:	6823      	ldr	r3, [r4, #0]
 801667e:	442b      	add	r3, r5
 8016680:	6023      	str	r3, [r4, #0]
 8016682:	f8d8 3000 	ldr.w	r3, [r8]
 8016686:	685a      	ldr	r2, [r3, #4]
 8016688:	bb62      	cbnz	r2, 80166e4 <_malloc_r+0xdc>
 801668a:	f8c8 7000 	str.w	r7, [r8]
 801668e:	e00f      	b.n	80166b0 <_malloc_r+0xa8>
 8016690:	6822      	ldr	r2, [r4, #0]
 8016692:	1b52      	subs	r2, r2, r5
 8016694:	d420      	bmi.n	80166d8 <_malloc_r+0xd0>
 8016696:	2a0b      	cmp	r2, #11
 8016698:	d917      	bls.n	80166ca <_malloc_r+0xc2>
 801669a:	1961      	adds	r1, r4, r5
 801669c:	42a3      	cmp	r3, r4
 801669e:	6025      	str	r5, [r4, #0]
 80166a0:	bf18      	it	ne
 80166a2:	6059      	strne	r1, [r3, #4]
 80166a4:	6863      	ldr	r3, [r4, #4]
 80166a6:	bf08      	it	eq
 80166a8:	f8c8 1000 	streq.w	r1, [r8]
 80166ac:	5162      	str	r2, [r4, r5]
 80166ae:	604b      	str	r3, [r1, #4]
 80166b0:	4630      	mov	r0, r6
 80166b2:	f000 f82f 	bl	8016714 <__malloc_unlock>
 80166b6:	f104 000b 	add.w	r0, r4, #11
 80166ba:	1d23      	adds	r3, r4, #4
 80166bc:	f020 0007 	bic.w	r0, r0, #7
 80166c0:	1ac2      	subs	r2, r0, r3
 80166c2:	bf1c      	itt	ne
 80166c4:	1a1b      	subne	r3, r3, r0
 80166c6:	50a3      	strne	r3, [r4, r2]
 80166c8:	e7af      	b.n	801662a <_malloc_r+0x22>
 80166ca:	6862      	ldr	r2, [r4, #4]
 80166cc:	42a3      	cmp	r3, r4
 80166ce:	bf0c      	ite	eq
 80166d0:	f8c8 2000 	streq.w	r2, [r8]
 80166d4:	605a      	strne	r2, [r3, #4]
 80166d6:	e7eb      	b.n	80166b0 <_malloc_r+0xa8>
 80166d8:	4623      	mov	r3, r4
 80166da:	6864      	ldr	r4, [r4, #4]
 80166dc:	e7ae      	b.n	801663c <_malloc_r+0x34>
 80166de:	463c      	mov	r4, r7
 80166e0:	687f      	ldr	r7, [r7, #4]
 80166e2:	e7b6      	b.n	8016652 <_malloc_r+0x4a>
 80166e4:	461a      	mov	r2, r3
 80166e6:	685b      	ldr	r3, [r3, #4]
 80166e8:	42a3      	cmp	r3, r4
 80166ea:	d1fb      	bne.n	80166e4 <_malloc_r+0xdc>
 80166ec:	2300      	movs	r3, #0
 80166ee:	6053      	str	r3, [r2, #4]
 80166f0:	e7de      	b.n	80166b0 <_malloc_r+0xa8>
 80166f2:	230c      	movs	r3, #12
 80166f4:	6033      	str	r3, [r6, #0]
 80166f6:	4630      	mov	r0, r6
 80166f8:	f000 f80c 	bl	8016714 <__malloc_unlock>
 80166fc:	e794      	b.n	8016628 <_malloc_r+0x20>
 80166fe:	6005      	str	r5, [r0, #0]
 8016700:	e7d6      	b.n	80166b0 <_malloc_r+0xa8>
 8016702:	bf00      	nop
 8016704:	2000ede4 	.word	0x2000ede4

08016708 <__malloc_lock>:
 8016708:	4801      	ldr	r0, [pc, #4]	@ (8016710 <__malloc_lock+0x8>)
 801670a:	f7ff beda 	b.w	80164c2 <__retarget_lock_acquire_recursive>
 801670e:	bf00      	nop
 8016710:	2000eddc 	.word	0x2000eddc

08016714 <__malloc_unlock>:
 8016714:	4801      	ldr	r0, [pc, #4]	@ (801671c <__malloc_unlock+0x8>)
 8016716:	f7ff bed5 	b.w	80164c4 <__retarget_lock_release_recursive>
 801671a:	bf00      	nop
 801671c:	2000eddc 	.word	0x2000eddc

08016720 <__ssputs_r>:
 8016720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016724:	688e      	ldr	r6, [r1, #8]
 8016726:	461f      	mov	r7, r3
 8016728:	42be      	cmp	r6, r7
 801672a:	680b      	ldr	r3, [r1, #0]
 801672c:	4682      	mov	sl, r0
 801672e:	460c      	mov	r4, r1
 8016730:	4690      	mov	r8, r2
 8016732:	d82d      	bhi.n	8016790 <__ssputs_r+0x70>
 8016734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801673c:	d026      	beq.n	801678c <__ssputs_r+0x6c>
 801673e:	6965      	ldr	r5, [r4, #20]
 8016740:	6909      	ldr	r1, [r1, #16]
 8016742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016746:	eba3 0901 	sub.w	r9, r3, r1
 801674a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801674e:	1c7b      	adds	r3, r7, #1
 8016750:	444b      	add	r3, r9
 8016752:	106d      	asrs	r5, r5, #1
 8016754:	429d      	cmp	r5, r3
 8016756:	bf38      	it	cc
 8016758:	461d      	movcc	r5, r3
 801675a:	0553      	lsls	r3, r2, #21
 801675c:	d527      	bpl.n	80167ae <__ssputs_r+0x8e>
 801675e:	4629      	mov	r1, r5
 8016760:	f7ff ff52 	bl	8016608 <_malloc_r>
 8016764:	4606      	mov	r6, r0
 8016766:	b360      	cbz	r0, 80167c2 <__ssputs_r+0xa2>
 8016768:	6921      	ldr	r1, [r4, #16]
 801676a:	464a      	mov	r2, r9
 801676c:	f7ff feab 	bl	80164c6 <memcpy>
 8016770:	89a3      	ldrh	r3, [r4, #12]
 8016772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801677a:	81a3      	strh	r3, [r4, #12]
 801677c:	6126      	str	r6, [r4, #16]
 801677e:	6165      	str	r5, [r4, #20]
 8016780:	444e      	add	r6, r9
 8016782:	eba5 0509 	sub.w	r5, r5, r9
 8016786:	6026      	str	r6, [r4, #0]
 8016788:	60a5      	str	r5, [r4, #8]
 801678a:	463e      	mov	r6, r7
 801678c:	42be      	cmp	r6, r7
 801678e:	d900      	bls.n	8016792 <__ssputs_r+0x72>
 8016790:	463e      	mov	r6, r7
 8016792:	6820      	ldr	r0, [r4, #0]
 8016794:	4632      	mov	r2, r6
 8016796:	4641      	mov	r1, r8
 8016798:	f7ff fdaf 	bl	80162fa <memmove>
 801679c:	68a3      	ldr	r3, [r4, #8]
 801679e:	1b9b      	subs	r3, r3, r6
 80167a0:	60a3      	str	r3, [r4, #8]
 80167a2:	6823      	ldr	r3, [r4, #0]
 80167a4:	4433      	add	r3, r6
 80167a6:	6023      	str	r3, [r4, #0]
 80167a8:	2000      	movs	r0, #0
 80167aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167ae:	462a      	mov	r2, r5
 80167b0:	f000 fd47 	bl	8017242 <_realloc_r>
 80167b4:	4606      	mov	r6, r0
 80167b6:	2800      	cmp	r0, #0
 80167b8:	d1e0      	bne.n	801677c <__ssputs_r+0x5c>
 80167ba:	6921      	ldr	r1, [r4, #16]
 80167bc:	4650      	mov	r0, sl
 80167be:	f7ff feaf 	bl	8016520 <_free_r>
 80167c2:	230c      	movs	r3, #12
 80167c4:	f8ca 3000 	str.w	r3, [sl]
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167ce:	81a3      	strh	r3, [r4, #12]
 80167d0:	f04f 30ff 	mov.w	r0, #4294967295
 80167d4:	e7e9      	b.n	80167aa <__ssputs_r+0x8a>
	...

080167d8 <_svfiprintf_r>:
 80167d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167dc:	4698      	mov	r8, r3
 80167de:	898b      	ldrh	r3, [r1, #12]
 80167e0:	061b      	lsls	r3, r3, #24
 80167e2:	b09d      	sub	sp, #116	@ 0x74
 80167e4:	4607      	mov	r7, r0
 80167e6:	460d      	mov	r5, r1
 80167e8:	4614      	mov	r4, r2
 80167ea:	d510      	bpl.n	801680e <_svfiprintf_r+0x36>
 80167ec:	690b      	ldr	r3, [r1, #16]
 80167ee:	b973      	cbnz	r3, 801680e <_svfiprintf_r+0x36>
 80167f0:	2140      	movs	r1, #64	@ 0x40
 80167f2:	f7ff ff09 	bl	8016608 <_malloc_r>
 80167f6:	6028      	str	r0, [r5, #0]
 80167f8:	6128      	str	r0, [r5, #16]
 80167fa:	b930      	cbnz	r0, 801680a <_svfiprintf_r+0x32>
 80167fc:	230c      	movs	r3, #12
 80167fe:	603b      	str	r3, [r7, #0]
 8016800:	f04f 30ff 	mov.w	r0, #4294967295
 8016804:	b01d      	add	sp, #116	@ 0x74
 8016806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680a:	2340      	movs	r3, #64	@ 0x40
 801680c:	616b      	str	r3, [r5, #20]
 801680e:	2300      	movs	r3, #0
 8016810:	9309      	str	r3, [sp, #36]	@ 0x24
 8016812:	2320      	movs	r3, #32
 8016814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016818:	f8cd 800c 	str.w	r8, [sp, #12]
 801681c:	2330      	movs	r3, #48	@ 0x30
 801681e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80169bc <_svfiprintf_r+0x1e4>
 8016822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016826:	f04f 0901 	mov.w	r9, #1
 801682a:	4623      	mov	r3, r4
 801682c:	469a      	mov	sl, r3
 801682e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016832:	b10a      	cbz	r2, 8016838 <_svfiprintf_r+0x60>
 8016834:	2a25      	cmp	r2, #37	@ 0x25
 8016836:	d1f9      	bne.n	801682c <_svfiprintf_r+0x54>
 8016838:	ebba 0b04 	subs.w	fp, sl, r4
 801683c:	d00b      	beq.n	8016856 <_svfiprintf_r+0x7e>
 801683e:	465b      	mov	r3, fp
 8016840:	4622      	mov	r2, r4
 8016842:	4629      	mov	r1, r5
 8016844:	4638      	mov	r0, r7
 8016846:	f7ff ff6b 	bl	8016720 <__ssputs_r>
 801684a:	3001      	adds	r0, #1
 801684c:	f000 80a7 	beq.w	801699e <_svfiprintf_r+0x1c6>
 8016850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016852:	445a      	add	r2, fp
 8016854:	9209      	str	r2, [sp, #36]	@ 0x24
 8016856:	f89a 3000 	ldrb.w	r3, [sl]
 801685a:	2b00      	cmp	r3, #0
 801685c:	f000 809f 	beq.w	801699e <_svfiprintf_r+0x1c6>
 8016860:	2300      	movs	r3, #0
 8016862:	f04f 32ff 	mov.w	r2, #4294967295
 8016866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801686a:	f10a 0a01 	add.w	sl, sl, #1
 801686e:	9304      	str	r3, [sp, #16]
 8016870:	9307      	str	r3, [sp, #28]
 8016872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016876:	931a      	str	r3, [sp, #104]	@ 0x68
 8016878:	4654      	mov	r4, sl
 801687a:	2205      	movs	r2, #5
 801687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016880:	484e      	ldr	r0, [pc, #312]	@ (80169bc <_svfiprintf_r+0x1e4>)
 8016882:	f7e9 fcbd 	bl	8000200 <memchr>
 8016886:	9a04      	ldr	r2, [sp, #16]
 8016888:	b9d8      	cbnz	r0, 80168c2 <_svfiprintf_r+0xea>
 801688a:	06d0      	lsls	r0, r2, #27
 801688c:	bf44      	itt	mi
 801688e:	2320      	movmi	r3, #32
 8016890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016894:	0711      	lsls	r1, r2, #28
 8016896:	bf44      	itt	mi
 8016898:	232b      	movmi	r3, #43	@ 0x2b
 801689a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801689e:	f89a 3000 	ldrb.w	r3, [sl]
 80168a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80168a4:	d015      	beq.n	80168d2 <_svfiprintf_r+0xfa>
 80168a6:	9a07      	ldr	r2, [sp, #28]
 80168a8:	4654      	mov	r4, sl
 80168aa:	2000      	movs	r0, #0
 80168ac:	f04f 0c0a 	mov.w	ip, #10
 80168b0:	4621      	mov	r1, r4
 80168b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168b6:	3b30      	subs	r3, #48	@ 0x30
 80168b8:	2b09      	cmp	r3, #9
 80168ba:	d94b      	bls.n	8016954 <_svfiprintf_r+0x17c>
 80168bc:	b1b0      	cbz	r0, 80168ec <_svfiprintf_r+0x114>
 80168be:	9207      	str	r2, [sp, #28]
 80168c0:	e014      	b.n	80168ec <_svfiprintf_r+0x114>
 80168c2:	eba0 0308 	sub.w	r3, r0, r8
 80168c6:	fa09 f303 	lsl.w	r3, r9, r3
 80168ca:	4313      	orrs	r3, r2
 80168cc:	9304      	str	r3, [sp, #16]
 80168ce:	46a2      	mov	sl, r4
 80168d0:	e7d2      	b.n	8016878 <_svfiprintf_r+0xa0>
 80168d2:	9b03      	ldr	r3, [sp, #12]
 80168d4:	1d19      	adds	r1, r3, #4
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	9103      	str	r1, [sp, #12]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	bfbb      	ittet	lt
 80168de:	425b      	neglt	r3, r3
 80168e0:	f042 0202 	orrlt.w	r2, r2, #2
 80168e4:	9307      	strge	r3, [sp, #28]
 80168e6:	9307      	strlt	r3, [sp, #28]
 80168e8:	bfb8      	it	lt
 80168ea:	9204      	strlt	r2, [sp, #16]
 80168ec:	7823      	ldrb	r3, [r4, #0]
 80168ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80168f0:	d10a      	bne.n	8016908 <_svfiprintf_r+0x130>
 80168f2:	7863      	ldrb	r3, [r4, #1]
 80168f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80168f6:	d132      	bne.n	801695e <_svfiprintf_r+0x186>
 80168f8:	9b03      	ldr	r3, [sp, #12]
 80168fa:	1d1a      	adds	r2, r3, #4
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	9203      	str	r2, [sp, #12]
 8016900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016904:	3402      	adds	r4, #2
 8016906:	9305      	str	r3, [sp, #20]
 8016908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80169cc <_svfiprintf_r+0x1f4>
 801690c:	7821      	ldrb	r1, [r4, #0]
 801690e:	2203      	movs	r2, #3
 8016910:	4650      	mov	r0, sl
 8016912:	f7e9 fc75 	bl	8000200 <memchr>
 8016916:	b138      	cbz	r0, 8016928 <_svfiprintf_r+0x150>
 8016918:	9b04      	ldr	r3, [sp, #16]
 801691a:	eba0 000a 	sub.w	r0, r0, sl
 801691e:	2240      	movs	r2, #64	@ 0x40
 8016920:	4082      	lsls	r2, r0
 8016922:	4313      	orrs	r3, r2
 8016924:	3401      	adds	r4, #1
 8016926:	9304      	str	r3, [sp, #16]
 8016928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801692c:	4824      	ldr	r0, [pc, #144]	@ (80169c0 <_svfiprintf_r+0x1e8>)
 801692e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016932:	2206      	movs	r2, #6
 8016934:	f7e9 fc64 	bl	8000200 <memchr>
 8016938:	2800      	cmp	r0, #0
 801693a:	d036      	beq.n	80169aa <_svfiprintf_r+0x1d2>
 801693c:	4b21      	ldr	r3, [pc, #132]	@ (80169c4 <_svfiprintf_r+0x1ec>)
 801693e:	bb1b      	cbnz	r3, 8016988 <_svfiprintf_r+0x1b0>
 8016940:	9b03      	ldr	r3, [sp, #12]
 8016942:	3307      	adds	r3, #7
 8016944:	f023 0307 	bic.w	r3, r3, #7
 8016948:	3308      	adds	r3, #8
 801694a:	9303      	str	r3, [sp, #12]
 801694c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801694e:	4433      	add	r3, r6
 8016950:	9309      	str	r3, [sp, #36]	@ 0x24
 8016952:	e76a      	b.n	801682a <_svfiprintf_r+0x52>
 8016954:	fb0c 3202 	mla	r2, ip, r2, r3
 8016958:	460c      	mov	r4, r1
 801695a:	2001      	movs	r0, #1
 801695c:	e7a8      	b.n	80168b0 <_svfiprintf_r+0xd8>
 801695e:	2300      	movs	r3, #0
 8016960:	3401      	adds	r4, #1
 8016962:	9305      	str	r3, [sp, #20]
 8016964:	4619      	mov	r1, r3
 8016966:	f04f 0c0a 	mov.w	ip, #10
 801696a:	4620      	mov	r0, r4
 801696c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016970:	3a30      	subs	r2, #48	@ 0x30
 8016972:	2a09      	cmp	r2, #9
 8016974:	d903      	bls.n	801697e <_svfiprintf_r+0x1a6>
 8016976:	2b00      	cmp	r3, #0
 8016978:	d0c6      	beq.n	8016908 <_svfiprintf_r+0x130>
 801697a:	9105      	str	r1, [sp, #20]
 801697c:	e7c4      	b.n	8016908 <_svfiprintf_r+0x130>
 801697e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016982:	4604      	mov	r4, r0
 8016984:	2301      	movs	r3, #1
 8016986:	e7f0      	b.n	801696a <_svfiprintf_r+0x192>
 8016988:	ab03      	add	r3, sp, #12
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	462a      	mov	r2, r5
 801698e:	4b0e      	ldr	r3, [pc, #56]	@ (80169c8 <_svfiprintf_r+0x1f0>)
 8016990:	a904      	add	r1, sp, #16
 8016992:	4638      	mov	r0, r7
 8016994:	f3af 8000 	nop.w
 8016998:	1c42      	adds	r2, r0, #1
 801699a:	4606      	mov	r6, r0
 801699c:	d1d6      	bne.n	801694c <_svfiprintf_r+0x174>
 801699e:	89ab      	ldrh	r3, [r5, #12]
 80169a0:	065b      	lsls	r3, r3, #25
 80169a2:	f53f af2d 	bmi.w	8016800 <_svfiprintf_r+0x28>
 80169a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169a8:	e72c      	b.n	8016804 <_svfiprintf_r+0x2c>
 80169aa:	ab03      	add	r3, sp, #12
 80169ac:	9300      	str	r3, [sp, #0]
 80169ae:	462a      	mov	r2, r5
 80169b0:	4b05      	ldr	r3, [pc, #20]	@ (80169c8 <_svfiprintf_r+0x1f0>)
 80169b2:	a904      	add	r1, sp, #16
 80169b4:	4638      	mov	r0, r7
 80169b6:	f000 f9bb 	bl	8016d30 <_printf_i>
 80169ba:	e7ed      	b.n	8016998 <_svfiprintf_r+0x1c0>
 80169bc:	0801ae23 	.word	0x0801ae23
 80169c0:	0801ae2d 	.word	0x0801ae2d
 80169c4:	00000000 	.word	0x00000000
 80169c8:	08016721 	.word	0x08016721
 80169cc:	0801ae29 	.word	0x0801ae29

080169d0 <__sfputc_r>:
 80169d0:	6893      	ldr	r3, [r2, #8]
 80169d2:	3b01      	subs	r3, #1
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	b410      	push	{r4}
 80169d8:	6093      	str	r3, [r2, #8]
 80169da:	da08      	bge.n	80169ee <__sfputc_r+0x1e>
 80169dc:	6994      	ldr	r4, [r2, #24]
 80169de:	42a3      	cmp	r3, r4
 80169e0:	db01      	blt.n	80169e6 <__sfputc_r+0x16>
 80169e2:	290a      	cmp	r1, #10
 80169e4:	d103      	bne.n	80169ee <__sfputc_r+0x1e>
 80169e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169ea:	f000 bb7f 	b.w	80170ec <__swbuf_r>
 80169ee:	6813      	ldr	r3, [r2, #0]
 80169f0:	1c58      	adds	r0, r3, #1
 80169f2:	6010      	str	r0, [r2, #0]
 80169f4:	7019      	strb	r1, [r3, #0]
 80169f6:	4608      	mov	r0, r1
 80169f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169fc:	4770      	bx	lr

080169fe <__sfputs_r>:
 80169fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a00:	4606      	mov	r6, r0
 8016a02:	460f      	mov	r7, r1
 8016a04:	4614      	mov	r4, r2
 8016a06:	18d5      	adds	r5, r2, r3
 8016a08:	42ac      	cmp	r4, r5
 8016a0a:	d101      	bne.n	8016a10 <__sfputs_r+0x12>
 8016a0c:	2000      	movs	r0, #0
 8016a0e:	e007      	b.n	8016a20 <__sfputs_r+0x22>
 8016a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a14:	463a      	mov	r2, r7
 8016a16:	4630      	mov	r0, r6
 8016a18:	f7ff ffda 	bl	80169d0 <__sfputc_r>
 8016a1c:	1c43      	adds	r3, r0, #1
 8016a1e:	d1f3      	bne.n	8016a08 <__sfputs_r+0xa>
 8016a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a24 <_vfiprintf_r>:
 8016a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a28:	460d      	mov	r5, r1
 8016a2a:	b09d      	sub	sp, #116	@ 0x74
 8016a2c:	4614      	mov	r4, r2
 8016a2e:	4698      	mov	r8, r3
 8016a30:	4606      	mov	r6, r0
 8016a32:	b118      	cbz	r0, 8016a3c <_vfiprintf_r+0x18>
 8016a34:	6a03      	ldr	r3, [r0, #32]
 8016a36:	b90b      	cbnz	r3, 8016a3c <_vfiprintf_r+0x18>
 8016a38:	f7ff fba4 	bl	8016184 <__sinit>
 8016a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a3e:	07d9      	lsls	r1, r3, #31
 8016a40:	d405      	bmi.n	8016a4e <_vfiprintf_r+0x2a>
 8016a42:	89ab      	ldrh	r3, [r5, #12]
 8016a44:	059a      	lsls	r2, r3, #22
 8016a46:	d402      	bmi.n	8016a4e <_vfiprintf_r+0x2a>
 8016a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a4a:	f7ff fd3a 	bl	80164c2 <__retarget_lock_acquire_recursive>
 8016a4e:	89ab      	ldrh	r3, [r5, #12]
 8016a50:	071b      	lsls	r3, r3, #28
 8016a52:	d501      	bpl.n	8016a58 <_vfiprintf_r+0x34>
 8016a54:	692b      	ldr	r3, [r5, #16]
 8016a56:	b99b      	cbnz	r3, 8016a80 <_vfiprintf_r+0x5c>
 8016a58:	4629      	mov	r1, r5
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	f000 fb84 	bl	8017168 <__swsetup_r>
 8016a60:	b170      	cbz	r0, 8016a80 <_vfiprintf_r+0x5c>
 8016a62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a64:	07dc      	lsls	r4, r3, #31
 8016a66:	d504      	bpl.n	8016a72 <_vfiprintf_r+0x4e>
 8016a68:	f04f 30ff 	mov.w	r0, #4294967295
 8016a6c:	b01d      	add	sp, #116	@ 0x74
 8016a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a72:	89ab      	ldrh	r3, [r5, #12]
 8016a74:	0598      	lsls	r0, r3, #22
 8016a76:	d4f7      	bmi.n	8016a68 <_vfiprintf_r+0x44>
 8016a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a7a:	f7ff fd23 	bl	80164c4 <__retarget_lock_release_recursive>
 8016a7e:	e7f3      	b.n	8016a68 <_vfiprintf_r+0x44>
 8016a80:	2300      	movs	r3, #0
 8016a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a84:	2320      	movs	r3, #32
 8016a86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a8e:	2330      	movs	r3, #48	@ 0x30
 8016a90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016c40 <_vfiprintf_r+0x21c>
 8016a94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016a98:	f04f 0901 	mov.w	r9, #1
 8016a9c:	4623      	mov	r3, r4
 8016a9e:	469a      	mov	sl, r3
 8016aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016aa4:	b10a      	cbz	r2, 8016aaa <_vfiprintf_r+0x86>
 8016aa6:	2a25      	cmp	r2, #37	@ 0x25
 8016aa8:	d1f9      	bne.n	8016a9e <_vfiprintf_r+0x7a>
 8016aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8016aae:	d00b      	beq.n	8016ac8 <_vfiprintf_r+0xa4>
 8016ab0:	465b      	mov	r3, fp
 8016ab2:	4622      	mov	r2, r4
 8016ab4:	4629      	mov	r1, r5
 8016ab6:	4630      	mov	r0, r6
 8016ab8:	f7ff ffa1 	bl	80169fe <__sfputs_r>
 8016abc:	3001      	adds	r0, #1
 8016abe:	f000 80a7 	beq.w	8016c10 <_vfiprintf_r+0x1ec>
 8016ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ac4:	445a      	add	r2, fp
 8016ac6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	f000 809f 	beq.w	8016c10 <_vfiprintf_r+0x1ec>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016adc:	f10a 0a01 	add.w	sl, sl, #1
 8016ae0:	9304      	str	r3, [sp, #16]
 8016ae2:	9307      	str	r3, [sp, #28]
 8016ae4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016ae8:	931a      	str	r3, [sp, #104]	@ 0x68
 8016aea:	4654      	mov	r4, sl
 8016aec:	2205      	movs	r2, #5
 8016aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016af2:	4853      	ldr	r0, [pc, #332]	@ (8016c40 <_vfiprintf_r+0x21c>)
 8016af4:	f7e9 fb84 	bl	8000200 <memchr>
 8016af8:	9a04      	ldr	r2, [sp, #16]
 8016afa:	b9d8      	cbnz	r0, 8016b34 <_vfiprintf_r+0x110>
 8016afc:	06d1      	lsls	r1, r2, #27
 8016afe:	bf44      	itt	mi
 8016b00:	2320      	movmi	r3, #32
 8016b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b06:	0713      	lsls	r3, r2, #28
 8016b08:	bf44      	itt	mi
 8016b0a:	232b      	movmi	r3, #43	@ 0x2b
 8016b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b10:	f89a 3000 	ldrb.w	r3, [sl]
 8016b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b16:	d015      	beq.n	8016b44 <_vfiprintf_r+0x120>
 8016b18:	9a07      	ldr	r2, [sp, #28]
 8016b1a:	4654      	mov	r4, sl
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	f04f 0c0a 	mov.w	ip, #10
 8016b22:	4621      	mov	r1, r4
 8016b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b28:	3b30      	subs	r3, #48	@ 0x30
 8016b2a:	2b09      	cmp	r3, #9
 8016b2c:	d94b      	bls.n	8016bc6 <_vfiprintf_r+0x1a2>
 8016b2e:	b1b0      	cbz	r0, 8016b5e <_vfiprintf_r+0x13a>
 8016b30:	9207      	str	r2, [sp, #28]
 8016b32:	e014      	b.n	8016b5e <_vfiprintf_r+0x13a>
 8016b34:	eba0 0308 	sub.w	r3, r0, r8
 8016b38:	fa09 f303 	lsl.w	r3, r9, r3
 8016b3c:	4313      	orrs	r3, r2
 8016b3e:	9304      	str	r3, [sp, #16]
 8016b40:	46a2      	mov	sl, r4
 8016b42:	e7d2      	b.n	8016aea <_vfiprintf_r+0xc6>
 8016b44:	9b03      	ldr	r3, [sp, #12]
 8016b46:	1d19      	adds	r1, r3, #4
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	9103      	str	r1, [sp, #12]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	bfbb      	ittet	lt
 8016b50:	425b      	neglt	r3, r3
 8016b52:	f042 0202 	orrlt.w	r2, r2, #2
 8016b56:	9307      	strge	r3, [sp, #28]
 8016b58:	9307      	strlt	r3, [sp, #28]
 8016b5a:	bfb8      	it	lt
 8016b5c:	9204      	strlt	r2, [sp, #16]
 8016b5e:	7823      	ldrb	r3, [r4, #0]
 8016b60:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b62:	d10a      	bne.n	8016b7a <_vfiprintf_r+0x156>
 8016b64:	7863      	ldrb	r3, [r4, #1]
 8016b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b68:	d132      	bne.n	8016bd0 <_vfiprintf_r+0x1ac>
 8016b6a:	9b03      	ldr	r3, [sp, #12]
 8016b6c:	1d1a      	adds	r2, r3, #4
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	9203      	str	r2, [sp, #12]
 8016b72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016b76:	3402      	adds	r4, #2
 8016b78:	9305      	str	r3, [sp, #20]
 8016b7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016c50 <_vfiprintf_r+0x22c>
 8016b7e:	7821      	ldrb	r1, [r4, #0]
 8016b80:	2203      	movs	r2, #3
 8016b82:	4650      	mov	r0, sl
 8016b84:	f7e9 fb3c 	bl	8000200 <memchr>
 8016b88:	b138      	cbz	r0, 8016b9a <_vfiprintf_r+0x176>
 8016b8a:	9b04      	ldr	r3, [sp, #16]
 8016b8c:	eba0 000a 	sub.w	r0, r0, sl
 8016b90:	2240      	movs	r2, #64	@ 0x40
 8016b92:	4082      	lsls	r2, r0
 8016b94:	4313      	orrs	r3, r2
 8016b96:	3401      	adds	r4, #1
 8016b98:	9304      	str	r3, [sp, #16]
 8016b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b9e:	4829      	ldr	r0, [pc, #164]	@ (8016c44 <_vfiprintf_r+0x220>)
 8016ba0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ba4:	2206      	movs	r2, #6
 8016ba6:	f7e9 fb2b 	bl	8000200 <memchr>
 8016baa:	2800      	cmp	r0, #0
 8016bac:	d03f      	beq.n	8016c2e <_vfiprintf_r+0x20a>
 8016bae:	4b26      	ldr	r3, [pc, #152]	@ (8016c48 <_vfiprintf_r+0x224>)
 8016bb0:	bb1b      	cbnz	r3, 8016bfa <_vfiprintf_r+0x1d6>
 8016bb2:	9b03      	ldr	r3, [sp, #12]
 8016bb4:	3307      	adds	r3, #7
 8016bb6:	f023 0307 	bic.w	r3, r3, #7
 8016bba:	3308      	adds	r3, #8
 8016bbc:	9303      	str	r3, [sp, #12]
 8016bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bc0:	443b      	add	r3, r7
 8016bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bc4:	e76a      	b.n	8016a9c <_vfiprintf_r+0x78>
 8016bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bca:	460c      	mov	r4, r1
 8016bcc:	2001      	movs	r0, #1
 8016bce:	e7a8      	b.n	8016b22 <_vfiprintf_r+0xfe>
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	3401      	adds	r4, #1
 8016bd4:	9305      	str	r3, [sp, #20]
 8016bd6:	4619      	mov	r1, r3
 8016bd8:	f04f 0c0a 	mov.w	ip, #10
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016be2:	3a30      	subs	r2, #48	@ 0x30
 8016be4:	2a09      	cmp	r2, #9
 8016be6:	d903      	bls.n	8016bf0 <_vfiprintf_r+0x1cc>
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d0c6      	beq.n	8016b7a <_vfiprintf_r+0x156>
 8016bec:	9105      	str	r1, [sp, #20]
 8016bee:	e7c4      	b.n	8016b7a <_vfiprintf_r+0x156>
 8016bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e7f0      	b.n	8016bdc <_vfiprintf_r+0x1b8>
 8016bfa:	ab03      	add	r3, sp, #12
 8016bfc:	9300      	str	r3, [sp, #0]
 8016bfe:	462a      	mov	r2, r5
 8016c00:	4b12      	ldr	r3, [pc, #72]	@ (8016c4c <_vfiprintf_r+0x228>)
 8016c02:	a904      	add	r1, sp, #16
 8016c04:	4630      	mov	r0, r6
 8016c06:	f3af 8000 	nop.w
 8016c0a:	4607      	mov	r7, r0
 8016c0c:	1c78      	adds	r0, r7, #1
 8016c0e:	d1d6      	bne.n	8016bbe <_vfiprintf_r+0x19a>
 8016c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c12:	07d9      	lsls	r1, r3, #31
 8016c14:	d405      	bmi.n	8016c22 <_vfiprintf_r+0x1fe>
 8016c16:	89ab      	ldrh	r3, [r5, #12]
 8016c18:	059a      	lsls	r2, r3, #22
 8016c1a:	d402      	bmi.n	8016c22 <_vfiprintf_r+0x1fe>
 8016c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c1e:	f7ff fc51 	bl	80164c4 <__retarget_lock_release_recursive>
 8016c22:	89ab      	ldrh	r3, [r5, #12]
 8016c24:	065b      	lsls	r3, r3, #25
 8016c26:	f53f af1f 	bmi.w	8016a68 <_vfiprintf_r+0x44>
 8016c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c2c:	e71e      	b.n	8016a6c <_vfiprintf_r+0x48>
 8016c2e:	ab03      	add	r3, sp, #12
 8016c30:	9300      	str	r3, [sp, #0]
 8016c32:	462a      	mov	r2, r5
 8016c34:	4b05      	ldr	r3, [pc, #20]	@ (8016c4c <_vfiprintf_r+0x228>)
 8016c36:	a904      	add	r1, sp, #16
 8016c38:	4630      	mov	r0, r6
 8016c3a:	f000 f879 	bl	8016d30 <_printf_i>
 8016c3e:	e7e4      	b.n	8016c0a <_vfiprintf_r+0x1e6>
 8016c40:	0801ae23 	.word	0x0801ae23
 8016c44:	0801ae2d 	.word	0x0801ae2d
 8016c48:	00000000 	.word	0x00000000
 8016c4c:	080169ff 	.word	0x080169ff
 8016c50:	0801ae29 	.word	0x0801ae29

08016c54 <_printf_common>:
 8016c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c58:	4616      	mov	r6, r2
 8016c5a:	4698      	mov	r8, r3
 8016c5c:	688a      	ldr	r2, [r1, #8]
 8016c5e:	690b      	ldr	r3, [r1, #16]
 8016c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016c64:	4293      	cmp	r3, r2
 8016c66:	bfb8      	it	lt
 8016c68:	4613      	movlt	r3, r2
 8016c6a:	6033      	str	r3, [r6, #0]
 8016c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016c70:	4607      	mov	r7, r0
 8016c72:	460c      	mov	r4, r1
 8016c74:	b10a      	cbz	r2, 8016c7a <_printf_common+0x26>
 8016c76:	3301      	adds	r3, #1
 8016c78:	6033      	str	r3, [r6, #0]
 8016c7a:	6823      	ldr	r3, [r4, #0]
 8016c7c:	0699      	lsls	r1, r3, #26
 8016c7e:	bf42      	ittt	mi
 8016c80:	6833      	ldrmi	r3, [r6, #0]
 8016c82:	3302      	addmi	r3, #2
 8016c84:	6033      	strmi	r3, [r6, #0]
 8016c86:	6825      	ldr	r5, [r4, #0]
 8016c88:	f015 0506 	ands.w	r5, r5, #6
 8016c8c:	d106      	bne.n	8016c9c <_printf_common+0x48>
 8016c8e:	f104 0a19 	add.w	sl, r4, #25
 8016c92:	68e3      	ldr	r3, [r4, #12]
 8016c94:	6832      	ldr	r2, [r6, #0]
 8016c96:	1a9b      	subs	r3, r3, r2
 8016c98:	42ab      	cmp	r3, r5
 8016c9a:	dc26      	bgt.n	8016cea <_printf_common+0x96>
 8016c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016ca0:	6822      	ldr	r2, [r4, #0]
 8016ca2:	3b00      	subs	r3, #0
 8016ca4:	bf18      	it	ne
 8016ca6:	2301      	movne	r3, #1
 8016ca8:	0692      	lsls	r2, r2, #26
 8016caa:	d42b      	bmi.n	8016d04 <_printf_common+0xb0>
 8016cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016cb0:	4641      	mov	r1, r8
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	47c8      	blx	r9
 8016cb6:	3001      	adds	r0, #1
 8016cb8:	d01e      	beq.n	8016cf8 <_printf_common+0xa4>
 8016cba:	6823      	ldr	r3, [r4, #0]
 8016cbc:	6922      	ldr	r2, [r4, #16]
 8016cbe:	f003 0306 	and.w	r3, r3, #6
 8016cc2:	2b04      	cmp	r3, #4
 8016cc4:	bf02      	ittt	eq
 8016cc6:	68e5      	ldreq	r5, [r4, #12]
 8016cc8:	6833      	ldreq	r3, [r6, #0]
 8016cca:	1aed      	subeq	r5, r5, r3
 8016ccc:	68a3      	ldr	r3, [r4, #8]
 8016cce:	bf0c      	ite	eq
 8016cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016cd4:	2500      	movne	r5, #0
 8016cd6:	4293      	cmp	r3, r2
 8016cd8:	bfc4      	itt	gt
 8016cda:	1a9b      	subgt	r3, r3, r2
 8016cdc:	18ed      	addgt	r5, r5, r3
 8016cde:	2600      	movs	r6, #0
 8016ce0:	341a      	adds	r4, #26
 8016ce2:	42b5      	cmp	r5, r6
 8016ce4:	d11a      	bne.n	8016d1c <_printf_common+0xc8>
 8016ce6:	2000      	movs	r0, #0
 8016ce8:	e008      	b.n	8016cfc <_printf_common+0xa8>
 8016cea:	2301      	movs	r3, #1
 8016cec:	4652      	mov	r2, sl
 8016cee:	4641      	mov	r1, r8
 8016cf0:	4638      	mov	r0, r7
 8016cf2:	47c8      	blx	r9
 8016cf4:	3001      	adds	r0, #1
 8016cf6:	d103      	bne.n	8016d00 <_printf_common+0xac>
 8016cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8016cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d00:	3501      	adds	r5, #1
 8016d02:	e7c6      	b.n	8016c92 <_printf_common+0x3e>
 8016d04:	18e1      	adds	r1, r4, r3
 8016d06:	1c5a      	adds	r2, r3, #1
 8016d08:	2030      	movs	r0, #48	@ 0x30
 8016d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016d0e:	4422      	add	r2, r4
 8016d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016d18:	3302      	adds	r3, #2
 8016d1a:	e7c7      	b.n	8016cac <_printf_common+0x58>
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	4622      	mov	r2, r4
 8016d20:	4641      	mov	r1, r8
 8016d22:	4638      	mov	r0, r7
 8016d24:	47c8      	blx	r9
 8016d26:	3001      	adds	r0, #1
 8016d28:	d0e6      	beq.n	8016cf8 <_printf_common+0xa4>
 8016d2a:	3601      	adds	r6, #1
 8016d2c:	e7d9      	b.n	8016ce2 <_printf_common+0x8e>
	...

08016d30 <_printf_i>:
 8016d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d34:	7e0f      	ldrb	r7, [r1, #24]
 8016d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016d38:	2f78      	cmp	r7, #120	@ 0x78
 8016d3a:	4691      	mov	r9, r2
 8016d3c:	4680      	mov	r8, r0
 8016d3e:	460c      	mov	r4, r1
 8016d40:	469a      	mov	sl, r3
 8016d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016d46:	d807      	bhi.n	8016d58 <_printf_i+0x28>
 8016d48:	2f62      	cmp	r7, #98	@ 0x62
 8016d4a:	d80a      	bhi.n	8016d62 <_printf_i+0x32>
 8016d4c:	2f00      	cmp	r7, #0
 8016d4e:	f000 80d2 	beq.w	8016ef6 <_printf_i+0x1c6>
 8016d52:	2f58      	cmp	r7, #88	@ 0x58
 8016d54:	f000 80b9 	beq.w	8016eca <_printf_i+0x19a>
 8016d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016d60:	e03a      	b.n	8016dd8 <_printf_i+0xa8>
 8016d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016d66:	2b15      	cmp	r3, #21
 8016d68:	d8f6      	bhi.n	8016d58 <_printf_i+0x28>
 8016d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8016d70 <_printf_i+0x40>)
 8016d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016d70:	08016dc9 	.word	0x08016dc9
 8016d74:	08016ddd 	.word	0x08016ddd
 8016d78:	08016d59 	.word	0x08016d59
 8016d7c:	08016d59 	.word	0x08016d59
 8016d80:	08016d59 	.word	0x08016d59
 8016d84:	08016d59 	.word	0x08016d59
 8016d88:	08016ddd 	.word	0x08016ddd
 8016d8c:	08016d59 	.word	0x08016d59
 8016d90:	08016d59 	.word	0x08016d59
 8016d94:	08016d59 	.word	0x08016d59
 8016d98:	08016d59 	.word	0x08016d59
 8016d9c:	08016edd 	.word	0x08016edd
 8016da0:	08016e07 	.word	0x08016e07
 8016da4:	08016e97 	.word	0x08016e97
 8016da8:	08016d59 	.word	0x08016d59
 8016dac:	08016d59 	.word	0x08016d59
 8016db0:	08016eff 	.word	0x08016eff
 8016db4:	08016d59 	.word	0x08016d59
 8016db8:	08016e07 	.word	0x08016e07
 8016dbc:	08016d59 	.word	0x08016d59
 8016dc0:	08016d59 	.word	0x08016d59
 8016dc4:	08016e9f 	.word	0x08016e9f
 8016dc8:	6833      	ldr	r3, [r6, #0]
 8016dca:	1d1a      	adds	r2, r3, #4
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	6032      	str	r2, [r6, #0]
 8016dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016dd8:	2301      	movs	r3, #1
 8016dda:	e09d      	b.n	8016f18 <_printf_i+0x1e8>
 8016ddc:	6833      	ldr	r3, [r6, #0]
 8016dde:	6820      	ldr	r0, [r4, #0]
 8016de0:	1d19      	adds	r1, r3, #4
 8016de2:	6031      	str	r1, [r6, #0]
 8016de4:	0606      	lsls	r6, r0, #24
 8016de6:	d501      	bpl.n	8016dec <_printf_i+0xbc>
 8016de8:	681d      	ldr	r5, [r3, #0]
 8016dea:	e003      	b.n	8016df4 <_printf_i+0xc4>
 8016dec:	0645      	lsls	r5, r0, #25
 8016dee:	d5fb      	bpl.n	8016de8 <_printf_i+0xb8>
 8016df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016df4:	2d00      	cmp	r5, #0
 8016df6:	da03      	bge.n	8016e00 <_printf_i+0xd0>
 8016df8:	232d      	movs	r3, #45	@ 0x2d
 8016dfa:	426d      	negs	r5, r5
 8016dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016e00:	4859      	ldr	r0, [pc, #356]	@ (8016f68 <_printf_i+0x238>)
 8016e02:	230a      	movs	r3, #10
 8016e04:	e011      	b.n	8016e2a <_printf_i+0xfa>
 8016e06:	6821      	ldr	r1, [r4, #0]
 8016e08:	6833      	ldr	r3, [r6, #0]
 8016e0a:	0608      	lsls	r0, r1, #24
 8016e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016e10:	d402      	bmi.n	8016e18 <_printf_i+0xe8>
 8016e12:	0649      	lsls	r1, r1, #25
 8016e14:	bf48      	it	mi
 8016e16:	b2ad      	uxthmi	r5, r5
 8016e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8016e1a:	4853      	ldr	r0, [pc, #332]	@ (8016f68 <_printf_i+0x238>)
 8016e1c:	6033      	str	r3, [r6, #0]
 8016e1e:	bf14      	ite	ne
 8016e20:	230a      	movne	r3, #10
 8016e22:	2308      	moveq	r3, #8
 8016e24:	2100      	movs	r1, #0
 8016e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016e2a:	6866      	ldr	r6, [r4, #4]
 8016e2c:	60a6      	str	r6, [r4, #8]
 8016e2e:	2e00      	cmp	r6, #0
 8016e30:	bfa2      	ittt	ge
 8016e32:	6821      	ldrge	r1, [r4, #0]
 8016e34:	f021 0104 	bicge.w	r1, r1, #4
 8016e38:	6021      	strge	r1, [r4, #0]
 8016e3a:	b90d      	cbnz	r5, 8016e40 <_printf_i+0x110>
 8016e3c:	2e00      	cmp	r6, #0
 8016e3e:	d04b      	beq.n	8016ed8 <_printf_i+0x1a8>
 8016e40:	4616      	mov	r6, r2
 8016e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8016e46:	fb03 5711 	mls	r7, r3, r1, r5
 8016e4a:	5dc7      	ldrb	r7, [r0, r7]
 8016e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016e50:	462f      	mov	r7, r5
 8016e52:	42bb      	cmp	r3, r7
 8016e54:	460d      	mov	r5, r1
 8016e56:	d9f4      	bls.n	8016e42 <_printf_i+0x112>
 8016e58:	2b08      	cmp	r3, #8
 8016e5a:	d10b      	bne.n	8016e74 <_printf_i+0x144>
 8016e5c:	6823      	ldr	r3, [r4, #0]
 8016e5e:	07df      	lsls	r7, r3, #31
 8016e60:	d508      	bpl.n	8016e74 <_printf_i+0x144>
 8016e62:	6923      	ldr	r3, [r4, #16]
 8016e64:	6861      	ldr	r1, [r4, #4]
 8016e66:	4299      	cmp	r1, r3
 8016e68:	bfde      	ittt	le
 8016e6a:	2330      	movle	r3, #48	@ 0x30
 8016e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016e74:	1b92      	subs	r2, r2, r6
 8016e76:	6122      	str	r2, [r4, #16]
 8016e78:	f8cd a000 	str.w	sl, [sp]
 8016e7c:	464b      	mov	r3, r9
 8016e7e:	aa03      	add	r2, sp, #12
 8016e80:	4621      	mov	r1, r4
 8016e82:	4640      	mov	r0, r8
 8016e84:	f7ff fee6 	bl	8016c54 <_printf_common>
 8016e88:	3001      	adds	r0, #1
 8016e8a:	d14a      	bne.n	8016f22 <_printf_i+0x1f2>
 8016e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e90:	b004      	add	sp, #16
 8016e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e96:	6823      	ldr	r3, [r4, #0]
 8016e98:	f043 0320 	orr.w	r3, r3, #32
 8016e9c:	6023      	str	r3, [r4, #0]
 8016e9e:	4833      	ldr	r0, [pc, #204]	@ (8016f6c <_printf_i+0x23c>)
 8016ea0:	2778      	movs	r7, #120	@ 0x78
 8016ea2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016ea6:	6823      	ldr	r3, [r4, #0]
 8016ea8:	6831      	ldr	r1, [r6, #0]
 8016eaa:	061f      	lsls	r7, r3, #24
 8016eac:	f851 5b04 	ldr.w	r5, [r1], #4
 8016eb0:	d402      	bmi.n	8016eb8 <_printf_i+0x188>
 8016eb2:	065f      	lsls	r7, r3, #25
 8016eb4:	bf48      	it	mi
 8016eb6:	b2ad      	uxthmi	r5, r5
 8016eb8:	6031      	str	r1, [r6, #0]
 8016eba:	07d9      	lsls	r1, r3, #31
 8016ebc:	bf44      	itt	mi
 8016ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8016ec2:	6023      	strmi	r3, [r4, #0]
 8016ec4:	b11d      	cbz	r5, 8016ece <_printf_i+0x19e>
 8016ec6:	2310      	movs	r3, #16
 8016ec8:	e7ac      	b.n	8016e24 <_printf_i+0xf4>
 8016eca:	4827      	ldr	r0, [pc, #156]	@ (8016f68 <_printf_i+0x238>)
 8016ecc:	e7e9      	b.n	8016ea2 <_printf_i+0x172>
 8016ece:	6823      	ldr	r3, [r4, #0]
 8016ed0:	f023 0320 	bic.w	r3, r3, #32
 8016ed4:	6023      	str	r3, [r4, #0]
 8016ed6:	e7f6      	b.n	8016ec6 <_printf_i+0x196>
 8016ed8:	4616      	mov	r6, r2
 8016eda:	e7bd      	b.n	8016e58 <_printf_i+0x128>
 8016edc:	6833      	ldr	r3, [r6, #0]
 8016ede:	6825      	ldr	r5, [r4, #0]
 8016ee0:	6961      	ldr	r1, [r4, #20]
 8016ee2:	1d18      	adds	r0, r3, #4
 8016ee4:	6030      	str	r0, [r6, #0]
 8016ee6:	062e      	lsls	r6, r5, #24
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	d501      	bpl.n	8016ef0 <_printf_i+0x1c0>
 8016eec:	6019      	str	r1, [r3, #0]
 8016eee:	e002      	b.n	8016ef6 <_printf_i+0x1c6>
 8016ef0:	0668      	lsls	r0, r5, #25
 8016ef2:	d5fb      	bpl.n	8016eec <_printf_i+0x1bc>
 8016ef4:	8019      	strh	r1, [r3, #0]
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	6123      	str	r3, [r4, #16]
 8016efa:	4616      	mov	r6, r2
 8016efc:	e7bc      	b.n	8016e78 <_printf_i+0x148>
 8016efe:	6833      	ldr	r3, [r6, #0]
 8016f00:	1d1a      	adds	r2, r3, #4
 8016f02:	6032      	str	r2, [r6, #0]
 8016f04:	681e      	ldr	r6, [r3, #0]
 8016f06:	6862      	ldr	r2, [r4, #4]
 8016f08:	2100      	movs	r1, #0
 8016f0a:	4630      	mov	r0, r6
 8016f0c:	f7e9 f978 	bl	8000200 <memchr>
 8016f10:	b108      	cbz	r0, 8016f16 <_printf_i+0x1e6>
 8016f12:	1b80      	subs	r0, r0, r6
 8016f14:	6060      	str	r0, [r4, #4]
 8016f16:	6863      	ldr	r3, [r4, #4]
 8016f18:	6123      	str	r3, [r4, #16]
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016f20:	e7aa      	b.n	8016e78 <_printf_i+0x148>
 8016f22:	6923      	ldr	r3, [r4, #16]
 8016f24:	4632      	mov	r2, r6
 8016f26:	4649      	mov	r1, r9
 8016f28:	4640      	mov	r0, r8
 8016f2a:	47d0      	blx	sl
 8016f2c:	3001      	adds	r0, #1
 8016f2e:	d0ad      	beq.n	8016e8c <_printf_i+0x15c>
 8016f30:	6823      	ldr	r3, [r4, #0]
 8016f32:	079b      	lsls	r3, r3, #30
 8016f34:	d413      	bmi.n	8016f5e <_printf_i+0x22e>
 8016f36:	68e0      	ldr	r0, [r4, #12]
 8016f38:	9b03      	ldr	r3, [sp, #12]
 8016f3a:	4298      	cmp	r0, r3
 8016f3c:	bfb8      	it	lt
 8016f3e:	4618      	movlt	r0, r3
 8016f40:	e7a6      	b.n	8016e90 <_printf_i+0x160>
 8016f42:	2301      	movs	r3, #1
 8016f44:	4632      	mov	r2, r6
 8016f46:	4649      	mov	r1, r9
 8016f48:	4640      	mov	r0, r8
 8016f4a:	47d0      	blx	sl
 8016f4c:	3001      	adds	r0, #1
 8016f4e:	d09d      	beq.n	8016e8c <_printf_i+0x15c>
 8016f50:	3501      	adds	r5, #1
 8016f52:	68e3      	ldr	r3, [r4, #12]
 8016f54:	9903      	ldr	r1, [sp, #12]
 8016f56:	1a5b      	subs	r3, r3, r1
 8016f58:	42ab      	cmp	r3, r5
 8016f5a:	dcf2      	bgt.n	8016f42 <_printf_i+0x212>
 8016f5c:	e7eb      	b.n	8016f36 <_printf_i+0x206>
 8016f5e:	2500      	movs	r5, #0
 8016f60:	f104 0619 	add.w	r6, r4, #25
 8016f64:	e7f5      	b.n	8016f52 <_printf_i+0x222>
 8016f66:	bf00      	nop
 8016f68:	0801ae34 	.word	0x0801ae34
 8016f6c:	0801ae45 	.word	0x0801ae45

08016f70 <__sflush_r>:
 8016f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f78:	0716      	lsls	r6, r2, #28
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	460c      	mov	r4, r1
 8016f7e:	d454      	bmi.n	801702a <__sflush_r+0xba>
 8016f80:	684b      	ldr	r3, [r1, #4]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	dc02      	bgt.n	8016f8c <__sflush_r+0x1c>
 8016f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	dd48      	ble.n	801701e <__sflush_r+0xae>
 8016f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016f8e:	2e00      	cmp	r6, #0
 8016f90:	d045      	beq.n	801701e <__sflush_r+0xae>
 8016f92:	2300      	movs	r3, #0
 8016f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016f98:	682f      	ldr	r7, [r5, #0]
 8016f9a:	6a21      	ldr	r1, [r4, #32]
 8016f9c:	602b      	str	r3, [r5, #0]
 8016f9e:	d030      	beq.n	8017002 <__sflush_r+0x92>
 8016fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016fa2:	89a3      	ldrh	r3, [r4, #12]
 8016fa4:	0759      	lsls	r1, r3, #29
 8016fa6:	d505      	bpl.n	8016fb4 <__sflush_r+0x44>
 8016fa8:	6863      	ldr	r3, [r4, #4]
 8016faa:	1ad2      	subs	r2, r2, r3
 8016fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016fae:	b10b      	cbz	r3, 8016fb4 <__sflush_r+0x44>
 8016fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016fb2:	1ad2      	subs	r2, r2, r3
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016fb8:	6a21      	ldr	r1, [r4, #32]
 8016fba:	4628      	mov	r0, r5
 8016fbc:	47b0      	blx	r6
 8016fbe:	1c43      	adds	r3, r0, #1
 8016fc0:	89a3      	ldrh	r3, [r4, #12]
 8016fc2:	d106      	bne.n	8016fd2 <__sflush_r+0x62>
 8016fc4:	6829      	ldr	r1, [r5, #0]
 8016fc6:	291d      	cmp	r1, #29
 8016fc8:	d82b      	bhi.n	8017022 <__sflush_r+0xb2>
 8016fca:	4a2a      	ldr	r2, [pc, #168]	@ (8017074 <__sflush_r+0x104>)
 8016fcc:	410a      	asrs	r2, r1
 8016fce:	07d6      	lsls	r6, r2, #31
 8016fd0:	d427      	bmi.n	8017022 <__sflush_r+0xb2>
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	6062      	str	r2, [r4, #4]
 8016fd6:	04d9      	lsls	r1, r3, #19
 8016fd8:	6922      	ldr	r2, [r4, #16]
 8016fda:	6022      	str	r2, [r4, #0]
 8016fdc:	d504      	bpl.n	8016fe8 <__sflush_r+0x78>
 8016fde:	1c42      	adds	r2, r0, #1
 8016fe0:	d101      	bne.n	8016fe6 <__sflush_r+0x76>
 8016fe2:	682b      	ldr	r3, [r5, #0]
 8016fe4:	b903      	cbnz	r3, 8016fe8 <__sflush_r+0x78>
 8016fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8016fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016fea:	602f      	str	r7, [r5, #0]
 8016fec:	b1b9      	cbz	r1, 801701e <__sflush_r+0xae>
 8016fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ff2:	4299      	cmp	r1, r3
 8016ff4:	d002      	beq.n	8016ffc <__sflush_r+0x8c>
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	f7ff fa92 	bl	8016520 <_free_r>
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8017000:	e00d      	b.n	801701e <__sflush_r+0xae>
 8017002:	2301      	movs	r3, #1
 8017004:	4628      	mov	r0, r5
 8017006:	47b0      	blx	r6
 8017008:	4602      	mov	r2, r0
 801700a:	1c50      	adds	r0, r2, #1
 801700c:	d1c9      	bne.n	8016fa2 <__sflush_r+0x32>
 801700e:	682b      	ldr	r3, [r5, #0]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d0c6      	beq.n	8016fa2 <__sflush_r+0x32>
 8017014:	2b1d      	cmp	r3, #29
 8017016:	d001      	beq.n	801701c <__sflush_r+0xac>
 8017018:	2b16      	cmp	r3, #22
 801701a:	d11e      	bne.n	801705a <__sflush_r+0xea>
 801701c:	602f      	str	r7, [r5, #0]
 801701e:	2000      	movs	r0, #0
 8017020:	e022      	b.n	8017068 <__sflush_r+0xf8>
 8017022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017026:	b21b      	sxth	r3, r3
 8017028:	e01b      	b.n	8017062 <__sflush_r+0xf2>
 801702a:	690f      	ldr	r7, [r1, #16]
 801702c:	2f00      	cmp	r7, #0
 801702e:	d0f6      	beq.n	801701e <__sflush_r+0xae>
 8017030:	0793      	lsls	r3, r2, #30
 8017032:	680e      	ldr	r6, [r1, #0]
 8017034:	bf08      	it	eq
 8017036:	694b      	ldreq	r3, [r1, #20]
 8017038:	600f      	str	r7, [r1, #0]
 801703a:	bf18      	it	ne
 801703c:	2300      	movne	r3, #0
 801703e:	eba6 0807 	sub.w	r8, r6, r7
 8017042:	608b      	str	r3, [r1, #8]
 8017044:	f1b8 0f00 	cmp.w	r8, #0
 8017048:	dde9      	ble.n	801701e <__sflush_r+0xae>
 801704a:	6a21      	ldr	r1, [r4, #32]
 801704c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801704e:	4643      	mov	r3, r8
 8017050:	463a      	mov	r2, r7
 8017052:	4628      	mov	r0, r5
 8017054:	47b0      	blx	r6
 8017056:	2800      	cmp	r0, #0
 8017058:	dc08      	bgt.n	801706c <__sflush_r+0xfc>
 801705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801705e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017062:	81a3      	strh	r3, [r4, #12]
 8017064:	f04f 30ff 	mov.w	r0, #4294967295
 8017068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801706c:	4407      	add	r7, r0
 801706e:	eba8 0800 	sub.w	r8, r8, r0
 8017072:	e7e7      	b.n	8017044 <__sflush_r+0xd4>
 8017074:	dfbffffe 	.word	0xdfbffffe

08017078 <_fflush_r>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	690b      	ldr	r3, [r1, #16]
 801707c:	4605      	mov	r5, r0
 801707e:	460c      	mov	r4, r1
 8017080:	b913      	cbnz	r3, 8017088 <_fflush_r+0x10>
 8017082:	2500      	movs	r5, #0
 8017084:	4628      	mov	r0, r5
 8017086:	bd38      	pop	{r3, r4, r5, pc}
 8017088:	b118      	cbz	r0, 8017092 <_fflush_r+0x1a>
 801708a:	6a03      	ldr	r3, [r0, #32]
 801708c:	b90b      	cbnz	r3, 8017092 <_fflush_r+0x1a>
 801708e:	f7ff f879 	bl	8016184 <__sinit>
 8017092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d0f3      	beq.n	8017082 <_fflush_r+0xa>
 801709a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801709c:	07d0      	lsls	r0, r2, #31
 801709e:	d404      	bmi.n	80170aa <_fflush_r+0x32>
 80170a0:	0599      	lsls	r1, r3, #22
 80170a2:	d402      	bmi.n	80170aa <_fflush_r+0x32>
 80170a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170a6:	f7ff fa0c 	bl	80164c2 <__retarget_lock_acquire_recursive>
 80170aa:	4628      	mov	r0, r5
 80170ac:	4621      	mov	r1, r4
 80170ae:	f7ff ff5f 	bl	8016f70 <__sflush_r>
 80170b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80170b4:	07da      	lsls	r2, r3, #31
 80170b6:	4605      	mov	r5, r0
 80170b8:	d4e4      	bmi.n	8017084 <_fflush_r+0xc>
 80170ba:	89a3      	ldrh	r3, [r4, #12]
 80170bc:	059b      	lsls	r3, r3, #22
 80170be:	d4e1      	bmi.n	8017084 <_fflush_r+0xc>
 80170c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170c2:	f7ff f9ff 	bl	80164c4 <__retarget_lock_release_recursive>
 80170c6:	e7dd      	b.n	8017084 <_fflush_r+0xc>

080170c8 <fiprintf>:
 80170c8:	b40e      	push	{r1, r2, r3}
 80170ca:	b503      	push	{r0, r1, lr}
 80170cc:	4601      	mov	r1, r0
 80170ce:	ab03      	add	r3, sp, #12
 80170d0:	4805      	ldr	r0, [pc, #20]	@ (80170e8 <fiprintf+0x20>)
 80170d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80170d6:	6800      	ldr	r0, [r0, #0]
 80170d8:	9301      	str	r3, [sp, #4]
 80170da:	f7ff fca3 	bl	8016a24 <_vfiprintf_r>
 80170de:	b002      	add	sp, #8
 80170e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80170e4:	b003      	add	sp, #12
 80170e6:	4770      	bx	lr
 80170e8:	2000013c 	.word	0x2000013c

080170ec <__swbuf_r>:
 80170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ee:	460e      	mov	r6, r1
 80170f0:	4614      	mov	r4, r2
 80170f2:	4605      	mov	r5, r0
 80170f4:	b118      	cbz	r0, 80170fe <__swbuf_r+0x12>
 80170f6:	6a03      	ldr	r3, [r0, #32]
 80170f8:	b90b      	cbnz	r3, 80170fe <__swbuf_r+0x12>
 80170fa:	f7ff f843 	bl	8016184 <__sinit>
 80170fe:	69a3      	ldr	r3, [r4, #24]
 8017100:	60a3      	str	r3, [r4, #8]
 8017102:	89a3      	ldrh	r3, [r4, #12]
 8017104:	071a      	lsls	r2, r3, #28
 8017106:	d501      	bpl.n	801710c <__swbuf_r+0x20>
 8017108:	6923      	ldr	r3, [r4, #16]
 801710a:	b943      	cbnz	r3, 801711e <__swbuf_r+0x32>
 801710c:	4621      	mov	r1, r4
 801710e:	4628      	mov	r0, r5
 8017110:	f000 f82a 	bl	8017168 <__swsetup_r>
 8017114:	b118      	cbz	r0, 801711e <__swbuf_r+0x32>
 8017116:	f04f 37ff 	mov.w	r7, #4294967295
 801711a:	4638      	mov	r0, r7
 801711c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801711e:	6823      	ldr	r3, [r4, #0]
 8017120:	6922      	ldr	r2, [r4, #16]
 8017122:	1a98      	subs	r0, r3, r2
 8017124:	6963      	ldr	r3, [r4, #20]
 8017126:	b2f6      	uxtb	r6, r6
 8017128:	4283      	cmp	r3, r0
 801712a:	4637      	mov	r7, r6
 801712c:	dc05      	bgt.n	801713a <__swbuf_r+0x4e>
 801712e:	4621      	mov	r1, r4
 8017130:	4628      	mov	r0, r5
 8017132:	f7ff ffa1 	bl	8017078 <_fflush_r>
 8017136:	2800      	cmp	r0, #0
 8017138:	d1ed      	bne.n	8017116 <__swbuf_r+0x2a>
 801713a:	68a3      	ldr	r3, [r4, #8]
 801713c:	3b01      	subs	r3, #1
 801713e:	60a3      	str	r3, [r4, #8]
 8017140:	6823      	ldr	r3, [r4, #0]
 8017142:	1c5a      	adds	r2, r3, #1
 8017144:	6022      	str	r2, [r4, #0]
 8017146:	701e      	strb	r6, [r3, #0]
 8017148:	6962      	ldr	r2, [r4, #20]
 801714a:	1c43      	adds	r3, r0, #1
 801714c:	429a      	cmp	r2, r3
 801714e:	d004      	beq.n	801715a <__swbuf_r+0x6e>
 8017150:	89a3      	ldrh	r3, [r4, #12]
 8017152:	07db      	lsls	r3, r3, #31
 8017154:	d5e1      	bpl.n	801711a <__swbuf_r+0x2e>
 8017156:	2e0a      	cmp	r6, #10
 8017158:	d1df      	bne.n	801711a <__swbuf_r+0x2e>
 801715a:	4621      	mov	r1, r4
 801715c:	4628      	mov	r0, r5
 801715e:	f7ff ff8b 	bl	8017078 <_fflush_r>
 8017162:	2800      	cmp	r0, #0
 8017164:	d0d9      	beq.n	801711a <__swbuf_r+0x2e>
 8017166:	e7d6      	b.n	8017116 <__swbuf_r+0x2a>

08017168 <__swsetup_r>:
 8017168:	b538      	push	{r3, r4, r5, lr}
 801716a:	4b29      	ldr	r3, [pc, #164]	@ (8017210 <__swsetup_r+0xa8>)
 801716c:	4605      	mov	r5, r0
 801716e:	6818      	ldr	r0, [r3, #0]
 8017170:	460c      	mov	r4, r1
 8017172:	b118      	cbz	r0, 801717c <__swsetup_r+0x14>
 8017174:	6a03      	ldr	r3, [r0, #32]
 8017176:	b90b      	cbnz	r3, 801717c <__swsetup_r+0x14>
 8017178:	f7ff f804 	bl	8016184 <__sinit>
 801717c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017180:	0719      	lsls	r1, r3, #28
 8017182:	d422      	bmi.n	80171ca <__swsetup_r+0x62>
 8017184:	06da      	lsls	r2, r3, #27
 8017186:	d407      	bmi.n	8017198 <__swsetup_r+0x30>
 8017188:	2209      	movs	r2, #9
 801718a:	602a      	str	r2, [r5, #0]
 801718c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017190:	81a3      	strh	r3, [r4, #12]
 8017192:	f04f 30ff 	mov.w	r0, #4294967295
 8017196:	e033      	b.n	8017200 <__swsetup_r+0x98>
 8017198:	0758      	lsls	r0, r3, #29
 801719a:	d512      	bpl.n	80171c2 <__swsetup_r+0x5a>
 801719c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801719e:	b141      	cbz	r1, 80171b2 <__swsetup_r+0x4a>
 80171a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80171a4:	4299      	cmp	r1, r3
 80171a6:	d002      	beq.n	80171ae <__swsetup_r+0x46>
 80171a8:	4628      	mov	r0, r5
 80171aa:	f7ff f9b9 	bl	8016520 <_free_r>
 80171ae:	2300      	movs	r3, #0
 80171b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80171b2:	89a3      	ldrh	r3, [r4, #12]
 80171b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80171b8:	81a3      	strh	r3, [r4, #12]
 80171ba:	2300      	movs	r3, #0
 80171bc:	6063      	str	r3, [r4, #4]
 80171be:	6923      	ldr	r3, [r4, #16]
 80171c0:	6023      	str	r3, [r4, #0]
 80171c2:	89a3      	ldrh	r3, [r4, #12]
 80171c4:	f043 0308 	orr.w	r3, r3, #8
 80171c8:	81a3      	strh	r3, [r4, #12]
 80171ca:	6923      	ldr	r3, [r4, #16]
 80171cc:	b94b      	cbnz	r3, 80171e2 <__swsetup_r+0x7a>
 80171ce:	89a3      	ldrh	r3, [r4, #12]
 80171d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80171d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80171d8:	d003      	beq.n	80171e2 <__swsetup_r+0x7a>
 80171da:	4621      	mov	r1, r4
 80171dc:	4628      	mov	r0, r5
 80171de:	f000 f884 	bl	80172ea <__smakebuf_r>
 80171e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171e6:	f013 0201 	ands.w	r2, r3, #1
 80171ea:	d00a      	beq.n	8017202 <__swsetup_r+0x9a>
 80171ec:	2200      	movs	r2, #0
 80171ee:	60a2      	str	r2, [r4, #8]
 80171f0:	6962      	ldr	r2, [r4, #20]
 80171f2:	4252      	negs	r2, r2
 80171f4:	61a2      	str	r2, [r4, #24]
 80171f6:	6922      	ldr	r2, [r4, #16]
 80171f8:	b942      	cbnz	r2, 801720c <__swsetup_r+0xa4>
 80171fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80171fe:	d1c5      	bne.n	801718c <__swsetup_r+0x24>
 8017200:	bd38      	pop	{r3, r4, r5, pc}
 8017202:	0799      	lsls	r1, r3, #30
 8017204:	bf58      	it	pl
 8017206:	6962      	ldrpl	r2, [r4, #20]
 8017208:	60a2      	str	r2, [r4, #8]
 801720a:	e7f4      	b.n	80171f6 <__swsetup_r+0x8e>
 801720c:	2000      	movs	r0, #0
 801720e:	e7f7      	b.n	8017200 <__swsetup_r+0x98>
 8017210:	2000013c 	.word	0x2000013c

08017214 <_sbrk_r>:
 8017214:	b538      	push	{r3, r4, r5, lr}
 8017216:	4d06      	ldr	r5, [pc, #24]	@ (8017230 <_sbrk_r+0x1c>)
 8017218:	2300      	movs	r3, #0
 801721a:	4604      	mov	r4, r0
 801721c:	4608      	mov	r0, r1
 801721e:	602b      	str	r3, [r5, #0]
 8017220:	f7ea f91e 	bl	8001460 <_sbrk>
 8017224:	1c43      	adds	r3, r0, #1
 8017226:	d102      	bne.n	801722e <_sbrk_r+0x1a>
 8017228:	682b      	ldr	r3, [r5, #0]
 801722a:	b103      	cbz	r3, 801722e <_sbrk_r+0x1a>
 801722c:	6023      	str	r3, [r4, #0]
 801722e:	bd38      	pop	{r3, r4, r5, pc}
 8017230:	2000edd8 	.word	0x2000edd8

08017234 <abort>:
 8017234:	b508      	push	{r3, lr}
 8017236:	2006      	movs	r0, #6
 8017238:	f000 f8bc 	bl	80173b4 <raise>
 801723c:	2001      	movs	r0, #1
 801723e:	f7ea f897 	bl	8001370 <_exit>

08017242 <_realloc_r>:
 8017242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017246:	4680      	mov	r8, r0
 8017248:	4615      	mov	r5, r2
 801724a:	460c      	mov	r4, r1
 801724c:	b921      	cbnz	r1, 8017258 <_realloc_r+0x16>
 801724e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017252:	4611      	mov	r1, r2
 8017254:	f7ff b9d8 	b.w	8016608 <_malloc_r>
 8017258:	b92a      	cbnz	r2, 8017266 <_realloc_r+0x24>
 801725a:	f7ff f961 	bl	8016520 <_free_r>
 801725e:	2400      	movs	r4, #0
 8017260:	4620      	mov	r0, r4
 8017262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017266:	f000 f8e3 	bl	8017430 <_malloc_usable_size_r>
 801726a:	4285      	cmp	r5, r0
 801726c:	4606      	mov	r6, r0
 801726e:	d802      	bhi.n	8017276 <_realloc_r+0x34>
 8017270:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017274:	d8f4      	bhi.n	8017260 <_realloc_r+0x1e>
 8017276:	4629      	mov	r1, r5
 8017278:	4640      	mov	r0, r8
 801727a:	f7ff f9c5 	bl	8016608 <_malloc_r>
 801727e:	4607      	mov	r7, r0
 8017280:	2800      	cmp	r0, #0
 8017282:	d0ec      	beq.n	801725e <_realloc_r+0x1c>
 8017284:	42b5      	cmp	r5, r6
 8017286:	462a      	mov	r2, r5
 8017288:	4621      	mov	r1, r4
 801728a:	bf28      	it	cs
 801728c:	4632      	movcs	r2, r6
 801728e:	f7ff f91a 	bl	80164c6 <memcpy>
 8017292:	4621      	mov	r1, r4
 8017294:	4640      	mov	r0, r8
 8017296:	f7ff f943 	bl	8016520 <_free_r>
 801729a:	463c      	mov	r4, r7
 801729c:	e7e0      	b.n	8017260 <_realloc_r+0x1e>

0801729e <__swhatbuf_r>:
 801729e:	b570      	push	{r4, r5, r6, lr}
 80172a0:	460c      	mov	r4, r1
 80172a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172a6:	2900      	cmp	r1, #0
 80172a8:	b096      	sub	sp, #88	@ 0x58
 80172aa:	4615      	mov	r5, r2
 80172ac:	461e      	mov	r6, r3
 80172ae:	da0d      	bge.n	80172cc <__swhatbuf_r+0x2e>
 80172b0:	89a3      	ldrh	r3, [r4, #12]
 80172b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80172b6:	f04f 0100 	mov.w	r1, #0
 80172ba:	bf14      	ite	ne
 80172bc:	2340      	movne	r3, #64	@ 0x40
 80172be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80172c2:	2000      	movs	r0, #0
 80172c4:	6031      	str	r1, [r6, #0]
 80172c6:	602b      	str	r3, [r5, #0]
 80172c8:	b016      	add	sp, #88	@ 0x58
 80172ca:	bd70      	pop	{r4, r5, r6, pc}
 80172cc:	466a      	mov	r2, sp
 80172ce:	f000 f879 	bl	80173c4 <_fstat_r>
 80172d2:	2800      	cmp	r0, #0
 80172d4:	dbec      	blt.n	80172b0 <__swhatbuf_r+0x12>
 80172d6:	9901      	ldr	r1, [sp, #4]
 80172d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80172dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80172e0:	4259      	negs	r1, r3
 80172e2:	4159      	adcs	r1, r3
 80172e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80172e8:	e7eb      	b.n	80172c2 <__swhatbuf_r+0x24>

080172ea <__smakebuf_r>:
 80172ea:	898b      	ldrh	r3, [r1, #12]
 80172ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172ee:	079d      	lsls	r5, r3, #30
 80172f0:	4606      	mov	r6, r0
 80172f2:	460c      	mov	r4, r1
 80172f4:	d507      	bpl.n	8017306 <__smakebuf_r+0x1c>
 80172f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80172fa:	6023      	str	r3, [r4, #0]
 80172fc:	6123      	str	r3, [r4, #16]
 80172fe:	2301      	movs	r3, #1
 8017300:	6163      	str	r3, [r4, #20]
 8017302:	b003      	add	sp, #12
 8017304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017306:	ab01      	add	r3, sp, #4
 8017308:	466a      	mov	r2, sp
 801730a:	f7ff ffc8 	bl	801729e <__swhatbuf_r>
 801730e:	9f00      	ldr	r7, [sp, #0]
 8017310:	4605      	mov	r5, r0
 8017312:	4639      	mov	r1, r7
 8017314:	4630      	mov	r0, r6
 8017316:	f7ff f977 	bl	8016608 <_malloc_r>
 801731a:	b948      	cbnz	r0, 8017330 <__smakebuf_r+0x46>
 801731c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017320:	059a      	lsls	r2, r3, #22
 8017322:	d4ee      	bmi.n	8017302 <__smakebuf_r+0x18>
 8017324:	f023 0303 	bic.w	r3, r3, #3
 8017328:	f043 0302 	orr.w	r3, r3, #2
 801732c:	81a3      	strh	r3, [r4, #12]
 801732e:	e7e2      	b.n	80172f6 <__smakebuf_r+0xc>
 8017330:	89a3      	ldrh	r3, [r4, #12]
 8017332:	6020      	str	r0, [r4, #0]
 8017334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017338:	81a3      	strh	r3, [r4, #12]
 801733a:	9b01      	ldr	r3, [sp, #4]
 801733c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017340:	b15b      	cbz	r3, 801735a <__smakebuf_r+0x70>
 8017342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017346:	4630      	mov	r0, r6
 8017348:	f000 f84e 	bl	80173e8 <_isatty_r>
 801734c:	b128      	cbz	r0, 801735a <__smakebuf_r+0x70>
 801734e:	89a3      	ldrh	r3, [r4, #12]
 8017350:	f023 0303 	bic.w	r3, r3, #3
 8017354:	f043 0301 	orr.w	r3, r3, #1
 8017358:	81a3      	strh	r3, [r4, #12]
 801735a:	89a3      	ldrh	r3, [r4, #12]
 801735c:	431d      	orrs	r5, r3
 801735e:	81a5      	strh	r5, [r4, #12]
 8017360:	e7cf      	b.n	8017302 <__smakebuf_r+0x18>

08017362 <_raise_r>:
 8017362:	291f      	cmp	r1, #31
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4605      	mov	r5, r0
 8017368:	460c      	mov	r4, r1
 801736a:	d904      	bls.n	8017376 <_raise_r+0x14>
 801736c:	2316      	movs	r3, #22
 801736e:	6003      	str	r3, [r0, #0]
 8017370:	f04f 30ff 	mov.w	r0, #4294967295
 8017374:	bd38      	pop	{r3, r4, r5, pc}
 8017376:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017378:	b112      	cbz	r2, 8017380 <_raise_r+0x1e>
 801737a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801737e:	b94b      	cbnz	r3, 8017394 <_raise_r+0x32>
 8017380:	4628      	mov	r0, r5
 8017382:	f000 f853 	bl	801742c <_getpid_r>
 8017386:	4622      	mov	r2, r4
 8017388:	4601      	mov	r1, r0
 801738a:	4628      	mov	r0, r5
 801738c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017390:	f000 b83a 	b.w	8017408 <_kill_r>
 8017394:	2b01      	cmp	r3, #1
 8017396:	d00a      	beq.n	80173ae <_raise_r+0x4c>
 8017398:	1c59      	adds	r1, r3, #1
 801739a:	d103      	bne.n	80173a4 <_raise_r+0x42>
 801739c:	2316      	movs	r3, #22
 801739e:	6003      	str	r3, [r0, #0]
 80173a0:	2001      	movs	r0, #1
 80173a2:	e7e7      	b.n	8017374 <_raise_r+0x12>
 80173a4:	2100      	movs	r1, #0
 80173a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80173aa:	4620      	mov	r0, r4
 80173ac:	4798      	blx	r3
 80173ae:	2000      	movs	r0, #0
 80173b0:	e7e0      	b.n	8017374 <_raise_r+0x12>
	...

080173b4 <raise>:
 80173b4:	4b02      	ldr	r3, [pc, #8]	@ (80173c0 <raise+0xc>)
 80173b6:	4601      	mov	r1, r0
 80173b8:	6818      	ldr	r0, [r3, #0]
 80173ba:	f7ff bfd2 	b.w	8017362 <_raise_r>
 80173be:	bf00      	nop
 80173c0:	2000013c 	.word	0x2000013c

080173c4 <_fstat_r>:
 80173c4:	b538      	push	{r3, r4, r5, lr}
 80173c6:	4d07      	ldr	r5, [pc, #28]	@ (80173e4 <_fstat_r+0x20>)
 80173c8:	2300      	movs	r3, #0
 80173ca:	4604      	mov	r4, r0
 80173cc:	4608      	mov	r0, r1
 80173ce:	4611      	mov	r1, r2
 80173d0:	602b      	str	r3, [r5, #0]
 80173d2:	f7ea f81d 	bl	8001410 <_fstat>
 80173d6:	1c43      	adds	r3, r0, #1
 80173d8:	d102      	bne.n	80173e0 <_fstat_r+0x1c>
 80173da:	682b      	ldr	r3, [r5, #0]
 80173dc:	b103      	cbz	r3, 80173e0 <_fstat_r+0x1c>
 80173de:	6023      	str	r3, [r4, #0]
 80173e0:	bd38      	pop	{r3, r4, r5, pc}
 80173e2:	bf00      	nop
 80173e4:	2000edd8 	.word	0x2000edd8

080173e8 <_isatty_r>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	4d06      	ldr	r5, [pc, #24]	@ (8017404 <_isatty_r+0x1c>)
 80173ec:	2300      	movs	r3, #0
 80173ee:	4604      	mov	r4, r0
 80173f0:	4608      	mov	r0, r1
 80173f2:	602b      	str	r3, [r5, #0]
 80173f4:	f7ea f81c 	bl	8001430 <_isatty>
 80173f8:	1c43      	adds	r3, r0, #1
 80173fa:	d102      	bne.n	8017402 <_isatty_r+0x1a>
 80173fc:	682b      	ldr	r3, [r5, #0]
 80173fe:	b103      	cbz	r3, 8017402 <_isatty_r+0x1a>
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	bd38      	pop	{r3, r4, r5, pc}
 8017404:	2000edd8 	.word	0x2000edd8

08017408 <_kill_r>:
 8017408:	b538      	push	{r3, r4, r5, lr}
 801740a:	4d07      	ldr	r5, [pc, #28]	@ (8017428 <_kill_r+0x20>)
 801740c:	2300      	movs	r3, #0
 801740e:	4604      	mov	r4, r0
 8017410:	4608      	mov	r0, r1
 8017412:	4611      	mov	r1, r2
 8017414:	602b      	str	r3, [r5, #0]
 8017416:	f7e9 ff99 	bl	800134c <_kill>
 801741a:	1c43      	adds	r3, r0, #1
 801741c:	d102      	bne.n	8017424 <_kill_r+0x1c>
 801741e:	682b      	ldr	r3, [r5, #0]
 8017420:	b103      	cbz	r3, 8017424 <_kill_r+0x1c>
 8017422:	6023      	str	r3, [r4, #0]
 8017424:	bd38      	pop	{r3, r4, r5, pc}
 8017426:	bf00      	nop
 8017428:	2000edd8 	.word	0x2000edd8

0801742c <_getpid_r>:
 801742c:	f7e9 bf86 	b.w	800133c <_getpid>

08017430 <_malloc_usable_size_r>:
 8017430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017434:	1f18      	subs	r0, r3, #4
 8017436:	2b00      	cmp	r3, #0
 8017438:	bfbc      	itt	lt
 801743a:	580b      	ldrlt	r3, [r1, r0]
 801743c:	18c0      	addlt	r0, r0, r3
 801743e:	4770      	bx	lr

08017440 <_init>:
 8017440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017442:	bf00      	nop
 8017444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017446:	bc08      	pop	{r3}
 8017448:	469e      	mov	lr, r3
 801744a:	4770      	bx	lr

0801744c <_fini>:
 801744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801744e:	bf00      	nop
 8017450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017452:	bc08      	pop	{r3}
 8017454:	469e      	mov	lr, r3
 8017456:	4770      	bx	lr
